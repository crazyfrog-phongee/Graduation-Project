
BACKUP_NODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003690  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800379c  0800379c  0001379c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003864  08003864  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003864  08003864  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003864  08003864  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003864  08003864  00013864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003868  08003868  00013868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800386c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000074  080038e0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  080038e0  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5fd  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e64  00000000  00000000  0002a69a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000948  00000000  00000000  0002c500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000870  00000000  00000000  0002ce48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182dc  00000000  00000000  0002d6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba75  00000000  00000000  00045994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084f9d  00000000  00000000  00051409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d63a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002808  00000000  00000000  000d63f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003784 	.word	0x08003784

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003784 	.word	0x08003784

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 800015c:	b4b0      	push	{r4, r5, r7}
 800015e:	b08f      	sub	sp, #60	; 0x3c
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000164:	f240 13b1 	movw	r3, #433	; 0x1b1
 8000168:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 800016a:	2307      	movs	r3, #7
 800016c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000170:	2307      	movs	r3, #7
 8000172:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000176:	2301      	movs	r3, #1
 8000178:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 800017c:	23ff      	movs	r3, #255	; 0xff
 800017e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000182:	2364      	movs	r3, #100	; 0x64
 8000184:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8000188:	2308      	movs	r3, #8
 800018a:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	461d      	mov	r5, r3
 8000190:	f107 040c 	add.w	r4, r7, #12
 8000194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000196:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800019a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800019c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80001a0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80001a4:	6878      	ldr	r0, [r7, #4]
 80001a6:	373c      	adds	r7, #60	; 0x3c
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bcb0      	pop	{r4, r5, r7}
 80001ac:	4770      	bx	lr

080001ae <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 80001ae:	b580      	push	{r7, lr}
 80001b0:	b082      	sub	sp, #8
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	6898      	ldr	r0, [r3, #8]
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	899b      	ldrh	r3, [r3, #12]
 80001be:	2200      	movs	r2, #0
 80001c0:	4619      	mov	r1, r3
 80001c2:	f001 fa8f 	bl	80016e4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80001c6:	2001      	movs	r0, #1
 80001c8:	f000 ffd6 	bl	8001178 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	6898      	ldr	r0, [r3, #8]
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	899b      	ldrh	r3, [r3, #12]
 80001d4:	2201      	movs	r2, #1
 80001d6:	4619      	mov	r1, r3
 80001d8:	f001 fa84 	bl	80016e4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80001dc:	2064      	movs	r0, #100	; 0x64
 80001de:	f000 ffcb 	bl	8001178 <HAL_Delay>
}
 80001e2:	bf00      	nop
 80001e4:	3708      	adds	r7, #8
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}

080001ea <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 80001ea:	b580      	push	{r7, lr}
 80001ec:	b084      	sub	sp, #16
 80001ee:	af00      	add	r7, sp, #0
 80001f0:	6078      	str	r0, [r7, #4]
 80001f2:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 80001f4:	2101      	movs	r1, #1
 80001f6:	6878      	ldr	r0, [r7, #4]
 80001f8:	f000 f99f 	bl	800053a <LoRa_read>
 80001fc:	4603      	mov	r3, r0
 80001fe:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000200:	7bbb      	ldrb	r3, [r7, #14]
 8000202:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000204:	683b      	ldr	r3, [r7, #0]
 8000206:	2b00      	cmp	r3, #0
 8000208:	d107      	bne.n	800021a <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800020a:	7bbb      	ldrb	r3, [r7, #14]
 800020c:	f023 0307 	bic.w	r3, r3, #7
 8000210:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	2200      	movs	r2, #0
 8000216:	61da      	str	r2, [r3, #28]
 8000218:	e03e      	b.n	8000298 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	2b01      	cmp	r3, #1
 800021e:	d10c      	bne.n	800023a <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000220:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000224:	f023 0307 	bic.w	r3, r3, #7
 8000228:	b25b      	sxtb	r3, r3
 800022a:	f043 0301 	orr.w	r3, r3, #1
 800022e:	b25b      	sxtb	r3, r3
 8000230:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2201      	movs	r2, #1
 8000236:	61da      	str	r2, [r3, #28]
 8000238:	e02e      	b.n	8000298 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	2b03      	cmp	r3, #3
 800023e:	d10c      	bne.n	800025a <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000240:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000244:	f023 0307 	bic.w	r3, r3, #7
 8000248:	b25b      	sxtb	r3, r3
 800024a:	f043 0303 	orr.w	r3, r3, #3
 800024e:	b25b      	sxtb	r3, r3
 8000250:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	2203      	movs	r2, #3
 8000256:	61da      	str	r2, [r3, #28]
 8000258:	e01e      	b.n	8000298 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	2b05      	cmp	r3, #5
 800025e:	d10c      	bne.n	800027a <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000260:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000264:	f023 0307 	bic.w	r3, r3, #7
 8000268:	b25b      	sxtb	r3, r3
 800026a:	f043 0305 	orr.w	r3, r3, #5
 800026e:	b25b      	sxtb	r3, r3
 8000270:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	2205      	movs	r2, #5
 8000276:	61da      	str	r2, [r3, #28]
 8000278:	e00e      	b.n	8000298 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	2b06      	cmp	r3, #6
 800027e:	d10b      	bne.n	8000298 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000280:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000284:	f023 0307 	bic.w	r3, r3, #7
 8000288:	b25b      	sxtb	r3, r3
 800028a:	f043 0306 	orr.w	r3, r3, #6
 800028e:	b25b      	sxtb	r3, r3
 8000290:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	2206      	movs	r2, #6
 8000296:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000298:	7bfb      	ldrb	r3, [r7, #15]
 800029a:	461a      	mov	r2, r3
 800029c:	2101      	movs	r1, #1
 800029e:	6878      	ldr	r0, [r7, #4]
 80002a0:	f000 f965 	bl	800056e <LoRa_write>
	//HAL_Delay(10);
}
 80002a4:	bf00      	nop
 80002a6:	3710      	adds	r7, #16
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	60f8      	str	r0, [r7, #12]
 80002b4:	60b9      	str	r1, [r7, #8]
 80002b6:	603b      	str	r3, [r7, #0]
 80002b8:	4613      	mov	r3, r2
 80002ba:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	6818      	ldr	r0, [r3, #0]
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	889b      	ldrh	r3, [r3, #4]
 80002c4:	2200      	movs	r2, #0
 80002c6:	4619      	mov	r1, r3
 80002c8:	f001 fa0c 	bl	80016e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	6998      	ldr	r0, [r3, #24]
 80002d0:	88fa      	ldrh	r2, [r7, #6]
 80002d2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80002d6:	68b9      	ldr	r1, [r7, #8]
 80002d8:	f001 fec8 	bl	800206c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80002dc:	bf00      	nop
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	699b      	ldr	r3, [r3, #24]
 80002e2:	4618      	mov	r0, r3
 80002e4:	f002 facd 	bl	8002882 <HAL_SPI_GetState>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b01      	cmp	r3, #1
 80002ec:	d1f7      	bne.n	80002de <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	6998      	ldr	r0, [r3, #24]
 80002f2:	8b3a      	ldrh	r2, [r7, #24]
 80002f4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80002f8:	6839      	ldr	r1, [r7, #0]
 80002fa:	f001 fffa 	bl	80022f2 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80002fe:	bf00      	nop
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4618      	mov	r0, r3
 8000306:	f002 fabc 	bl	8002882 <HAL_SPI_GetState>
 800030a:	4603      	mov	r3, r0
 800030c:	2b01      	cmp	r3, #1
 800030e:	d1f7      	bne.n	8000300 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	6818      	ldr	r0, [r3, #0]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	889b      	ldrh	r3, [r3, #4]
 8000318:	2201      	movs	r2, #1
 800031a:	4619      	mov	r1, r3
 800031c:	f001 f9e2 	bl	80016e4 <HAL_GPIO_WritePin>
}
 8000320:	bf00      	nop
 8000322:	3710      	adds	r7, #16
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}

08000328 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	60f8      	str	r0, [r7, #12]
 8000330:	60b9      	str	r1, [r7, #8]
 8000332:	603b      	str	r3, [r7, #0]
 8000334:	4613      	mov	r3, r2
 8000336:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	6818      	ldr	r0, [r3, #0]
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	889b      	ldrh	r3, [r3, #4]
 8000340:	2200      	movs	r2, #0
 8000342:	4619      	mov	r1, r3
 8000344:	f001 f9ce 	bl	80016e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	6998      	ldr	r0, [r3, #24]
 800034c:	88fa      	ldrh	r2, [r7, #6]
 800034e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000352:	68b9      	ldr	r1, [r7, #8]
 8000354:	f001 fe8a 	bl	800206c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000358:	bf00      	nop
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	4618      	mov	r0, r3
 8000360:	f002 fa8f 	bl	8002882 <HAL_SPI_GetState>
 8000364:	4603      	mov	r3, r0
 8000366:	2b01      	cmp	r3, #1
 8000368:	d1f7      	bne.n	800035a <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	6998      	ldr	r0, [r3, #24]
 800036e:	8b3a      	ldrh	r2, [r7, #24]
 8000370:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000374:	6839      	ldr	r1, [r7, #0]
 8000376:	f001 fe79 	bl	800206c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800037a:	bf00      	nop
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4618      	mov	r0, r3
 8000382:	f002 fa7e 	bl	8002882 <HAL_SPI_GetState>
 8000386:	4603      	mov	r3, r0
 8000388:	2b01      	cmp	r3, #1
 800038a:	d1f7      	bne.n	800037c <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6818      	ldr	r0, [r3, #0]
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	889b      	ldrh	r3, [r3, #4]
 8000394:	2201      	movs	r2, #1
 8000396:	4619      	mov	r1, r3
 8000398:	f001 f9a4 	bl	80016e4 <HAL_GPIO_WritePin>
}
 800039c:	bf00      	nop
 800039e:	3710      	adds	r7, #16
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	04db      	lsls	r3, r3, #19
 80003b2:	115b      	asrs	r3, r3, #5
 80003b4:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	0c1b      	lsrs	r3, r3, #16
 80003ba:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80003bc:	7afb      	ldrb	r3, [r7, #11]
 80003be:	461a      	mov	r2, r3
 80003c0:	2106      	movs	r1, #6
 80003c2:	6878      	ldr	r0, [r7, #4]
 80003c4:	f000 f8d3 	bl	800056e <LoRa_write>
	HAL_Delay(5);
 80003c8:	2005      	movs	r0, #5
 80003ca:	f000 fed5 	bl	8001178 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	0a1b      	lsrs	r3, r3, #8
 80003d2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80003d4:	7afb      	ldrb	r3, [r7, #11]
 80003d6:	461a      	mov	r2, r3
 80003d8:	2107      	movs	r1, #7
 80003da:	6878      	ldr	r0, [r7, #4]
 80003dc:	f000 f8c7 	bl	800056e <LoRa_write>
	HAL_Delay(5);
 80003e0:	2005      	movs	r0, #5
 80003e2:	f000 fec9 	bl	8001178 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 80003ea:	7afb      	ldrb	r3, [r7, #11]
 80003ec:	461a      	mov	r2, r3
 80003ee:	2108      	movs	r1, #8
 80003f0:	6878      	ldr	r0, [r7, #4]
 80003f2:	f000 f8bc 	bl	800056e <LoRa_write>
	HAL_Delay(5);
 80003f6:	2005      	movs	r0, #5
 80003f8:	f000 febe 	bl	8001178 <HAL_Delay>
}
 80003fc:	bf00      	nop
 80003fe:	3710      	adds	r7, #16
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}

08000404 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	2b0c      	cmp	r3, #12
 8000412:	dd01      	ble.n	8000418 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000414:	230c      	movs	r3, #12
 8000416:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	2b06      	cmp	r3, #6
 800041c:	dc01      	bgt.n	8000422 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800041e:	2307      	movs	r3, #7
 8000420:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000422:	211e      	movs	r1, #30
 8000424:	6878      	ldr	r0, [r7, #4]
 8000426:	f000 f888 	bl	800053a <LoRa_read>
 800042a:	4603      	mov	r3, r0
 800042c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800042e:	200a      	movs	r0, #10
 8000430:	f000 fea2 	bl	8001178 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	b2db      	uxtb	r3, r3
 8000438:	011b      	lsls	r3, r3, #4
 800043a:	b2da      	uxtb	r2, r3
 800043c:	7bfb      	ldrb	r3, [r7, #15]
 800043e:	f003 030f 	and.w	r3, r3, #15
 8000442:	b2db      	uxtb	r3, r3
 8000444:	4413      	add	r3, r2
 8000446:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000448:	7bbb      	ldrb	r3, [r7, #14]
 800044a:	461a      	mov	r2, r3
 800044c:	211e      	movs	r1, #30
 800044e:	6878      	ldr	r0, [r7, #4]
 8000450:	f000 f88d 	bl	800056e <LoRa_write>
	HAL_Delay(10);
 8000454:	200a      	movs	r0, #10
 8000456:	f000 fe8f 	bl	8001178 <HAL_Delay>
}
 800045a:	bf00      	nop
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}

08000462 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000462:	b580      	push	{r7, lr}
 8000464:	b082      	sub	sp, #8
 8000466:	af00      	add	r7, sp, #0
 8000468:	6078      	str	r0, [r7, #4]
 800046a:	460b      	mov	r3, r1
 800046c:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 800046e:	78fb      	ldrb	r3, [r7, #3]
 8000470:	461a      	mov	r2, r3
 8000472:	2109      	movs	r1, #9
 8000474:	6878      	ldr	r0, [r7, #4]
 8000476:	f000 f87a 	bl	800056e <LoRa_write>
	HAL_Delay(10);
 800047a:	200a      	movs	r0, #10
 800047c:	f000 fe7c 	bl	8001178 <HAL_Delay>
}
 8000480:	bf00      	nop
 8000482:	3708      	adds	r7, #8
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}

08000488 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000488:	b580      	push	{r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	460b      	mov	r3, r1
 8000492:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8000494:	2300      	movs	r3, #0
 8000496:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000498:	78fb      	ldrb	r3, [r7, #3]
 800049a:	2b2c      	cmp	r3, #44	; 0x2c
 800049c:	d801      	bhi.n	80004a2 <LoRa_setOCP+0x1a>
		current = 45;
 800049e:	232d      	movs	r3, #45	; 0x2d
 80004a0:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80004a2:	78fb      	ldrb	r3, [r7, #3]
 80004a4:	2bf0      	cmp	r3, #240	; 0xf0
 80004a6:	d901      	bls.n	80004ac <LoRa_setOCP+0x24>
		current = 240;
 80004a8:	23f0      	movs	r3, #240	; 0xf0
 80004aa:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80004ac:	78fb      	ldrb	r3, [r7, #3]
 80004ae:	2b78      	cmp	r3, #120	; 0x78
 80004b0:	d809      	bhi.n	80004c6 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80004b2:	78fb      	ldrb	r3, [r7, #3]
 80004b4:	3b2d      	subs	r3, #45	; 0x2d
 80004b6:	4a12      	ldr	r2, [pc, #72]	; (8000500 <LoRa_setOCP+0x78>)
 80004b8:	fb82 1203 	smull	r1, r2, r2, r3
 80004bc:	1052      	asrs	r2, r2, #1
 80004be:	17db      	asrs	r3, r3, #31
 80004c0:	1ad3      	subs	r3, r2, r3
 80004c2:	73fb      	strb	r3, [r7, #15]
 80004c4:	e00b      	b.n	80004de <LoRa_setOCP+0x56>
	else if(current <= 240)
 80004c6:	78fb      	ldrb	r3, [r7, #3]
 80004c8:	2bf0      	cmp	r3, #240	; 0xf0
 80004ca:	d808      	bhi.n	80004de <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80004cc:	78fb      	ldrb	r3, [r7, #3]
 80004ce:	331e      	adds	r3, #30
 80004d0:	4a0b      	ldr	r2, [pc, #44]	; (8000500 <LoRa_setOCP+0x78>)
 80004d2:	fb82 1203 	smull	r1, r2, r2, r3
 80004d6:	1092      	asrs	r2, r2, #2
 80004d8:	17db      	asrs	r3, r3, #31
 80004da:	1ad3      	subs	r3, r2, r3
 80004dc:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80004de:	7bfb      	ldrb	r3, [r7, #15]
 80004e0:	3320      	adds	r3, #32
 80004e2:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 80004e4:	7bfb      	ldrb	r3, [r7, #15]
 80004e6:	461a      	mov	r2, r3
 80004e8:	210b      	movs	r1, #11
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f000 f83f 	bl	800056e <LoRa_write>
	HAL_Delay(10);
 80004f0:	200a      	movs	r0, #10
 80004f2:	f000 fe41 	bl	8001178 <HAL_Delay>
}
 80004f6:	bf00      	nop
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	66666667 	.word	0x66666667

08000504 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 800050c:	211e      	movs	r1, #30
 800050e:	6878      	ldr	r0, [r7, #4]
 8000510:	f000 f813 	bl	800053a <LoRa_read>
 8000514:	4603      	mov	r3, r0
 8000516:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000518:	7bfb      	ldrb	r3, [r7, #15]
 800051a:	f043 0307 	orr.w	r3, r3, #7
 800051e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000520:	7bbb      	ldrb	r3, [r7, #14]
 8000522:	461a      	mov	r2, r3
 8000524:	211e      	movs	r1, #30
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f000 f821 	bl	800056e <LoRa_write>
	HAL_Delay(10);
 800052c:	200a      	movs	r0, #10
 800052e:	f000 fe23 	bl	8001178 <HAL_Delay>
}
 8000532:	bf00      	nop
 8000534:	3710      	adds	r7, #16
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 800053a:	b580      	push	{r7, lr}
 800053c:	b086      	sub	sp, #24
 800053e:	af02      	add	r7, sp, #8
 8000540:	6078      	str	r0, [r7, #4]
 8000542:	460b      	mov	r3, r1
 8000544:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000546:	78fb      	ldrb	r3, [r7, #3]
 8000548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800054c:	b2db      	uxtb	r3, r3
 800054e:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000550:	f107 030f 	add.w	r3, r7, #15
 8000554:	f107 010e 	add.w	r1, r7, #14
 8000558:	2201      	movs	r2, #1
 800055a:	9200      	str	r2, [sp, #0]
 800055c:	2201      	movs	r2, #1
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	f7ff fea4 	bl	80002ac <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000564:	7bfb      	ldrb	r3, [r7, #15]
}
 8000566:	4618      	mov	r0, r3
 8000568:	3710      	adds	r7, #16
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}

0800056e <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 800056e:	b580      	push	{r7, lr}
 8000570:	b086      	sub	sp, #24
 8000572:	af02      	add	r7, sp, #8
 8000574:	6078      	str	r0, [r7, #4]
 8000576:	460b      	mov	r3, r1
 8000578:	70fb      	strb	r3, [r7, #3]
 800057a:	4613      	mov	r3, r2
 800057c:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800057e:	78fb      	ldrb	r3, [r7, #3]
 8000580:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000584:	b2db      	uxtb	r3, r3
 8000586:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000588:	78bb      	ldrb	r3, [r7, #2]
 800058a:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 800058c:	f107 030f 	add.w	r3, r7, #15
 8000590:	f107 010e 	add.w	r1, r7, #14
 8000594:	2201      	movs	r2, #1
 8000596:	9200      	str	r2, [sp, #0]
 8000598:	2201      	movs	r2, #1
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	f7ff fec4 	bl	8000328 <LoRa_writeReg>
	//HAL_Delay(5);
}
 80005a0:	bf00      	nop
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	607a      	str	r2, [r7, #4]
 80005b2:	461a      	mov	r2, r3
 80005b4:	460b      	mov	r3, r1
 80005b6:	72fb      	strb	r3, [r7, #11]
 80005b8:	4613      	mov	r3, r2
 80005ba:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 80005bc:	7afb      	ldrb	r3, [r7, #11]
 80005be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	6818      	ldr	r0, [r3, #0]
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	889b      	ldrh	r3, [r3, #4]
 80005ce:	2200      	movs	r2, #0
 80005d0:	4619      	mov	r1, r3
 80005d2:	f001 f887 	bl	80016e4 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	6998      	ldr	r0, [r3, #24]
 80005da:	f107 0117 	add.w	r1, r7, #23
 80005de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80005e2:	2201      	movs	r2, #1
 80005e4:	f001 fd42 	bl	800206c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80005e8:	bf00      	nop
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 f947 	bl	8002882 <HAL_SPI_GetState>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d1f7      	bne.n	80005ea <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	6998      	ldr	r0, [r3, #24]
 80005fe:	7abb      	ldrb	r3, [r7, #10]
 8000600:	b29a      	uxth	r2, r3
 8000602:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	f001 fd30 	bl	800206c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800060c:	bf00      	nop
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	4618      	mov	r0, r3
 8000614:	f002 f935 	bl	8002882 <HAL_SPI_GetState>
 8000618:	4603      	mov	r3, r0
 800061a:	2b01      	cmp	r3, #1
 800061c:	d1f7      	bne.n	800060e <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	6818      	ldr	r0, [r3, #0]
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	889b      	ldrh	r3, [r3, #4]
 8000626:	2201      	movs	r2, #1
 8000628:	4619      	mov	r1, r3
 800062a:	f001 f85b 	bl	80016e4 <HAL_GPIO_WritePin>
}
 800062e:	bf00      	nop
 8000630:	3718      	adds	r7, #24
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000636:	b480      	push	{r7}
 8000638:	b083      	sub	sp, #12
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]

	return 1;
 800063e:	2301      	movs	r3, #1
}
 8000640:	4618      	mov	r0, r3
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr

0800064a <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 800064a:	b580      	push	{r7, lr}
 800064c:	b086      	sub	sp, #24
 800064e:	af00      	add	r7, sp, #0
 8000650:	60f8      	str	r0, [r7, #12]
 8000652:	60b9      	str	r1, [r7, #8]
 8000654:	4611      	mov	r1, r2
 8000656:	461a      	mov	r2, r3
 8000658:	460b      	mov	r3, r1
 800065a:	71fb      	strb	r3, [r7, #7]
 800065c:	4613      	mov	r3, r2
 800065e:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	69db      	ldr	r3, [r3, #28]
 8000664:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000666:	2101      	movs	r1, #1
 8000668:	68f8      	ldr	r0, [r7, #12]
 800066a:	f7ff fdbe 	bl	80001ea <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 800066e:	210e      	movs	r1, #14
 8000670:	68f8      	ldr	r0, [r7, #12]
 8000672:	f7ff ff62 	bl	800053a <LoRa_read>
 8000676:	4603      	mov	r3, r0
 8000678:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800067a:	7cfb      	ldrb	r3, [r7, #19]
 800067c:	461a      	mov	r2, r3
 800067e:	210d      	movs	r1, #13
 8000680:	68f8      	ldr	r0, [r7, #12]
 8000682:	f7ff ff74 	bl	800056e <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	461a      	mov	r2, r3
 800068a:	2122      	movs	r1, #34	; 0x22
 800068c:	68f8      	ldr	r0, [r7, #12]
 800068e:	f7ff ff6e 	bl	800056e <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	68ba      	ldr	r2, [r7, #8]
 8000696:	2100      	movs	r1, #0
 8000698:	68f8      	ldr	r0, [r7, #12]
 800069a:	f7ff ff85 	bl	80005a8 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 800069e:	2103      	movs	r1, #3
 80006a0:	68f8      	ldr	r0, [r7, #12]
 80006a2:	f7ff fda2 	bl	80001ea <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 80006a6:	2112      	movs	r1, #18
 80006a8:	68f8      	ldr	r0, [r7, #12]
 80006aa:	f7ff ff46 	bl	800053a <LoRa_read>
 80006ae:	4603      	mov	r3, r0
 80006b0:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 80006b2:	7cfb      	ldrb	r3, [r7, #19]
 80006b4:	f003 0308 	and.w	r3, r3, #8
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d00a      	beq.n	80006d2 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80006bc:	22ff      	movs	r2, #255	; 0xff
 80006be:	2112      	movs	r1, #18
 80006c0:	68f8      	ldr	r0, [r7, #12]
 80006c2:	f7ff ff54 	bl	800056e <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 80006c6:	6979      	ldr	r1, [r7, #20]
 80006c8:	68f8      	ldr	r0, [r7, #12]
 80006ca:	f7ff fd8e 	bl	80001ea <LoRa_gotoMode>
			return 1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	e00f      	b.n	80006f2 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 80006d2:	88bb      	ldrh	r3, [r7, #4]
 80006d4:	3b01      	subs	r3, #1
 80006d6:	80bb      	strh	r3, [r7, #4]
 80006d8:	88bb      	ldrh	r3, [r7, #4]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d105      	bne.n	80006ea <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 80006de:	6979      	ldr	r1, [r7, #20]
 80006e0:	68f8      	ldr	r0, [r7, #12]
 80006e2:	f7ff fd82 	bl	80001ea <LoRa_gotoMode>
				return 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	e003      	b.n	80006f2 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 80006ea:	2001      	movs	r0, #1
 80006ec:	f000 fd44 	bl	8001178 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 80006f0:	e7d9      	b.n	80006a6 <LoRa_transmit+0x5c>
	}
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3718      	adds	r7, #24
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b082      	sub	sp, #8
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000702:	2105      	movs	r1, #5
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f7ff fd70 	bl	80001ea <LoRa_gotoMode>
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000712:	b590      	push	{r4, r7, lr}
 8000714:	b089      	sub	sp, #36	; 0x24
 8000716:	af00      	add	r7, sp, #0
 8000718:	60f8      	str	r0, [r7, #12]
 800071a:	60b9      	str	r1, [r7, #8]
 800071c:	4613      	mov	r3, r2
 800071e:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]
 8000728:	e007      	b.n	800073a <LoRa_receive+0x28>
		data[i]=0;
 800072a:	69bb      	ldr	r3, [r7, #24]
 800072c:	68ba      	ldr	r2, [r7, #8]
 800072e:	4413      	add	r3, r2
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	3301      	adds	r3, #1
 8000738:	61bb      	str	r3, [r7, #24]
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	69ba      	ldr	r2, [r7, #24]
 800073e:	429a      	cmp	r2, r3
 8000740:	dbf3      	blt.n	800072a <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000742:	2101      	movs	r1, #1
 8000744:	68f8      	ldr	r0, [r7, #12]
 8000746:	f7ff fd50 	bl	80001ea <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 800074a:	2112      	movs	r1, #18
 800074c:	68f8      	ldr	r0, [r7, #12]
 800074e:	f7ff fef4 	bl	800053a <LoRa_read>
 8000752:	4603      	mov	r3, r0
 8000754:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000756:	7cfb      	ldrb	r3, [r7, #19]
 8000758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800075c:	2b00      	cmp	r3, #0
 800075e:	d02f      	beq.n	80007c0 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000760:	22ff      	movs	r2, #255	; 0xff
 8000762:	2112      	movs	r1, #18
 8000764:	68f8      	ldr	r0, [r7, #12]
 8000766:	f7ff ff02 	bl	800056e <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 800076a:	2113      	movs	r1, #19
 800076c:	68f8      	ldr	r0, [r7, #12]
 800076e:	f7ff fee4 	bl	800053a <LoRa_read>
 8000772:	4603      	mov	r3, r0
 8000774:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000776:	2110      	movs	r1, #16
 8000778:	68f8      	ldr	r0, [r7, #12]
 800077a:	f7ff fede 	bl	800053a <LoRa_read>
 800077e:	4603      	mov	r3, r0
 8000780:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000782:	7cfb      	ldrb	r3, [r7, #19]
 8000784:	461a      	mov	r2, r3
 8000786:	210d      	movs	r1, #13
 8000788:	68f8      	ldr	r0, [r7, #12]
 800078a:	f7ff fef0 	bl	800056e <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 800078e:	7cba      	ldrb	r2, [r7, #18]
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	4293      	cmp	r3, r2
 8000794:	bf28      	it	cs
 8000796:	4613      	movcs	r3, r2
 8000798:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
 800079e:	e00b      	b.n	80007b8 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	68ba      	ldr	r2, [r7, #8]
 80007a4:	18d4      	adds	r4, r2, r3
 80007a6:	2100      	movs	r1, #0
 80007a8:	68f8      	ldr	r0, [r7, #12]
 80007aa:	f7ff fec6 	bl	800053a <LoRa_read>
 80007ae:	4603      	mov	r3, r0
 80007b0:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	3301      	adds	r3, #1
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	7ffb      	ldrb	r3, [r7, #31]
 80007ba:	697a      	ldr	r2, [r7, #20]
 80007bc:	429a      	cmp	r2, r3
 80007be:	dbef      	blt.n	80007a0 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80007c0:	2105      	movs	r1, #5
 80007c2:	68f8      	ldr	r0, [r7, #12]
 80007c4:	f7ff fd11 	bl	80001ea <LoRa_gotoMode>
    return min;
 80007c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3724      	adds	r7, #36	; 0x24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd90      	pop	{r4, r7, pc}

080007d2 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b084      	sub	sp, #16
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f7ff ff2b 	bl	8000636 <LoRa_isvalid>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f000 8093 	beq.w	800090e <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80007e8:	2100      	movs	r1, #0
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f7ff fcfd 	bl	80001ea <LoRa_gotoMode>
			HAL_Delay(10);
 80007f0:	200a      	movs	r0, #10
 80007f2:	f000 fcc1 	bl	8001178 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80007f6:	2101      	movs	r1, #1
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff fe9e 	bl	800053a <LoRa_read>
 80007fe:	4603      	mov	r3, r0
 8000800:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000802:	200a      	movs	r0, #10
 8000804:	f000 fcb8 	bl	8001178 <HAL_Delay>
			data = read | 0x80;
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800080e:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000810:	7bbb      	ldrb	r3, [r7, #14]
 8000812:	461a      	mov	r2, r3
 8000814:	2101      	movs	r1, #1
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f7ff fea9 	bl	800056e <LoRa_write>
			HAL_Delay(100);
 800081c:	2064      	movs	r0, #100	; 0x64
 800081e:	f000 fcab 	bl	8001178 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6a1b      	ldr	r3, [r3, #32]
 8000826:	4619      	mov	r1, r3
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f7ff fdbb 	bl	80003a4 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000834:	4619      	mov	r1, r3
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f7ff fe13 	bl	8000462 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000842:	4619      	mov	r1, r3
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff fe1f 	bl	8000488 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 800084a:	2223      	movs	r2, #35	; 0x23
 800084c:	210c      	movs	r1, #12
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff fe8d 	bl	800056e <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff fe55 	bl	8000504 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000860:	4619      	mov	r1, r3
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff fdce 	bl	8000404 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000868:	22ff      	movs	r2, #255	; 0xff
 800086a:	211f      	movs	r1, #31
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff fe7e 	bl	800056e <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800087c:	011b      	lsls	r3, r3, #4
 800087e:	b2da      	uxtb	r2, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	b2db      	uxtb	r3, r3
 800088a:	4413      	add	r3, r2
 800088c:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 800088e:	7bbb      	ldrb	r3, [r7, #14]
 8000890:	461a      	mov	r2, r3
 8000892:	211d      	movs	r1, #29
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f7ff fe6a 	bl	800056e <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800089e:	0a1b      	lsrs	r3, r3, #8
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	461a      	mov	r2, r3
 80008a6:	2120      	movs	r1, #32
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff fe60 	bl	800056e <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	461a      	mov	r2, r3
 80008b6:	2121      	movs	r1, #33	; 0x21
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f7ff fe58 	bl	800056e <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 80008be:	2140      	movs	r1, #64	; 0x40
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f7ff fe3a 	bl	800053a <LoRa_read>
 80008c6:	4603      	mov	r3, r0
 80008c8:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
 80008cc:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80008d0:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 80008d2:	7bbb      	ldrb	r3, [r7, #14]
 80008d4:	461a      	mov	r2, r3
 80008d6:	2140      	movs	r1, #64	; 0x40
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f7ff fe48 	bl	800056e <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 80008de:	2101      	movs	r1, #1
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f7ff fc82 	bl	80001ea <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2201      	movs	r2, #1
 80008ea:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80008ec:	200a      	movs	r0, #10
 80008ee:	f000 fc43 	bl	8001178 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80008f2:	2142      	movs	r1, #66	; 0x42
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff fe20 	bl	800053a <LoRa_read>
 80008fa:	4603      	mov	r3, r0
 80008fc:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
 8000900:	2b12      	cmp	r3, #18
 8000902:	d101      	bne.n	8000908 <LoRa_init+0x136>
				return LORA_OK;
 8000904:	23c8      	movs	r3, #200	; 0xc8
 8000906:	e004      	b.n	8000912 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 8000908:	f44f 73ca 	mov.w	r3, #404	; 0x194
 800090c:	e001      	b.n	8000912 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 800090e:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8000912:	4618      	mov	r0, r3
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <LOG>:
#include "common.h"

extern UART_HandleTypeDef huart1;

void LOG(const char *TAG, char *data)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b09c      	sub	sp, #112	; 0x70
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
	char data_log[100] = {0};
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	f107 0310 	add.w	r3, r7, #16
 800092e:	2260      	movs	r2, #96	; 0x60
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f002 faa4 	bl	8002e80 <memset>
	sprintf(data_log, "%s: %s\r\n", TAG, data);
 8000938:	f107 000c 	add.w	r0, r7, #12
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	490a      	ldr	r1, [pc, #40]	; (800096c <LOG+0x50>)
 8000942:	f002 faa5 	bl	8002e90 <siprintf>
	HAL_UART_Transmit(&huart1, data_log, strlen(data_log), 1000);
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fbfe 	bl	800014c <strlen>
 8000950:	4603      	mov	r3, r0
 8000952:	b29a      	uxth	r2, r3
 8000954:	f107 010c 	add.w	r1, r7, #12
 8000958:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <LOG+0x54>)
 800095e:	f002 f8e5 	bl	8002b2c <HAL_UART_Transmit>
}
 8000962:	bf00      	nop
 8000964:	3770      	adds	r7, #112	; 0x70
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	0800379c 	.word	0x0800379c
 8000970:	2000011c 	.word	0x2000011c

08000974 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097a:	f107 0310 	add.w	r3, r7, #16
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000988:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <MX_GPIO_Init+0xb8>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a27      	ldr	r2, [pc, #156]	; (8000a2c <MX_GPIO_Init+0xb8>)
 800098e:	f043 0320 	orr.w	r3, r3, #32
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b25      	ldr	r3, [pc, #148]	; (8000a2c <MX_GPIO_Init+0xb8>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f003 0320 	and.w	r3, r3, #32
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a0:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <MX_GPIO_Init+0xb8>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4a21      	ldr	r2, [pc, #132]	; (8000a2c <MX_GPIO_Init+0xb8>)
 80009a6:	f043 0308 	orr.w	r3, r3, #8
 80009aa:	6193      	str	r3, [r2, #24]
 80009ac:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <MX_GPIO_Init+0xb8>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f003 0308 	and.w	r3, r3, #8
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b8:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <MX_GPIO_Init+0xb8>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a1b      	ldr	r2, [pc, #108]	; (8000a2c <MX_GPIO_Init+0xb8>)
 80009be:	f043 0304 	orr.w	r3, r3, #4
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <MX_GPIO_Init+0xb8>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f003 0304 	and.w	r3, r3, #4
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NSS_Pin|RESET_Pin, GPIO_PIN_SET);
 80009d0:	2201      	movs	r2, #1
 80009d2:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 80009d6:	4816      	ldr	r0, [pc, #88]	; (8000a30 <MX_GPIO_Init+0xbc>)
 80009d8:	f000 fe84 	bl	80016e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80009dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_GPIO_Init+0xc0>)
 80009e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009e6:	2302      	movs	r3, #2
 80009e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 0310 	add.w	r3, r7, #16
 80009ee:	4619      	mov	r1, r3
 80009f0:	4811      	ldr	r0, [pc, #68]	; (8000a38 <MX_GPIO_Init+0xc4>)
 80009f2:	f000 fcf3 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = NSS_Pin|RESET_Pin;
 80009f6:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80009fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2302      	movs	r3, #2
 8000a06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a08:	f107 0310 	add.w	r3, r7, #16
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4808      	ldr	r0, [pc, #32]	; (8000a30 <MX_GPIO_Init+0xbc>)
 8000a10:	f000 fce4 	bl	80013dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2100      	movs	r1, #0
 8000a18:	2028      	movs	r0, #40	; 0x28
 8000a1a:	f000 fca8 	bl	800136e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a1e:	2028      	movs	r0, #40	; 0x28
 8000a20:	f000 fcc1 	bl	80013a6 <HAL_NVIC_EnableIRQ>

}
 8000a24:	bf00      	nop
 8000a26:	3720      	adds	r7, #32
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40010800 	.word	0x40010800
 8000a34:	10110000 	.word	0x10110000
 8000a38:	40010c00 	.word	0x40010c00

08000a3c <get_crc_value>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
uint8_t get_crc_value(uint8_t *data, int len)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < len; i++)
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	e009      	b.n	8000a64 <get_crc_value+0x28>
    {
        crc ^= data[i];
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	4413      	add	r3, r2
 8000a56:	781a      	ldrb	r2, [r3, #0]
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	4053      	eors	r3, r2
 8000a5c:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < len; i++)
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	3301      	adds	r3, #1
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68ba      	ldr	r2, [r7, #8]
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	dbf1      	blt.n	8000a50 <get_crc_value+0x14>
    }
    return crc;
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3714      	adds	r7, #20
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr

08000a78 <send_respond>:

void send_respond(LoRa* _LoRa, uint8_t *packet, uint8_t length, uint16_t timeout)
{
 8000a78:	b590      	push	{r4, r7, lr}
 8000a7a:	b08d      	sub	sp, #52	; 0x34
 8000a7c:	af06      	add	r7, sp, #24
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	4611      	mov	r1, r2
 8000a84:	461a      	mov	r2, r3
 8000a86:	460b      	mov	r3, r1
 8000a88:	71fb      	strb	r3, [r7, #7]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	80bb      	strh	r3, [r7, #4]
    memset((char *)packet, '\0', strlen((char *)packet));
 8000a8e:	68b8      	ldr	r0, [r7, #8]
 8000a90:	f7ff fb5c 	bl	800014c <strlen>
 8000a94:	4603      	mov	r3, r0
 8000a96:	461a      	mov	r2, r3
 8000a98:	2100      	movs	r1, #0
 8000a9a:	68b8      	ldr	r0, [r7, #8]
 8000a9c:	f002 f9f0 	bl	8002e80 <memset>

        sprintf((char *)packet, "$,%d,%d,%d,%s,%s,%d,%s,*", 20, 5, 100, "30.0", "3.9", 5, "20.0");
 8000aa0:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <send_respond+0x88>)
 8000aa2:	9304      	str	r3, [sp, #16]
 8000aa4:	2305      	movs	r3, #5
 8000aa6:	9303      	str	r3, [sp, #12]
 8000aa8:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <send_respond+0x8c>)
 8000aaa:	9302      	str	r3, [sp, #8]
 8000aac:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <send_respond+0x90>)
 8000aae:	9301      	str	r3, [sp, #4]
 8000ab0:	2364      	movs	r3, #100	; 0x64
 8000ab2:	9300      	str	r3, [sp, #0]
 8000ab4:	2305      	movs	r3, #5
 8000ab6:	2214      	movs	r2, #20
 8000ab8:	4914      	ldr	r1, [pc, #80]	; (8000b0c <send_respond+0x94>)
 8000aba:	68b8      	ldr	r0, [r7, #8]
 8000abc:	f002 f9e8 	bl	8002e90 <siprintf>
        int size = strlen((char *)packet);
 8000ac0:	68b8      	ldr	r0, [r7, #8]
 8000ac2:	f7ff fb43 	bl	800014c <strlen>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	617b      	str	r3, [r7, #20]
        packet[size] = get_crc_value(packet, size);
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	68ba      	ldr	r2, [r7, #8]
 8000ace:	18d4      	adds	r4, r2, r3
 8000ad0:	6979      	ldr	r1, [r7, #20]
 8000ad2:	68b8      	ldr	r0, [r7, #8]
 8000ad4:	f7ff ffb2 	bl	8000a3c <get_crc_value>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	7023      	strb	r3, [r4, #0]
        LOG(TAG, (char *)packet);
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <send_respond+0x98>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	68b9      	ldr	r1, [r7, #8]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff ff1a 	bl	800091c <LOG>
	  LoRa_transmit(_LoRa, packet, 128, 500);
 8000ae8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000aec:	2280      	movs	r2, #128	; 0x80
 8000aee:	68b9      	ldr	r1, [r7, #8]
 8000af0:	68f8      	ldr	r0, [r7, #12]
 8000af2:	f7ff fdaa 	bl	800064a <LoRa_transmit>
}
 8000af6:	bf00      	nop
 8000af8:	371c      	adds	r7, #28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd90      	pop	{r4, r7, pc}
 8000afe:	bf00      	nop
 8000b00:	080037cc 	.word	0x080037cc
 8000b04:	080037d4 	.word	0x080037d4
 8000b08:	080037d8 	.word	0x080037d8
 8000b0c:	080037b0 	.word	0x080037b0
 8000b10:	20000000 	.word	0x20000000

08000b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b14:	b5b0      	push	{r4, r5, r7, lr}
 8000b16:	b0fe      	sub	sp, #504	; 0x1f8
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b1a:	f000 facb 	bl	80010b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b1e:	f000 f8a9 	bl	8000c74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b22:	f7ff ff27 	bl	8000974 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000b26:	f000 f909 	bl	8000d3c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000b2a:	f000 fa27 	bl	8000f7c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  myLoRa = newLoRa();
 8000b2e:	4c4a      	ldr	r4, [pc, #296]	; (8000c58 <main+0x144>)
 8000b30:	463b      	mov	r3, r7
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fb12 	bl	800015c <newLoRa>
 8000b38:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000b3c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8000b40:	461d      	mov	r5, r3
 8000b42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myLoRa.hSPIx                 = &hspi2;
 8000b52:	4b41      	ldr	r3, [pc, #260]	; (8000c58 <main+0x144>)
 8000b54:	4a41      	ldr	r2, [pc, #260]	; (8000c5c <main+0x148>)
 8000b56:	619a      	str	r2, [r3, #24]
  myLoRa.CS_port               = NSS_GPIO_Port;
 8000b58:	4b3f      	ldr	r3, [pc, #252]	; (8000c58 <main+0x144>)
 8000b5a:	4a41      	ldr	r2, [pc, #260]	; (8000c60 <main+0x14c>)
 8000b5c:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin                = NSS_Pin;
 8000b5e:	4b3e      	ldr	r3, [pc, #248]	; (8000c58 <main+0x144>)
 8000b60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b64:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port            = RESET_GPIO_Port;
 8000b66:	4b3c      	ldr	r3, [pc, #240]	; (8000c58 <main+0x144>)
 8000b68:	4a3d      	ldr	r2, [pc, #244]	; (8000c60 <main+0x14c>)
 8000b6a:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin             = RESET_Pin;
 8000b6c:	4b3a      	ldr	r3, [pc, #232]	; (8000c58 <main+0x144>)
 8000b6e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b72:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port				= DIO0_GPIO_Port;
 8000b74:	4b38      	ldr	r3, [pc, #224]	; (8000c58 <main+0x144>)
 8000b76:	4a3b      	ldr	r2, [pc, #236]	; (8000c64 <main+0x150>)
 8000b78:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin				= DIO0_Pin;
 8000b7a:	4b37      	ldr	r3, [pc, #220]	; (8000c58 <main+0x144>)
 8000b7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b80:	829a      	strh	r2, [r3, #20]

myLoRa.frequency             = 434;							  // default = 433 MHz
 8000b82:	4b35      	ldr	r3, [pc, #212]	; (8000c58 <main+0x144>)
 8000b84:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
 8000b88:	621a      	str	r2, [r3, #32]
myLoRa.spredingFactor        = SF_7;							// default = SF_7
 8000b8a:	4b33      	ldr	r3, [pc, #204]	; (8000c58 <main+0x144>)
 8000b8c:	2207      	movs	r2, #7
 8000b8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
myLoRa.bandWidth			       = BW_125KHz;				  // default = BW_125KHz
 8000b92:	4b31      	ldr	r3, [pc, #196]	; (8000c58 <main+0x144>)
 8000b94:	2207      	movs	r2, #7
 8000b96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
myLoRa.crcRate				       = CR_4_5;						// default = CR_4_5
 8000b9a:	4b2f      	ldr	r3, [pc, #188]	; (8000c58 <main+0x144>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
myLoRa.power					       = POWER_20db;				// default = 20db
 8000ba2:	4b2d      	ldr	r3, [pc, #180]	; (8000c58 <main+0x144>)
 8000ba4:	22ff      	movs	r2, #255	; 0xff
 8000ba6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
myLoRa.overCurrentProtection = 120; 							// default = 100 mA
 8000baa:	4b2b      	ldr	r3, [pc, #172]	; (8000c58 <main+0x144>)
 8000bac:	2278      	movs	r2, #120	; 0x78
 8000bae:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
myLoRa.preamble				       = 12;		  					// default = 8;
 8000bb2:	4b29      	ldr	r3, [pc, #164]	; (8000c58 <main+0x144>)
 8000bb4:	220c      	movs	r2, #12
 8000bb6:	851a      	strh	r2, [r3, #40]	; 0x28

LoRa_reset(&myLoRa);
 8000bb8:	4827      	ldr	r0, [pc, #156]	; (8000c58 <main+0x144>)
 8000bba:	f7ff faf8 	bl	80001ae <LoRa_reset>
LoRa_init(&myLoRa);
 8000bbe:	4826      	ldr	r0, [pc, #152]	; (8000c58 <main+0x144>)
 8000bc0:	f7ff fe07 	bl	80007d2 <LoRa_init>
LoRa_startReceiving(&myLoRa);
 8000bc4:	4824      	ldr	r0, [pc, #144]	; (8000c58 <main+0x144>)
 8000bc6:	f7ff fd98 	bl	80006fa <LoRa_startReceiving>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
uint8_t read_data[128] = {0};
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8000bd0:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000bd4:	227c      	movs	r2, #124	; 0x7c
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f002 f951 	bl	8002e80 <memset>
uint8_t send_data[128] = {0};
 8000bde:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000be2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	3304      	adds	r3, #4
 8000bec:	227c      	movs	r2, #124	; 0x7c
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f002 f945 	bl	8002e80 <memset>
uint8_t data_log[200] = {0};
 8000bf6:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000bfa:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	3304      	adds	r3, #4
 8000c04:	22c4      	movs	r2, #196	; 0xc4
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f002 f939 	bl	8002e80 <memset>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  LoRa_receive(&myLoRa, read_data, 128);
 8000c0e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8000c12:	2280      	movs	r2, #128	; 0x80
 8000c14:	4619      	mov	r1, r3
 8000c16:	4810      	ldr	r0, [pc, #64]	; (8000c58 <main+0x144>)
 8000c18:	f7ff fd7b 	bl	8000712 <LoRa_receive>
	  HAL_Delay(1500);
 8000c1c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000c20:	f000 faaa 	bl	8001178 <HAL_Delay>
	  sprintf(data_log, "Recv counter: %d, Packet RECV: %s", recv_cnt, read_data);
 8000c24:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <main+0x154>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8000c2c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000c30:	490e      	ldr	r1, [pc, #56]	; (8000c6c <main+0x158>)
 8000c32:	f002 f92d 	bl	8002e90 <siprintf>
	  LOG(TAG, (char *)data_log);
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <main+0x15c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fe6b 	bl	800091c <LOG>
	  send_respond(&myLoRa, send_data, 128, 500);
 8000c46:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8000c4a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c4e:	2280      	movs	r2, #128	; 0x80
 8000c50:	4801      	ldr	r0, [pc, #4]	; (8000c58 <main+0x144>)
 8000c52:	f7ff ff11 	bl	8000a78 <send_respond>
	  LoRa_receive(&myLoRa, read_data, 128);
 8000c56:	e7da      	b.n	8000c0e <main+0xfa>
 8000c58:	20000090 	.word	0x20000090
 8000c5c:	200000c0 	.word	0x200000c0
 8000c60:	40010800 	.word	0x40010800
 8000c64:	40010c00 	.word	0x40010c00
 8000c68:	200000bc 	.word	0x200000bc
 8000c6c:	080037e0 	.word	0x080037e0
 8000c70:	20000000 	.word	0x20000000

08000c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b090      	sub	sp, #64	; 0x40
 8000c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7a:	f107 0318 	add.w	r3, r7, #24
 8000c7e:	2228      	movs	r2, #40	; 0x28
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f002 f8fc 	bl	8002e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
 8000c94:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c96:	2301      	movs	r3, #1
 8000c98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cb2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb8:	f107 0318 	add.w	r3, r7, #24
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 fd41 	bl	8001744 <HAL_RCC_OscConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000cc8:	f000 f832 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ccc:	230f      	movs	r3, #15
 8000cce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 ffae 	bl	8001c48 <HAL_RCC_ClockConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000cf2:	f000 f81d 	bl	8000d30 <Error_Handler>
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	3740      	adds	r7, #64	; 0x40
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == myLoRa.DIO0_pin) {
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <HAL_GPIO_EXTI_Callback+0x28>)
 8000d0c:	8a9b      	ldrh	r3, [r3, #20]
 8000d0e:	88fa      	ldrh	r2, [r7, #6]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d104      	bne.n	8000d1e <HAL_GPIO_EXTI_Callback+0x1e>
		recv_cnt++;
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000d1c:	6013      	str	r3, [r2, #0]
	}
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	20000090 	.word	0x20000090
 8000d2c:	200000bc 	.word	0x200000bc

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <Error_Handler+0x8>
	...

08000d3c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000d40:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <MX_SPI2_Init+0x64>)
 8000d42:	4a18      	ldr	r2, [pc, #96]	; (8000da4 <MX_SPI2_Init+0x68>)
 8000d44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d46:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <MX_SPI2_Init+0x64>)
 8000d48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d4e:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <MX_SPI2_Init+0x64>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <MX_SPI2_Init+0x64>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_SPI2_Init+0x64>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <MX_SPI2_Init+0x64>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <MX_SPI2_Init+0x64>)
 8000d68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d6c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <MX_SPI2_Init+0x64>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d74:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <MX_SPI2_Init+0x64>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_SPI2_Init+0x64>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <MX_SPI2_Init+0x64>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <MX_SPI2_Init+0x64>)
 8000d88:	220a      	movs	r2, #10
 8000d8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d8c:	4804      	ldr	r0, [pc, #16]	; (8000da0 <MX_SPI2_Init+0x64>)
 8000d8e:	f001 f8e9 	bl	8001f64 <HAL_SPI_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d98:	f7ff ffca 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200000c0 	.word	0x200000c0
 8000da4:	40003800 	.word	0x40003800

08000da8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0310 	add.w	r3, r7, #16
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a1c      	ldr	r2, [pc, #112]	; (8000e34 <HAL_SPI_MspInit+0x8c>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d131      	bne.n	8000e2c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <HAL_SPI_MspInit+0x90>)
 8000dca:	69db      	ldr	r3, [r3, #28]
 8000dcc:	4a1a      	ldr	r2, [pc, #104]	; (8000e38 <HAL_SPI_MspInit+0x90>)
 8000dce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd2:	61d3      	str	r3, [r2, #28]
 8000dd4:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <HAL_SPI_MspInit+0x90>)
 8000dd6:	69db      	ldr	r3, [r3, #28]
 8000dd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de0:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <HAL_SPI_MspInit+0x90>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <HAL_SPI_MspInit+0x90>)
 8000de6:	f043 0308 	orr.w	r3, r3, #8
 8000dea:	6193      	str	r3, [r2, #24]
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <HAL_SPI_MspInit+0x90>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	f003 0308 	and.w	r3, r3, #8
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000df8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000dfc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e02:	2303      	movs	r3, #3
 8000e04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480b      	ldr	r0, [pc, #44]	; (8000e3c <HAL_SPI_MspInit+0x94>)
 8000e0e:	f000 fae5 	bl	80013dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000e12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e20:	f107 0310 	add.w	r3, r7, #16
 8000e24:	4619      	mov	r1, r3
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <HAL_SPI_MspInit+0x94>)
 8000e28:	f000 fad8 	bl	80013dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	3720      	adds	r7, #32
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40003800 	.word	0x40003800
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40010c00 	.word	0x40010c00

08000e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <HAL_MspInit+0x5c>)
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <HAL_MspInit+0x5c>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6193      	str	r3, [r2, #24]
 8000e52:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_MspInit+0x5c>)
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <HAL_MspInit+0x5c>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <HAL_MspInit+0x5c>)
 8000e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e68:	61d3      	str	r3, [r2, #28]
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <HAL_MspInit+0x5c>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <HAL_MspInit+0x60>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <HAL_MspInit+0x60>)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e92:	bf00      	nop
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40010000 	.word	0x40010000

08000ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <NMI_Handler+0x4>

08000eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <HardFault_Handler+0x4>

08000eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <MemManage_Handler+0x4>

08000eb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <BusFault_Handler+0x4>

08000ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <UsageFault_Handler+0x4>

08000ec2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr

08000ece <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr

08000eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr

08000ee6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eea:	f000 f929 	bl	8001140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8000ef6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000efa:	f000 fc0b 	bl	8001714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f0c:	4a14      	ldr	r2, [pc, #80]	; (8000f60 <_sbrk+0x5c>)
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <_sbrk+0x60>)
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <_sbrk+0x64>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <_sbrk+0x64>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <_sbrk+0x68>)
 8000f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d207      	bcs.n	8000f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f34:	f001 ff7a 	bl	8002e2c <__errno>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f42:	e009      	b.n	8000f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4a:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <_sbrk+0x64>)
 8000f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f56:	68fb      	ldr	r3, [r7, #12]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20005000 	.word	0x20005000
 8000f64:	00000400 	.word	0x00000400
 8000f68:	20000118 	.word	0x20000118
 8000f6c:	20000178 	.word	0x20000178

08000f70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr

08000f7c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_USART1_UART_Init+0x4c>)
 8000f82:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <MX_USART1_UART_Init+0x50>)
 8000f84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <MX_USART1_UART_Init+0x4c>)
 8000f88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_USART1_UART_Init+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_USART1_UART_Init+0x4c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <MX_USART1_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_USART1_UART_Init+0x4c>)
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <MX_USART1_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_USART1_UART_Init+0x4c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_USART1_UART_Init+0x4c>)
 8000fb4:	f001 fd6a 	bl	8002a8c <HAL_UART_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fbe:	f7ff feb7 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	2000011c 	.word	0x2000011c
 8000fcc:	40013800 	.word	0x40013800

08000fd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a1c      	ldr	r2, [pc, #112]	; (800105c <HAL_UART_MspInit+0x8c>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d131      	bne.n	8001054 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <HAL_UART_MspInit+0x90>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4a1a      	ldr	r2, [pc, #104]	; (8001060 <HAL_UART_MspInit+0x90>)
 8000ff6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffa:	6193      	str	r3, [r2, #24]
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <HAL_UART_MspInit+0x90>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001008:	4b15      	ldr	r3, [pc, #84]	; (8001060 <HAL_UART_MspInit+0x90>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	4a14      	ldr	r2, [pc, #80]	; (8001060 <HAL_UART_MspInit+0x90>)
 800100e:	f043 0304 	orr.w	r3, r3, #4
 8001012:	6193      	str	r3, [r2, #24]
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_UART_MspInit+0x90>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001024:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800102a:	2303      	movs	r3, #3
 800102c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 0310 	add.w	r3, r7, #16
 8001032:	4619      	mov	r1, r3
 8001034:	480b      	ldr	r0, [pc, #44]	; (8001064 <HAL_UART_MspInit+0x94>)
 8001036:	f000 f9d1 	bl	80013dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800103a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800103e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001048:	f107 0310 	add.w	r3, r7, #16
 800104c:	4619      	mov	r1, r3
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <HAL_UART_MspInit+0x94>)
 8001050:	f000 f9c4 	bl	80013dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001054:	bf00      	nop
 8001056:	3720      	adds	r7, #32
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40013800 	.word	0x40013800
 8001060:	40021000 	.word	0x40021000
 8001064:	40010800 	.word	0x40010800

08001068 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001068:	f7ff ff82 	bl	8000f70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800106c:	480b      	ldr	r0, [pc, #44]	; (800109c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800106e:	490c      	ldr	r1, [pc, #48]	; (80010a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001070:	4a0c      	ldr	r2, [pc, #48]	; (80010a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001074:	e002      	b.n	800107c <LoopCopyDataInit>

08001076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107a:	3304      	adds	r3, #4

0800107c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800107c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001080:	d3f9      	bcc.n	8001076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001082:	4a09      	ldr	r2, [pc, #36]	; (80010a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001084:	4c09      	ldr	r4, [pc, #36]	; (80010ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001088:	e001      	b.n	800108e <LoopFillZerobss>

0800108a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800108c:	3204      	adds	r2, #4

0800108e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001090:	d3fb      	bcc.n	800108a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001092:	f001 fed1 	bl	8002e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001096:	f7ff fd3d 	bl	8000b14 <main>
  bx lr
 800109a:	4770      	bx	lr
  ldr r0, =_sdata
 800109c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80010a4:	0800386c 	.word	0x0800386c
  ldr r2, =_sbss
 80010a8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80010ac:	20000178 	.word	0x20000178

080010b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010b0:	e7fe      	b.n	80010b0 <ADC1_2_IRQHandler>
	...

080010b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <HAL_Init+0x28>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a07      	ldr	r2, [pc, #28]	; (80010dc <HAL_Init+0x28>)
 80010be:	f043 0310 	orr.w	r3, r3, #16
 80010c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f000 f947 	bl	8001358 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ca:	200f      	movs	r0, #15
 80010cc:	f000 f808 	bl	80010e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d0:	f7ff feb6 	bl	8000e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40022000 	.word	0x40022000

080010e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_InitTick+0x54>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_InitTick+0x58>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f95f 	bl	80013c2 <HAL_SYSTICK_Config>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e00e      	b.n	800112c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b0f      	cmp	r3, #15
 8001112:	d80a      	bhi.n	800112a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001114:	2200      	movs	r2, #0
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f000 f927 	bl	800136e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001120:	4a06      	ldr	r2, [pc, #24]	; (800113c <HAL_InitTick+0x5c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
 8001128:	e000      	b.n	800112c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000004 	.word	0x20000004
 8001138:	2000000c 	.word	0x2000000c
 800113c:	20000008 	.word	0x20000008

08001140 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <HAL_IncTick+0x1c>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b05      	ldr	r3, [pc, #20]	; (8001160 <HAL_IncTick+0x20>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
 8001150:	4a03      	ldr	r2, [pc, #12]	; (8001160 <HAL_IncTick+0x20>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	2000000c 	.word	0x2000000c
 8001160:	20000164 	.word	0x20000164

08001164 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return uwTick;
 8001168:	4b02      	ldr	r3, [pc, #8]	; (8001174 <HAL_GetTick+0x10>)
 800116a:	681b      	ldr	r3, [r3, #0]
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	20000164 	.word	0x20000164

08001178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001180:	f7ff fff0 	bl	8001164 <HAL_GetTick>
 8001184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001190:	d005      	beq.n	800119e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <HAL_Delay+0x44>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4413      	add	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800119e:	bf00      	nop
 80011a0:	f7ff ffe0 	bl	8001164 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d8f7      	bhi.n	80011a0 <HAL_Delay+0x28>
  {
  }
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2000000c 	.word	0x2000000c

080011c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011dc:	4013      	ands	r3, r2
 80011de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f2:	4a04      	ldr	r2, [pc, #16]	; (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	60d3      	str	r3, [r2, #12]
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <__NVIC_GetPriorityGrouping+0x18>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	0a1b      	lsrs	r3, r3, #8
 8001212:	f003 0307 	and.w	r3, r3, #7
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	2b00      	cmp	r3, #0
 8001234:	db0b      	blt.n	800124e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	f003 021f 	and.w	r2, r3, #31
 800123c:	4906      	ldr	r1, [pc, #24]	; (8001258 <__NVIC_EnableIRQ+0x34>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	095b      	lsrs	r3, r3, #5
 8001244:	2001      	movs	r0, #1
 8001246:	fa00 f202 	lsl.w	r2, r0, r2
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	e000e100 	.word	0xe000e100

0800125c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	6039      	str	r1, [r7, #0]
 8001266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126c:	2b00      	cmp	r3, #0
 800126e:	db0a      	blt.n	8001286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	490c      	ldr	r1, [pc, #48]	; (80012a8 <__NVIC_SetPriority+0x4c>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	0112      	lsls	r2, r2, #4
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	440b      	add	r3, r1
 8001280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001284:	e00a      	b.n	800129c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4908      	ldr	r1, [pc, #32]	; (80012ac <__NVIC_SetPriority+0x50>)
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	f003 030f 	and.w	r3, r3, #15
 8001292:	3b04      	subs	r3, #4
 8001294:	0112      	lsls	r2, r2, #4
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	440b      	add	r3, r1
 800129a:	761a      	strb	r2, [r3, #24]
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000e100 	.word	0xe000e100
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b089      	sub	sp, #36	; 0x24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f1c3 0307 	rsb	r3, r3, #7
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	bf28      	it	cs
 80012ce:	2304      	movcs	r3, #4
 80012d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3304      	adds	r3, #4
 80012d6:	2b06      	cmp	r3, #6
 80012d8:	d902      	bls.n	80012e0 <NVIC_EncodePriority+0x30>
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3b03      	subs	r3, #3
 80012de:	e000      	b.n	80012e2 <NVIC_EncodePriority+0x32>
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	f04f 32ff 	mov.w	r2, #4294967295
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43da      	mvns	r2, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	401a      	ands	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f8:	f04f 31ff 	mov.w	r1, #4294967295
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	43d9      	mvns	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	4313      	orrs	r3, r2
         );
}
 800130a:	4618      	mov	r0, r3
 800130c:	3724      	adds	r7, #36	; 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001324:	d301      	bcc.n	800132a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001326:	2301      	movs	r3, #1
 8001328:	e00f      	b.n	800134a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132a:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <SysTick_Config+0x40>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001332:	210f      	movs	r1, #15
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	f7ff ff90 	bl	800125c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <SysTick_Config+0x40>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <SysTick_Config+0x40>)
 8001344:	2207      	movs	r2, #7
 8001346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	e000e010 	.word	0xe000e010

08001358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff2d 	bl	80011c0 <__NVIC_SetPriorityGrouping>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001380:	f7ff ff42 	bl	8001208 <__NVIC_GetPriorityGrouping>
 8001384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	68b9      	ldr	r1, [r7, #8]
 800138a:	6978      	ldr	r0, [r7, #20]
 800138c:	f7ff ff90 	bl	80012b0 <NVIC_EncodePriority>
 8001390:	4602      	mov	r2, r0
 8001392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff5f 	bl	800125c <__NVIC_SetPriority>
}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff35 	bl	8001224 <__NVIC_EnableIRQ>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ffa2 	bl	8001314 <SysTick_Config>
 80013d0:	4603      	mov	r3, r0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013dc:	b480      	push	{r7}
 80013de:	b08b      	sub	sp, #44	; 0x2c
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013e6:	2300      	movs	r3, #0
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013ea:	2300      	movs	r3, #0
 80013ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ee:	e169      	b.n	80016c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013f0:	2201      	movs	r2, #1
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	69fa      	ldr	r2, [r7, #28]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	429a      	cmp	r2, r3
 800140a:	f040 8158 	bne.w	80016be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	4a9a      	ldr	r2, [pc, #616]	; (800167c <HAL_GPIO_Init+0x2a0>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d05e      	beq.n	80014d6 <HAL_GPIO_Init+0xfa>
 8001418:	4a98      	ldr	r2, [pc, #608]	; (800167c <HAL_GPIO_Init+0x2a0>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d875      	bhi.n	800150a <HAL_GPIO_Init+0x12e>
 800141e:	4a98      	ldr	r2, [pc, #608]	; (8001680 <HAL_GPIO_Init+0x2a4>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d058      	beq.n	80014d6 <HAL_GPIO_Init+0xfa>
 8001424:	4a96      	ldr	r2, [pc, #600]	; (8001680 <HAL_GPIO_Init+0x2a4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d86f      	bhi.n	800150a <HAL_GPIO_Init+0x12e>
 800142a:	4a96      	ldr	r2, [pc, #600]	; (8001684 <HAL_GPIO_Init+0x2a8>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d052      	beq.n	80014d6 <HAL_GPIO_Init+0xfa>
 8001430:	4a94      	ldr	r2, [pc, #592]	; (8001684 <HAL_GPIO_Init+0x2a8>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d869      	bhi.n	800150a <HAL_GPIO_Init+0x12e>
 8001436:	4a94      	ldr	r2, [pc, #592]	; (8001688 <HAL_GPIO_Init+0x2ac>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d04c      	beq.n	80014d6 <HAL_GPIO_Init+0xfa>
 800143c:	4a92      	ldr	r2, [pc, #584]	; (8001688 <HAL_GPIO_Init+0x2ac>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d863      	bhi.n	800150a <HAL_GPIO_Init+0x12e>
 8001442:	4a92      	ldr	r2, [pc, #584]	; (800168c <HAL_GPIO_Init+0x2b0>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d046      	beq.n	80014d6 <HAL_GPIO_Init+0xfa>
 8001448:	4a90      	ldr	r2, [pc, #576]	; (800168c <HAL_GPIO_Init+0x2b0>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d85d      	bhi.n	800150a <HAL_GPIO_Init+0x12e>
 800144e:	2b12      	cmp	r3, #18
 8001450:	d82a      	bhi.n	80014a8 <HAL_GPIO_Init+0xcc>
 8001452:	2b12      	cmp	r3, #18
 8001454:	d859      	bhi.n	800150a <HAL_GPIO_Init+0x12e>
 8001456:	a201      	add	r2, pc, #4	; (adr r2, 800145c <HAL_GPIO_Init+0x80>)
 8001458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145c:	080014d7 	.word	0x080014d7
 8001460:	080014b1 	.word	0x080014b1
 8001464:	080014c3 	.word	0x080014c3
 8001468:	08001505 	.word	0x08001505
 800146c:	0800150b 	.word	0x0800150b
 8001470:	0800150b 	.word	0x0800150b
 8001474:	0800150b 	.word	0x0800150b
 8001478:	0800150b 	.word	0x0800150b
 800147c:	0800150b 	.word	0x0800150b
 8001480:	0800150b 	.word	0x0800150b
 8001484:	0800150b 	.word	0x0800150b
 8001488:	0800150b 	.word	0x0800150b
 800148c:	0800150b 	.word	0x0800150b
 8001490:	0800150b 	.word	0x0800150b
 8001494:	0800150b 	.word	0x0800150b
 8001498:	0800150b 	.word	0x0800150b
 800149c:	0800150b 	.word	0x0800150b
 80014a0:	080014b9 	.word	0x080014b9
 80014a4:	080014cd 	.word	0x080014cd
 80014a8:	4a79      	ldr	r2, [pc, #484]	; (8001690 <HAL_GPIO_Init+0x2b4>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d013      	beq.n	80014d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014ae:	e02c      	b.n	800150a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	623b      	str	r3, [r7, #32]
          break;
 80014b6:	e029      	b.n	800150c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	3304      	adds	r3, #4
 80014be:	623b      	str	r3, [r7, #32]
          break;
 80014c0:	e024      	b.n	800150c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	3308      	adds	r3, #8
 80014c8:	623b      	str	r3, [r7, #32]
          break;
 80014ca:	e01f      	b.n	800150c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	330c      	adds	r3, #12
 80014d2:	623b      	str	r3, [r7, #32]
          break;
 80014d4:	e01a      	b.n	800150c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d102      	bne.n	80014e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014de:	2304      	movs	r3, #4
 80014e0:	623b      	str	r3, [r7, #32]
          break;
 80014e2:	e013      	b.n	800150c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d105      	bne.n	80014f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014ec:	2308      	movs	r3, #8
 80014ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	611a      	str	r2, [r3, #16]
          break;
 80014f6:	e009      	b.n	800150c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014f8:	2308      	movs	r3, #8
 80014fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69fa      	ldr	r2, [r7, #28]
 8001500:	615a      	str	r2, [r3, #20]
          break;
 8001502:	e003      	b.n	800150c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
          break;
 8001508:	e000      	b.n	800150c <HAL_GPIO_Init+0x130>
          break;
 800150a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	2bff      	cmp	r3, #255	; 0xff
 8001510:	d801      	bhi.n	8001516 <HAL_GPIO_Init+0x13a>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	e001      	b.n	800151a <HAL_GPIO_Init+0x13e>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3304      	adds	r3, #4
 800151a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	2bff      	cmp	r3, #255	; 0xff
 8001520:	d802      	bhi.n	8001528 <HAL_GPIO_Init+0x14c>
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	e002      	b.n	800152e <HAL_GPIO_Init+0x152>
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	3b08      	subs	r3, #8
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	210f      	movs	r1, #15
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	fa01 f303 	lsl.w	r3, r1, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	401a      	ands	r2, r3
 8001540:	6a39      	ldr	r1, [r7, #32]
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	fa01 f303 	lsl.w	r3, r1, r3
 8001548:	431a      	orrs	r2, r3
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 80b1 	beq.w	80016be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800155c:	4b4d      	ldr	r3, [pc, #308]	; (8001694 <HAL_GPIO_Init+0x2b8>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	4a4c      	ldr	r2, [pc, #304]	; (8001694 <HAL_GPIO_Init+0x2b8>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6193      	str	r3, [r2, #24]
 8001568:	4b4a      	ldr	r3, [pc, #296]	; (8001694 <HAL_GPIO_Init+0x2b8>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001574:	4a48      	ldr	r2, [pc, #288]	; (8001698 <HAL_GPIO_Init+0x2bc>)
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	089b      	lsrs	r3, r3, #2
 800157a:	3302      	adds	r3, #2
 800157c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001580:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	f003 0303 	and.w	r3, r3, #3
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	220f      	movs	r2, #15
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	4013      	ands	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a40      	ldr	r2, [pc, #256]	; (800169c <HAL_GPIO_Init+0x2c0>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d013      	beq.n	80015c8 <HAL_GPIO_Init+0x1ec>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a3f      	ldr	r2, [pc, #252]	; (80016a0 <HAL_GPIO_Init+0x2c4>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d00d      	beq.n	80015c4 <HAL_GPIO_Init+0x1e8>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a3e      	ldr	r2, [pc, #248]	; (80016a4 <HAL_GPIO_Init+0x2c8>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d007      	beq.n	80015c0 <HAL_GPIO_Init+0x1e4>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a3d      	ldr	r2, [pc, #244]	; (80016a8 <HAL_GPIO_Init+0x2cc>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d101      	bne.n	80015bc <HAL_GPIO_Init+0x1e0>
 80015b8:	2303      	movs	r3, #3
 80015ba:	e006      	b.n	80015ca <HAL_GPIO_Init+0x1ee>
 80015bc:	2304      	movs	r3, #4
 80015be:	e004      	b.n	80015ca <HAL_GPIO_Init+0x1ee>
 80015c0:	2302      	movs	r3, #2
 80015c2:	e002      	b.n	80015ca <HAL_GPIO_Init+0x1ee>
 80015c4:	2301      	movs	r3, #1
 80015c6:	e000      	b.n	80015ca <HAL_GPIO_Init+0x1ee>
 80015c8:	2300      	movs	r3, #0
 80015ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015cc:	f002 0203 	and.w	r2, r2, #3
 80015d0:	0092      	lsls	r2, r2, #2
 80015d2:	4093      	lsls	r3, r2
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015da:	492f      	ldr	r1, [pc, #188]	; (8001698 <HAL_GPIO_Init+0x2bc>)
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	089b      	lsrs	r3, r3, #2
 80015e0:	3302      	adds	r3, #2
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d006      	beq.n	8001602 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015f4:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	492c      	ldr	r1, [pc, #176]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	608b      	str	r3, [r1, #8]
 8001600:	e006      	b.n	8001610 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001602:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	43db      	mvns	r3, r3
 800160a:	4928      	ldr	r1, [pc, #160]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 800160c:	4013      	ands	r3, r2
 800160e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d006      	beq.n	800162a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800161c:	4b23      	ldr	r3, [pc, #140]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 800161e:	68da      	ldr	r2, [r3, #12]
 8001620:	4922      	ldr	r1, [pc, #136]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	60cb      	str	r3, [r1, #12]
 8001628:	e006      	b.n	8001638 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800162a:	4b20      	ldr	r3, [pc, #128]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	43db      	mvns	r3, r3
 8001632:	491e      	ldr	r1, [pc, #120]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 8001634:	4013      	ands	r3, r2
 8001636:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d006      	beq.n	8001652 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001644:	4b19      	ldr	r3, [pc, #100]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	4918      	ldr	r1, [pc, #96]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	604b      	str	r3, [r1, #4]
 8001650:	e006      	b.n	8001660 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	43db      	mvns	r3, r3
 800165a:	4914      	ldr	r1, [pc, #80]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 800165c:	4013      	ands	r3, r2
 800165e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d021      	beq.n	80016b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800166c:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	490e      	ldr	r1, [pc, #56]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	4313      	orrs	r3, r2
 8001676:	600b      	str	r3, [r1, #0]
 8001678:	e021      	b.n	80016be <HAL_GPIO_Init+0x2e2>
 800167a:	bf00      	nop
 800167c:	10320000 	.word	0x10320000
 8001680:	10310000 	.word	0x10310000
 8001684:	10220000 	.word	0x10220000
 8001688:	10210000 	.word	0x10210000
 800168c:	10120000 	.word	0x10120000
 8001690:	10110000 	.word	0x10110000
 8001694:	40021000 	.word	0x40021000
 8001698:	40010000 	.word	0x40010000
 800169c:	40010800 	.word	0x40010800
 80016a0:	40010c00 	.word	0x40010c00
 80016a4:	40011000 	.word	0x40011000
 80016a8:	40011400 	.word	0x40011400
 80016ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_GPIO_Init+0x304>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	43db      	mvns	r3, r3
 80016b8:	4909      	ldr	r1, [pc, #36]	; (80016e0 <HAL_GPIO_Init+0x304>)
 80016ba:	4013      	ands	r3, r2
 80016bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	3301      	adds	r3, #1
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	fa22 f303 	lsr.w	r3, r2, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f47f ae8e 	bne.w	80013f0 <HAL_GPIO_Init+0x14>
  }
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	372c      	adds	r7, #44	; 0x2c
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	40010400 	.word	0x40010400

080016e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	807b      	strh	r3, [r7, #2]
 80016f0:	4613      	mov	r3, r2
 80016f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016f4:	787b      	ldrb	r3, [r7, #1]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016fa:	887a      	ldrh	r2, [r7, #2]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001700:	e003      	b.n	800170a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001702:	887b      	ldrh	r3, [r7, #2]
 8001704:	041a      	lsls	r2, r3, #16
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	611a      	str	r2, [r3, #16]
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001720:	695a      	ldr	r2, [r3, #20]
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	4013      	ands	r3, r2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d006      	beq.n	8001738 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800172a:	4a05      	ldr	r2, [pc, #20]	; (8001740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800172c:	88fb      	ldrh	r3, [r7, #6]
 800172e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fae4 	bl	8000d00 <HAL_GPIO_EXTI_Callback>
  }
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40010400 	.word	0x40010400

08001744 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e272      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 8087 	beq.w	8001872 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001764:	4b92      	ldr	r3, [pc, #584]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 030c 	and.w	r3, r3, #12
 800176c:	2b04      	cmp	r3, #4
 800176e:	d00c      	beq.n	800178a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001770:	4b8f      	ldr	r3, [pc, #572]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 030c 	and.w	r3, r3, #12
 8001778:	2b08      	cmp	r3, #8
 800177a:	d112      	bne.n	80017a2 <HAL_RCC_OscConfig+0x5e>
 800177c:	4b8c      	ldr	r3, [pc, #560]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001788:	d10b      	bne.n	80017a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178a:	4b89      	ldr	r3, [pc, #548]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d06c      	beq.n	8001870 <HAL_RCC_OscConfig+0x12c>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d168      	bne.n	8001870 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e24c      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017aa:	d106      	bne.n	80017ba <HAL_RCC_OscConfig+0x76>
 80017ac:	4b80      	ldr	r3, [pc, #512]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a7f      	ldr	r2, [pc, #508]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	e02e      	b.n	8001818 <HAL_RCC_OscConfig+0xd4>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10c      	bne.n	80017dc <HAL_RCC_OscConfig+0x98>
 80017c2:	4b7b      	ldr	r3, [pc, #492]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a7a      	ldr	r2, [pc, #488]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	4b78      	ldr	r3, [pc, #480]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a77      	ldr	r2, [pc, #476]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	e01d      	b.n	8001818 <HAL_RCC_OscConfig+0xd4>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017e4:	d10c      	bne.n	8001800 <HAL_RCC_OscConfig+0xbc>
 80017e6:	4b72      	ldr	r3, [pc, #456]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a71      	ldr	r2, [pc, #452]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	4b6f      	ldr	r3, [pc, #444]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a6e      	ldr	r2, [pc, #440]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	e00b      	b.n	8001818 <HAL_RCC_OscConfig+0xd4>
 8001800:	4b6b      	ldr	r3, [pc, #428]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a6a      	ldr	r2, [pc, #424]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	4b68      	ldr	r3, [pc, #416]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a67      	ldr	r2, [pc, #412]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001816:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d013      	beq.n	8001848 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff fca0 	bl	8001164 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001828:	f7ff fc9c 	bl	8001164 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b64      	cmp	r3, #100	; 0x64
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e200      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183a:	4b5d      	ldr	r3, [pc, #372]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f0      	beq.n	8001828 <HAL_RCC_OscConfig+0xe4>
 8001846:	e014      	b.n	8001872 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff fc8c 	bl	8001164 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001850:	f7ff fc88 	bl	8001164 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	; 0x64
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e1ec      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001862:	4b53      	ldr	r3, [pc, #332]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x10c>
 800186e:	e000      	b.n	8001872 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d063      	beq.n	8001946 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800187e:	4b4c      	ldr	r3, [pc, #304]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00b      	beq.n	80018a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800188a:	4b49      	ldr	r3, [pc, #292]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 030c 	and.w	r3, r3, #12
 8001892:	2b08      	cmp	r3, #8
 8001894:	d11c      	bne.n	80018d0 <HAL_RCC_OscConfig+0x18c>
 8001896:	4b46      	ldr	r3, [pc, #280]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d116      	bne.n	80018d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a2:	4b43      	ldr	r3, [pc, #268]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d005      	beq.n	80018ba <HAL_RCC_OscConfig+0x176>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d001      	beq.n	80018ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e1c0      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ba:	4b3d      	ldr	r3, [pc, #244]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4939      	ldr	r1, [pc, #228]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ce:	e03a      	b.n	8001946 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d020      	beq.n	800191a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018d8:	4b36      	ldr	r3, [pc, #216]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80018da:	2201      	movs	r2, #1
 80018dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018de:	f7ff fc41 	bl	8001164 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e6:	f7ff fc3d 	bl	8001164 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e1a1      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f8:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001904:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	4927      	ldr	r1, [pc, #156]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001914:	4313      	orrs	r3, r2
 8001916:	600b      	str	r3, [r1, #0]
 8001918:	e015      	b.n	8001946 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800191a:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff fc20 	bl	8001164 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001928:	f7ff fc1c 	bl	8001164 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e180      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800193a:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b00      	cmp	r3, #0
 8001950:	d03a      	beq.n	80019c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d019      	beq.n	800198e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800195a:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <HAL_RCC_OscConfig+0x274>)
 800195c:	2201      	movs	r2, #1
 800195e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001960:	f7ff fc00 	bl	8001164 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001968:	f7ff fbfc 	bl	8001164 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e160      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001986:	2001      	movs	r0, #1
 8001988:	f000 face 	bl	8001f28 <RCC_Delay>
 800198c:	e01c      	b.n	80019c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001994:	f7ff fbe6 	bl	8001164 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800199a:	e00f      	b.n	80019bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800199c:	f7ff fbe2 	bl	8001164 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d908      	bls.n	80019bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e146      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
 80019ae:	bf00      	nop
 80019b0:	40021000 	.word	0x40021000
 80019b4:	42420000 	.word	0x42420000
 80019b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019bc:	4b92      	ldr	r3, [pc, #584]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1e9      	bne.n	800199c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f000 80a6 	beq.w	8001b22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019d6:	2300      	movs	r3, #0
 80019d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019da:	4b8b      	ldr	r3, [pc, #556]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10d      	bne.n	8001a02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e6:	4b88      	ldr	r3, [pc, #544]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	4a87      	ldr	r2, [pc, #540]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f0:	61d3      	str	r3, [r2, #28]
 80019f2:	4b85      	ldr	r3, [pc, #532]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019fe:	2301      	movs	r3, #1
 8001a00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a02:	4b82      	ldr	r3, [pc, #520]	; (8001c0c <HAL_RCC_OscConfig+0x4c8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d118      	bne.n	8001a40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a0e:	4b7f      	ldr	r3, [pc, #508]	; (8001c0c <HAL_RCC_OscConfig+0x4c8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a7e      	ldr	r2, [pc, #504]	; (8001c0c <HAL_RCC_OscConfig+0x4c8>)
 8001a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a1a:	f7ff fba3 	bl	8001164 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a22:	f7ff fb9f 	bl	8001164 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b64      	cmp	r3, #100	; 0x64
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e103      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a34:	4b75      	ldr	r3, [pc, #468]	; (8001c0c <HAL_RCC_OscConfig+0x4c8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0f0      	beq.n	8001a22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d106      	bne.n	8001a56 <HAL_RCC_OscConfig+0x312>
 8001a48:	4b6f      	ldr	r3, [pc, #444]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	4a6e      	ldr	r2, [pc, #440]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6213      	str	r3, [r2, #32]
 8001a54:	e02d      	b.n	8001ab2 <HAL_RCC_OscConfig+0x36e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x334>
 8001a5e:	4b6a      	ldr	r3, [pc, #424]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	4a69      	ldr	r2, [pc, #420]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	f023 0301 	bic.w	r3, r3, #1
 8001a68:	6213      	str	r3, [r2, #32]
 8001a6a:	4b67      	ldr	r3, [pc, #412]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	4a66      	ldr	r2, [pc, #408]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a70:	f023 0304 	bic.w	r3, r3, #4
 8001a74:	6213      	str	r3, [r2, #32]
 8001a76:	e01c      	b.n	8001ab2 <HAL_RCC_OscConfig+0x36e>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	2b05      	cmp	r3, #5
 8001a7e:	d10c      	bne.n	8001a9a <HAL_RCC_OscConfig+0x356>
 8001a80:	4b61      	ldr	r3, [pc, #388]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	4a60      	ldr	r2, [pc, #384]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a86:	f043 0304 	orr.w	r3, r3, #4
 8001a8a:	6213      	str	r3, [r2, #32]
 8001a8c:	4b5e      	ldr	r3, [pc, #376]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	4a5d      	ldr	r2, [pc, #372]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6213      	str	r3, [r2, #32]
 8001a98:	e00b      	b.n	8001ab2 <HAL_RCC_OscConfig+0x36e>
 8001a9a:	4b5b      	ldr	r3, [pc, #364]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	4a5a      	ldr	r2, [pc, #360]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	f023 0301 	bic.w	r3, r3, #1
 8001aa4:	6213      	str	r3, [r2, #32]
 8001aa6:	4b58      	ldr	r3, [pc, #352]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	4a57      	ldr	r2, [pc, #348]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	f023 0304 	bic.w	r3, r3, #4
 8001ab0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d015      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aba:	f7ff fb53 	bl	8001164 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac0:	e00a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac2:	f7ff fb4f 	bl	8001164 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e0b1      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad8:	4b4b      	ldr	r3, [pc, #300]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0ee      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x37e>
 8001ae4:	e014      	b.n	8001b10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae6:	f7ff fb3d 	bl	8001164 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aec:	e00a      	b.n	8001b04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aee:	f7ff fb39 	bl	8001164 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e09b      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b04:	4b40      	ldr	r3, [pc, #256]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1ee      	bne.n	8001aee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b10:	7dfb      	ldrb	r3, [r7, #23]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d105      	bne.n	8001b22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b16:	4b3c      	ldr	r3, [pc, #240]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	4a3b      	ldr	r2, [pc, #236]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 8087 	beq.w	8001c3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b2c:	4b36      	ldr	r3, [pc, #216]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 030c 	and.w	r3, r3, #12
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d061      	beq.n	8001bfc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d146      	bne.n	8001bce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b40:	4b33      	ldr	r3, [pc, #204]	; (8001c10 <HAL_RCC_OscConfig+0x4cc>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7ff fb0d 	bl	8001164 <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b4e:	f7ff fb09 	bl	8001164 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e06d      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b60:	4b29      	ldr	r3, [pc, #164]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1f0      	bne.n	8001b4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b74:	d108      	bne.n	8001b88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b76:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	4921      	ldr	r1, [pc, #132]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b88:	4b1f      	ldr	r3, [pc, #124]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a19      	ldr	r1, [r3, #32]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	491b      	ldr	r1, [pc, #108]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <HAL_RCC_OscConfig+0x4cc>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba6:	f7ff fadd 	bl	8001164 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bae:	f7ff fad9 	bl	8001164 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e03d      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x46a>
 8001bcc:	e035      	b.n	8001c3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <HAL_RCC_OscConfig+0x4cc>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd4:	f7ff fac6 	bl	8001164 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bdc:	f7ff fac2 	bl	8001164 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e026      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f0      	bne.n	8001bdc <HAL_RCC_OscConfig+0x498>
 8001bfa:	e01e      	b.n	8001c3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d107      	bne.n	8001c14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e019      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40007000 	.word	0x40007000
 8001c10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_RCC_OscConfig+0x500>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d106      	bne.n	8001c36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d001      	beq.n	8001c3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000

08001c48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0d0      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c5c:	4b6a      	ldr	r3, [pc, #424]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d910      	bls.n	8001c8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	4b67      	ldr	r3, [pc, #412]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 0207 	bic.w	r2, r3, #7
 8001c72:	4965      	ldr	r1, [pc, #404]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7a:	4b63      	ldr	r3, [pc, #396]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0b8      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d020      	beq.n	8001cda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ca4:	4b59      	ldr	r3, [pc, #356]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	4a58      	ldr	r2, [pc, #352]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d005      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cbc:	4b53      	ldr	r3, [pc, #332]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	4a52      	ldr	r2, [pc, #328]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc8:	4b50      	ldr	r3, [pc, #320]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	494d      	ldr	r1, [pc, #308]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d040      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d107      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cee:	4b47      	ldr	r3, [pc, #284]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d115      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e07f      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d107      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d06:	4b41      	ldr	r3, [pc, #260]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d109      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e073      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d16:	4b3d      	ldr	r3, [pc, #244]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e06b      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d26:	4b39      	ldr	r3, [pc, #228]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f023 0203 	bic.w	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4936      	ldr	r1, [pc, #216]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d38:	f7ff fa14 	bl	8001164 <HAL_GetTick>
 8001d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d40:	f7ff fa10 	bl	8001164 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e053      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d56:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 020c 	and.w	r2, r3, #12
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d1eb      	bne.n	8001d40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d68:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d210      	bcs.n	8001d98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 0207 	bic.w	r2, r3, #7
 8001d7e:	4922      	ldr	r1, [pc, #136]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d86:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d001      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e032      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d008      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001da4:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	4916      	ldr	r1, [pc, #88]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d009      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dc2:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	490e      	ldr	r1, [pc, #56]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dd6:	f000 f821 	bl	8001e1c <HAL_RCC_GetSysClockFreq>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	091b      	lsrs	r3, r3, #4
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	490a      	ldr	r1, [pc, #40]	; (8001e10 <HAL_RCC_ClockConfig+0x1c8>)
 8001de8:	5ccb      	ldrb	r3, [r1, r3]
 8001dea:	fa22 f303 	lsr.w	r3, r2, r3
 8001dee:	4a09      	ldr	r2, [pc, #36]	; (8001e14 <HAL_RCC_ClockConfig+0x1cc>)
 8001df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_RCC_ClockConfig+0x1d0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff f972 	bl	80010e0 <HAL_InitTick>

  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40022000 	.word	0x40022000
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	08003804 	.word	0x08003804
 8001e14:	20000004 	.word	0x20000004
 8001e18:	20000008 	.word	0x20000008

08001e1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e36:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d002      	beq.n	8001e4c <HAL_RCC_GetSysClockFreq+0x30>
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d003      	beq.n	8001e52 <HAL_RCC_GetSysClockFreq+0x36>
 8001e4a:	e027      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e4c:	4b19      	ldr	r3, [pc, #100]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e4e:	613b      	str	r3, [r7, #16]
      break;
 8001e50:	e027      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	0c9b      	lsrs	r3, r3, #18
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	4a17      	ldr	r2, [pc, #92]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e5c:	5cd3      	ldrb	r3, [r2, r3]
 8001e5e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d010      	beq.n	8001e8c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e6a:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	0c5b      	lsrs	r3, r3, #17
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	4a11      	ldr	r2, [pc, #68]	; (8001ebc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e76:	5cd3      	ldrb	r3, [r2, r3]
 8001e78:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a0d      	ldr	r2, [pc, #52]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e7e:	fb03 f202 	mul.w	r2, r3, r2
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	e004      	b.n	8001e96 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a0c      	ldr	r2, [pc, #48]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e90:	fb02 f303 	mul.w	r3, r2, r3
 8001e94:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	613b      	str	r3, [r7, #16]
      break;
 8001e9a:	e002      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e9e:	613b      	str	r3, [r7, #16]
      break;
 8001ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ea2:	693b      	ldr	r3, [r7, #16]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	371c      	adds	r7, #28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	007a1200 	.word	0x007a1200
 8001eb8:	0800381c 	.word	0x0800381c
 8001ebc:	0800382c 	.word	0x0800382c
 8001ec0:	003d0900 	.word	0x003d0900

08001ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec8:	4b02      	ldr	r3, [pc, #8]	; (8001ed4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eca:	681b      	ldr	r3, [r3, #0]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr
 8001ed4:	20000004 	.word	0x20000004

08001ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001edc:	f7ff fff2 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	0a1b      	lsrs	r3, r3, #8
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	4903      	ldr	r1, [pc, #12]	; (8001efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eee:	5ccb      	ldrb	r3, [r1, r3]
 8001ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	08003814 	.word	0x08003814

08001f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f04:	f7ff ffde 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	0adb      	lsrs	r3, r3, #11
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	4903      	ldr	r1, [pc, #12]	; (8001f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f16:	5ccb      	ldrb	r3, [r1, r3]
 8001f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000
 8001f24:	08003814 	.word	0x08003814

08001f28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f30:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <RCC_Delay+0x34>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <RCC_Delay+0x38>)
 8001f36:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3a:	0a5b      	lsrs	r3, r3, #9
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	fb02 f303 	mul.w	r3, r2, r3
 8001f42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f44:	bf00      	nop
  }
  while (Delay --);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	1e5a      	subs	r2, r3, #1
 8001f4a:	60fa      	str	r2, [r7, #12]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1f9      	bne.n	8001f44 <RCC_Delay+0x1c>
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr
 8001f5c:	20000004 	.word	0x20000004
 8001f60:	10624dd3 	.word	0x10624dd3

08001f64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e076      	b.n	8002064 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d108      	bne.n	8001f90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f86:	d009      	beq.n	8001f9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	61da      	str	r2, [r3, #28]
 8001f8e:	e005      	b.n	8001f9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d106      	bne.n	8001fbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7fe fef6 	bl	8000da8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fd2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002020:	ea42 0103 	orr.w	r1, r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002028:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	0c1a      	lsrs	r2, r3, #16
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f002 0204 	and.w	r2, r2, #4
 8002042:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	69da      	ldr	r2, [r3, #28]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002052:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	603b      	str	r3, [r7, #0]
 8002078:	4613      	mov	r3, r2
 800207a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_SPI_Transmit+0x22>
 800208a:	2302      	movs	r3, #2
 800208c:	e12d      	b.n	80022ea <HAL_SPI_Transmit+0x27e>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002096:	f7ff f865 	bl	8001164 <HAL_GetTick>
 800209a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800209c:	88fb      	ldrh	r3, [r7, #6]
 800209e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d002      	beq.n	80020b2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80020ac:	2302      	movs	r3, #2
 80020ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020b0:	e116      	b.n	80022e0 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <HAL_SPI_Transmit+0x52>
 80020b8:	88fb      	ldrh	r3, [r7, #6]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d102      	bne.n	80020c4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020c2:	e10d      	b.n	80022e0 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2203      	movs	r2, #3
 80020c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	88fa      	ldrh	r2, [r7, #6]
 80020dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	88fa      	ldrh	r2, [r7, #6]
 80020e2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800210a:	d10f      	bne.n	800212c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800211a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800212a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002136:	2b40      	cmp	r3, #64	; 0x40
 8002138:	d007      	beq.n	800214a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002148:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002152:	d14f      	bne.n	80021f4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d002      	beq.n	8002162 <HAL_SPI_Transmit+0xf6>
 800215c:	8afb      	ldrh	r3, [r7, #22]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d142      	bne.n	80021e8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	881a      	ldrh	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	1c9a      	adds	r2, r3, #2
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800217c:	b29b      	uxth	r3, r3
 800217e:	3b01      	subs	r3, #1
 8002180:	b29a      	uxth	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002186:	e02f      	b.n	80021e8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b02      	cmp	r3, #2
 8002194:	d112      	bne.n	80021bc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	881a      	ldrh	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	1c9a      	adds	r2, r3, #2
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	3b01      	subs	r3, #1
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80021ba:	e015      	b.n	80021e8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021bc:	f7fe ffd2 	bl	8001164 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d803      	bhi.n	80021d4 <HAL_SPI_Transmit+0x168>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d2:	d102      	bne.n	80021da <HAL_SPI_Transmit+0x16e>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d106      	bne.n	80021e8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80021e6:	e07b      	b.n	80022e0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1ca      	bne.n	8002188 <HAL_SPI_Transmit+0x11c>
 80021f2:	e050      	b.n	8002296 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <HAL_SPI_Transmit+0x196>
 80021fc:	8afb      	ldrh	r3, [r7, #22]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d144      	bne.n	800228c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	330c      	adds	r3, #12
 800220c:	7812      	ldrb	r2, [r2, #0]
 800220e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800221e:	b29b      	uxth	r3, r3
 8002220:	3b01      	subs	r3, #1
 8002222:	b29a      	uxth	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002228:	e030      	b.n	800228c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b02      	cmp	r3, #2
 8002236:	d113      	bne.n	8002260 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	330c      	adds	r3, #12
 8002242:	7812      	ldrb	r2, [r2, #0]
 8002244:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002254:	b29b      	uxth	r3, r3
 8002256:	3b01      	subs	r3, #1
 8002258:	b29a      	uxth	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	86da      	strh	r2, [r3, #54]	; 0x36
 800225e:	e015      	b.n	800228c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002260:	f7fe ff80 	bl	8001164 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d803      	bhi.n	8002278 <HAL_SPI_Transmit+0x20c>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002276:	d102      	bne.n	800227e <HAL_SPI_Transmit+0x212>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d106      	bne.n	800228c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800228a:	e029      	b.n	80022e0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002290:	b29b      	uxth	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1c9      	bne.n	800222a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	6839      	ldr	r1, [r7, #0]
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 fbd8 	bl	8002a50 <SPI_EndRxTxTransaction>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d002      	beq.n	80022ac <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2220      	movs	r2, #32
 80022aa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10a      	bne.n	80022ca <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022b4:	2300      	movs	r3, #0
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	613b      	str	r3, [r7, #16]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	77fb      	strb	r3, [r7, #31]
 80022d6:	e003      	b.n	80022e0 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3720      	adds	r7, #32
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b088      	sub	sp, #32
 80022f6:	af02      	add	r7, sp, #8
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	603b      	str	r3, [r7, #0]
 80022fe:	4613      	mov	r3, r2
 8002300:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b01      	cmp	r3, #1
 8002310:	d002      	beq.n	8002318 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002312:	2302      	movs	r3, #2
 8002314:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002316:	e0fb      	b.n	8002510 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002320:	d112      	bne.n	8002348 <HAL_SPI_Receive+0x56>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10e      	bne.n	8002348 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2204      	movs	r2, #4
 800232e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002332:	88fa      	ldrh	r2, [r7, #6]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	4613      	mov	r3, r2
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	68b9      	ldr	r1, [r7, #8]
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 f8ef 	bl	8002522 <HAL_SPI_TransmitReceive>
 8002344:	4603      	mov	r3, r0
 8002346:	e0e8      	b.n	800251a <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800234e:	2b01      	cmp	r3, #1
 8002350:	d101      	bne.n	8002356 <HAL_SPI_Receive+0x64>
 8002352:	2302      	movs	r3, #2
 8002354:	e0e1      	b.n	800251a <HAL_SPI_Receive+0x228>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800235e:	f7fe ff01 	bl	8001164 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <HAL_SPI_Receive+0x7e>
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d102      	bne.n	8002376 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002374:	e0cc      	b.n	8002510 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2204      	movs	r2, #4
 800237a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	88fa      	ldrh	r2, [r7, #6]
 800238e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	88fa      	ldrh	r2, [r7, #6]
 8002394:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023bc:	d10f      	bne.n	80023de <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80023dc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e8:	2b40      	cmp	r3, #64	; 0x40
 80023ea:	d007      	beq.n	80023fc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023fa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d16a      	bne.n	80024da <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002404:	e032      	b.n	800246c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b01      	cmp	r3, #1
 8002412:	d115      	bne.n	8002440 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f103 020c 	add.w	r2, r3, #12
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002420:	7812      	ldrb	r2, [r2, #0]
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242a:	1c5a      	adds	r2, r3, #1
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002434:	b29b      	uxth	r3, r3
 8002436:	3b01      	subs	r3, #1
 8002438:	b29a      	uxth	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800243e:	e015      	b.n	800246c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002440:	f7fe fe90 	bl	8001164 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d803      	bhi.n	8002458 <HAL_SPI_Receive+0x166>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002456:	d102      	bne.n	800245e <HAL_SPI_Receive+0x16c>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800246a:	e051      	b.n	8002510 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002470:	b29b      	uxth	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1c7      	bne.n	8002406 <HAL_SPI_Receive+0x114>
 8002476:	e035      	b.n	80024e4 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b01      	cmp	r3, #1
 8002484:	d113      	bne.n	80024ae <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002490:	b292      	uxth	r2, r2
 8002492:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002498:	1c9a      	adds	r2, r3, #2
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024ac:	e015      	b.n	80024da <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024ae:	f7fe fe59 	bl	8001164 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d803      	bhi.n	80024c6 <HAL_SPI_Receive+0x1d4>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c4:	d102      	bne.n	80024cc <HAL_SPI_Receive+0x1da>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d106      	bne.n	80024da <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80024d8:	e01a      	b.n	8002510 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024de:	b29b      	uxth	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1c9      	bne.n	8002478 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	6839      	ldr	r1, [r7, #0]
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 fa5f 	bl	80029ac <SPI_EndRxTransaction>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d002      	beq.n	80024fa <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2220      	movs	r2, #32
 80024f8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	75fb      	strb	r3, [r7, #23]
 8002506:	e003      	b.n	8002510 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002518:	7dfb      	ldrb	r3, [r7, #23]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b08c      	sub	sp, #48	; 0x30
 8002526:	af00      	add	r7, sp, #0
 8002528:	60f8      	str	r0, [r7, #12]
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]
 800252e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002530:	2301      	movs	r3, #1
 8002532:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002534:	2300      	movs	r3, #0
 8002536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_SPI_TransmitReceive+0x26>
 8002544:	2302      	movs	r3, #2
 8002546:	e198      	b.n	800287a <HAL_SPI_TransmitReceive+0x358>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002550:	f7fe fe08 	bl	8001164 <HAL_GetTick>
 8002554:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800255c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002566:	887b      	ldrh	r3, [r7, #2]
 8002568:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800256a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800256e:	2b01      	cmp	r3, #1
 8002570:	d00f      	beq.n	8002592 <HAL_SPI_TransmitReceive+0x70>
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002578:	d107      	bne.n	800258a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d103      	bne.n	800258a <HAL_SPI_TransmitReceive+0x68>
 8002582:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002586:	2b04      	cmp	r3, #4
 8002588:	d003      	beq.n	8002592 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800258a:	2302      	movs	r3, #2
 800258c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002590:	e16d      	b.n	800286e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_SPI_TransmitReceive+0x82>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d002      	beq.n	80025a4 <HAL_SPI_TransmitReceive+0x82>
 800259e:	887b      	ldrh	r3, [r7, #2]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d103      	bne.n	80025ac <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025aa:	e160      	b.n	800286e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	d003      	beq.n	80025c0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2205      	movs	r2, #5
 80025bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	887a      	ldrh	r2, [r7, #2]
 80025d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	887a      	ldrh	r2, [r7, #2]
 80025d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	887a      	ldrh	r2, [r7, #2]
 80025e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	887a      	ldrh	r2, [r7, #2]
 80025e8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002600:	2b40      	cmp	r3, #64	; 0x40
 8002602:	d007      	beq.n	8002614 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002612:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800261c:	d17c      	bne.n	8002718 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <HAL_SPI_TransmitReceive+0x10a>
 8002626:	8b7b      	ldrh	r3, [r7, #26]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d16a      	bne.n	8002702 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	881a      	ldrh	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263c:	1c9a      	adds	r2, r3, #2
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002646:	b29b      	uxth	r3, r3
 8002648:	3b01      	subs	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002650:	e057      	b.n	8002702 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b02      	cmp	r3, #2
 800265e:	d11b      	bne.n	8002698 <HAL_SPI_TransmitReceive+0x176>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002664:	b29b      	uxth	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d016      	beq.n	8002698 <HAL_SPI_TransmitReceive+0x176>
 800266a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266c:	2b01      	cmp	r3, #1
 800266e:	d113      	bne.n	8002698 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	881a      	ldrh	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	1c9a      	adds	r2, r3, #2
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800268a:	b29b      	uxth	r3, r3
 800268c:	3b01      	subs	r3, #1
 800268e:	b29a      	uxth	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d119      	bne.n	80026da <HAL_SPI_TransmitReceive+0x1b8>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d014      	beq.n	80026da <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ba:	b292      	uxth	r2, r2
 80026bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c2:	1c9a      	adds	r2, r3, #2
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026d6:	2301      	movs	r3, #1
 80026d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80026da:	f7fe fd43 	bl	8001164 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d80b      	bhi.n	8002702 <HAL_SPI_TransmitReceive+0x1e0>
 80026ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f0:	d007      	beq.n	8002702 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002700:	e0b5      	b.n	800286e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002706:	b29b      	uxth	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1a2      	bne.n	8002652 <HAL_SPI_TransmitReceive+0x130>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002710:	b29b      	uxth	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d19d      	bne.n	8002652 <HAL_SPI_TransmitReceive+0x130>
 8002716:	e080      	b.n	800281a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d002      	beq.n	8002726 <HAL_SPI_TransmitReceive+0x204>
 8002720:	8b7b      	ldrh	r3, [r7, #26]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d16f      	bne.n	8002806 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	330c      	adds	r3, #12
 8002730:	7812      	ldrb	r2, [r2, #0]
 8002732:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002742:	b29b      	uxth	r3, r3
 8002744:	3b01      	subs	r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800274c:	e05b      	b.n	8002806 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b02      	cmp	r3, #2
 800275a:	d11c      	bne.n	8002796 <HAL_SPI_TransmitReceive+0x274>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002760:	b29b      	uxth	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d017      	beq.n	8002796 <HAL_SPI_TransmitReceive+0x274>
 8002766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002768:	2b01      	cmp	r3, #1
 800276a:	d114      	bne.n	8002796 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	330c      	adds	r3, #12
 8002776:	7812      	ldrb	r2, [r2, #0]
 8002778:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002788:	b29b      	uxth	r3, r3
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002792:	2300      	movs	r3, #0
 8002794:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d119      	bne.n	80027d8 <HAL_SPI_TransmitReceive+0x2b6>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d014      	beq.n	80027d8 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027d4:	2301      	movs	r3, #1
 80027d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80027d8:	f7fe fcc4 	bl	8001164 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d803      	bhi.n	80027f0 <HAL_SPI_TransmitReceive+0x2ce>
 80027e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ee:	d102      	bne.n	80027f6 <HAL_SPI_TransmitReceive+0x2d4>
 80027f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d107      	bne.n	8002806 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002804:	e033      	b.n	800286e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800280a:	b29b      	uxth	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d19e      	bne.n	800274e <HAL_SPI_TransmitReceive+0x22c>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002814:	b29b      	uxth	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d199      	bne.n	800274e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800281a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 f916 	bl	8002a50 <SPI_EndRxTxTransaction>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d006      	beq.n	8002838 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2220      	movs	r2, #32
 8002834:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002836:	e01a      	b.n	800286e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10a      	bne.n	8002856 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002864:	e003      	b.n	800286e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002876:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800287a:	4618      	mov	r0, r3
 800287c:	3730      	adds	r7, #48	; 0x30
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002890:	b2db      	uxtb	r3, r3
}
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	4613      	mov	r3, r2
 80028aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028ac:	f7fe fc5a 	bl	8001164 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b4:	1a9b      	subs	r3, r3, r2
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	4413      	add	r3, r2
 80028ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028bc:	f7fe fc52 	bl	8001164 <HAL_GetTick>
 80028c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028c2:	4b39      	ldr	r3, [pc, #228]	; (80029a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	015b      	lsls	r3, r3, #5
 80028c8:	0d1b      	lsrs	r3, r3, #20
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	fb02 f303 	mul.w	r3, r2, r3
 80028d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028d2:	e054      	b.n	800297e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028da:	d050      	beq.n	800297e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028dc:	f7fe fc42 	bl	8001164 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	69fa      	ldr	r2, [r7, #28]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d902      	bls.n	80028f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d13d      	bne.n	800296e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002900:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800290a:	d111      	bne.n	8002930 <SPI_WaitFlagStateUntilTimeout+0x94>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002914:	d004      	beq.n	8002920 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800291e:	d107      	bne.n	8002930 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800292e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002938:	d10f      	bne.n	800295a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002958:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e017      	b.n	800299e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	3b01      	subs	r3, #1
 800297c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	4013      	ands	r3, r2
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	429a      	cmp	r2, r3
 800298c:	bf0c      	ite	eq
 800298e:	2301      	moveq	r3, #1
 8002990:	2300      	movne	r3, #0
 8002992:	b2db      	uxtb	r3, r3
 8002994:	461a      	mov	r2, r3
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	429a      	cmp	r2, r3
 800299a:	d19b      	bne.n	80028d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3720      	adds	r7, #32
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000004 	.word	0x20000004

080029ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af02      	add	r7, sp, #8
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029c0:	d111      	bne.n	80029e6 <SPI_EndRxTransaction+0x3a>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ca:	d004      	beq.n	80029d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d4:	d107      	bne.n	80029e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029e4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029ee:	d117      	bne.n	8002a20 <SPI_EndRxTransaction+0x74>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029f8:	d112      	bne.n	8002a20 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2200      	movs	r2, #0
 8002a02:	2101      	movs	r1, #1
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f7ff ff49 	bl	800289c <SPI_WaitFlagStateUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d01a      	beq.n	8002a46 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a14:	f043 0220 	orr.w	r2, r3, #32
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e013      	b.n	8002a48 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2200      	movs	r2, #0
 8002a28:	2180      	movs	r1, #128	; 0x80
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f7ff ff36 	bl	800289c <SPI_WaitFlagStateUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d007      	beq.n	8002a46 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3a:	f043 0220 	orr.w	r2, r3, #32
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e000      	b.n	8002a48 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2200      	movs	r2, #0
 8002a64:	2180      	movs	r1, #128	; 0x80
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f7ff ff18 	bl	800289c <SPI_WaitFlagStateUntilTimeout>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d007      	beq.n	8002a82 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a76:	f043 0220 	orr.w	r2, r3, #32
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e000      	b.n	8002a84 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e042      	b.n	8002b24 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d106      	bne.n	8002ab8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7fe fa8c 	bl	8000fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2224      	movs	r2, #36	; 0x24
 8002abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ace:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f91d 	bl	8002d10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ae4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695a      	ldr	r2, [r3, #20]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002af4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08a      	sub	sp, #40	; 0x28
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b20      	cmp	r3, #32
 8002b4a:	d16d      	bne.n	8002c28 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <HAL_UART_Transmit+0x2c>
 8002b52:	88fb      	ldrh	r3, [r7, #6]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e066      	b.n	8002c2a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2221      	movs	r2, #33	; 0x21
 8002b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b6a:	f7fe fafb 	bl	8001164 <HAL_GetTick>
 8002b6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	88fa      	ldrh	r2, [r7, #6]
 8002b74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	88fa      	ldrh	r2, [r7, #6]
 8002b7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b84:	d108      	bne.n	8002b98 <HAL_UART_Transmit+0x6c>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d104      	bne.n	8002b98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	61bb      	str	r3, [r7, #24]
 8002b96:	e003      	b.n	8002ba0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ba0:	e02a      	b.n	8002bf8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2180      	movs	r1, #128	; 0x80
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 f840 	bl	8002c32 <UART_WaitOnFlagUntilTimeout>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e036      	b.n	8002c2a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10b      	bne.n	8002bda <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	3302      	adds	r3, #2
 8002bd6:	61bb      	str	r3, [r7, #24]
 8002bd8:	e007      	b.n	8002bea <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	781a      	ldrb	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	3301      	adds	r3, #1
 8002be8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1cf      	bne.n	8002ba2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	2140      	movs	r1, #64	; 0x40
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 f810 	bl	8002c32 <UART_WaitOnFlagUntilTimeout>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e006      	b.n	8002c2a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	e000      	b.n	8002c2a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002c28:	2302      	movs	r3, #2
  }
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3720      	adds	r7, #32
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b090      	sub	sp, #64	; 0x40
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	603b      	str	r3, [r7, #0]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c42:	e050      	b.n	8002ce6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4a:	d04c      	beq.n	8002ce6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d007      	beq.n	8002c62 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c52:	f7fe fa87 	bl	8001164 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d241      	bcs.n	8002ce6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	330c      	adds	r3, #12
 8002c68:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6c:	e853 3f00 	ldrex	r3, [r3]
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	330c      	adds	r3, #12
 8002c80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c82:	637a      	str	r2, [r7, #52]	; 0x34
 8002c84:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c8a:	e841 2300 	strex	r3, r2, [r1]
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1e5      	bne.n	8002c62 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	3314      	adds	r3, #20
 8002c9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	e853 3f00 	ldrex	r3, [r3]
 8002ca4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	f023 0301 	bic.w	r3, r3, #1
 8002cac:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	3314      	adds	r3, #20
 8002cb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cb6:	623a      	str	r2, [r7, #32]
 8002cb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cba:	69f9      	ldr	r1, [r7, #28]
 8002cbc:	6a3a      	ldr	r2, [r7, #32]
 8002cbe:	e841 2300 	strex	r3, r2, [r1]
 8002cc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1e5      	bne.n	8002c96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2220      	movs	r2, #32
 8002cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e00f      	b.n	8002d06 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	bf0c      	ite	eq
 8002cf6:	2301      	moveq	r3, #1
 8002cf8:	2300      	movne	r3, #0
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d09f      	beq.n	8002c44 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3740      	adds	r7, #64	; 0x40
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d4a:	f023 030c 	bic.w	r3, r3, #12
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6812      	ldr	r2, [r2, #0]
 8002d52:	68b9      	ldr	r1, [r7, #8]
 8002d54:	430b      	orrs	r3, r1
 8002d56:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699a      	ldr	r2, [r3, #24]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a2c      	ldr	r2, [pc, #176]	; (8002e24 <UART_SetConfig+0x114>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d103      	bne.n	8002d80 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d78:	f7ff f8c2 	bl	8001f00 <HAL_RCC_GetPCLK2Freq>
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	e002      	b.n	8002d86 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d80:	f7ff f8aa 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 8002d84:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	009a      	lsls	r2, r3, #2
 8002d90:	441a      	add	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9c:	4a22      	ldr	r2, [pc, #136]	; (8002e28 <UART_SetConfig+0x118>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	095b      	lsrs	r3, r3, #5
 8002da4:	0119      	lsls	r1, r3, #4
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	009a      	lsls	r2, r3, #2
 8002db0:	441a      	add	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dbc:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <UART_SetConfig+0x118>)
 8002dbe:	fba3 0302 	umull	r0, r3, r3, r2
 8002dc2:	095b      	lsrs	r3, r3, #5
 8002dc4:	2064      	movs	r0, #100	; 0x64
 8002dc6:	fb00 f303 	mul.w	r3, r0, r3
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	3332      	adds	r3, #50	; 0x32
 8002dd0:	4a15      	ldr	r2, [pc, #84]	; (8002e28 <UART_SetConfig+0x118>)
 8002dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd6:	095b      	lsrs	r3, r3, #5
 8002dd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ddc:	4419      	add	r1, r3
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	009a      	lsls	r2, r3, #2
 8002de8:	441a      	add	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002df4:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <UART_SetConfig+0x118>)
 8002df6:	fba3 0302 	umull	r0, r3, r3, r2
 8002dfa:	095b      	lsrs	r3, r3, #5
 8002dfc:	2064      	movs	r0, #100	; 0x64
 8002dfe:	fb00 f303 	mul.w	r3, r0, r3
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	3332      	adds	r3, #50	; 0x32
 8002e08:	4a07      	ldr	r2, [pc, #28]	; (8002e28 <UART_SetConfig+0x118>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	095b      	lsrs	r3, r3, #5
 8002e10:	f003 020f 	and.w	r2, r3, #15
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	440a      	add	r2, r1
 8002e1a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e1c:	bf00      	nop
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40013800 	.word	0x40013800
 8002e28:	51eb851f 	.word	0x51eb851f

08002e2c <__errno>:
 8002e2c:	4b01      	ldr	r3, [pc, #4]	; (8002e34 <__errno+0x8>)
 8002e2e:	6818      	ldr	r0, [r3, #0]
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	20000010 	.word	0x20000010

08002e38 <__libc_init_array>:
 8002e38:	b570      	push	{r4, r5, r6, lr}
 8002e3a:	2600      	movs	r6, #0
 8002e3c:	4d0c      	ldr	r5, [pc, #48]	; (8002e70 <__libc_init_array+0x38>)
 8002e3e:	4c0d      	ldr	r4, [pc, #52]	; (8002e74 <__libc_init_array+0x3c>)
 8002e40:	1b64      	subs	r4, r4, r5
 8002e42:	10a4      	asrs	r4, r4, #2
 8002e44:	42a6      	cmp	r6, r4
 8002e46:	d109      	bne.n	8002e5c <__libc_init_array+0x24>
 8002e48:	f000 fc9c 	bl	8003784 <_init>
 8002e4c:	2600      	movs	r6, #0
 8002e4e:	4d0a      	ldr	r5, [pc, #40]	; (8002e78 <__libc_init_array+0x40>)
 8002e50:	4c0a      	ldr	r4, [pc, #40]	; (8002e7c <__libc_init_array+0x44>)
 8002e52:	1b64      	subs	r4, r4, r5
 8002e54:	10a4      	asrs	r4, r4, #2
 8002e56:	42a6      	cmp	r6, r4
 8002e58:	d105      	bne.n	8002e66 <__libc_init_array+0x2e>
 8002e5a:	bd70      	pop	{r4, r5, r6, pc}
 8002e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e60:	4798      	blx	r3
 8002e62:	3601      	adds	r6, #1
 8002e64:	e7ee      	b.n	8002e44 <__libc_init_array+0xc>
 8002e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e6a:	4798      	blx	r3
 8002e6c:	3601      	adds	r6, #1
 8002e6e:	e7f2      	b.n	8002e56 <__libc_init_array+0x1e>
 8002e70:	08003864 	.word	0x08003864
 8002e74:	08003864 	.word	0x08003864
 8002e78:	08003864 	.word	0x08003864
 8002e7c:	08003868 	.word	0x08003868

08002e80 <memset>:
 8002e80:	4603      	mov	r3, r0
 8002e82:	4402      	add	r2, r0
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d100      	bne.n	8002e8a <memset+0xa>
 8002e88:	4770      	bx	lr
 8002e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e8e:	e7f9      	b.n	8002e84 <memset+0x4>

08002e90 <siprintf>:
 8002e90:	b40e      	push	{r1, r2, r3}
 8002e92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002e96:	b500      	push	{lr}
 8002e98:	b09c      	sub	sp, #112	; 0x70
 8002e9a:	ab1d      	add	r3, sp, #116	; 0x74
 8002e9c:	9002      	str	r0, [sp, #8]
 8002e9e:	9006      	str	r0, [sp, #24]
 8002ea0:	9107      	str	r1, [sp, #28]
 8002ea2:	9104      	str	r1, [sp, #16]
 8002ea4:	4808      	ldr	r0, [pc, #32]	; (8002ec8 <siprintf+0x38>)
 8002ea6:	4909      	ldr	r1, [pc, #36]	; (8002ecc <siprintf+0x3c>)
 8002ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002eac:	9105      	str	r1, [sp, #20]
 8002eae:	6800      	ldr	r0, [r0, #0]
 8002eb0:	a902      	add	r1, sp, #8
 8002eb2:	9301      	str	r3, [sp, #4]
 8002eb4:	f000 f868 	bl	8002f88 <_svfiprintf_r>
 8002eb8:	2200      	movs	r2, #0
 8002eba:	9b02      	ldr	r3, [sp, #8]
 8002ebc:	701a      	strb	r2, [r3, #0]
 8002ebe:	b01c      	add	sp, #112	; 0x70
 8002ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ec4:	b003      	add	sp, #12
 8002ec6:	4770      	bx	lr
 8002ec8:	20000010 	.word	0x20000010
 8002ecc:	ffff0208 	.word	0xffff0208

08002ed0 <__ssputs_r>:
 8002ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ed4:	688e      	ldr	r6, [r1, #8]
 8002ed6:	4682      	mov	sl, r0
 8002ed8:	429e      	cmp	r6, r3
 8002eda:	460c      	mov	r4, r1
 8002edc:	4690      	mov	r8, r2
 8002ede:	461f      	mov	r7, r3
 8002ee0:	d838      	bhi.n	8002f54 <__ssputs_r+0x84>
 8002ee2:	898a      	ldrh	r2, [r1, #12]
 8002ee4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002ee8:	d032      	beq.n	8002f50 <__ssputs_r+0x80>
 8002eea:	6825      	ldr	r5, [r4, #0]
 8002eec:	6909      	ldr	r1, [r1, #16]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	eba5 0901 	sub.w	r9, r5, r1
 8002ef4:	6965      	ldr	r5, [r4, #20]
 8002ef6:	444b      	add	r3, r9
 8002ef8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002efc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f00:	106d      	asrs	r5, r5, #1
 8002f02:	429d      	cmp	r5, r3
 8002f04:	bf38      	it	cc
 8002f06:	461d      	movcc	r5, r3
 8002f08:	0553      	lsls	r3, r2, #21
 8002f0a:	d531      	bpl.n	8002f70 <__ssputs_r+0xa0>
 8002f0c:	4629      	mov	r1, r5
 8002f0e:	f000 fb6f 	bl	80035f0 <_malloc_r>
 8002f12:	4606      	mov	r6, r0
 8002f14:	b950      	cbnz	r0, 8002f2c <__ssputs_r+0x5c>
 8002f16:	230c      	movs	r3, #12
 8002f18:	f04f 30ff 	mov.w	r0, #4294967295
 8002f1c:	f8ca 3000 	str.w	r3, [sl]
 8002f20:	89a3      	ldrh	r3, [r4, #12]
 8002f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f26:	81a3      	strh	r3, [r4, #12]
 8002f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f2c:	464a      	mov	r2, r9
 8002f2e:	6921      	ldr	r1, [r4, #16]
 8002f30:	f000 face 	bl	80034d0 <memcpy>
 8002f34:	89a3      	ldrh	r3, [r4, #12]
 8002f36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f3e:	81a3      	strh	r3, [r4, #12]
 8002f40:	6126      	str	r6, [r4, #16]
 8002f42:	444e      	add	r6, r9
 8002f44:	6026      	str	r6, [r4, #0]
 8002f46:	463e      	mov	r6, r7
 8002f48:	6165      	str	r5, [r4, #20]
 8002f4a:	eba5 0509 	sub.w	r5, r5, r9
 8002f4e:	60a5      	str	r5, [r4, #8]
 8002f50:	42be      	cmp	r6, r7
 8002f52:	d900      	bls.n	8002f56 <__ssputs_r+0x86>
 8002f54:	463e      	mov	r6, r7
 8002f56:	4632      	mov	r2, r6
 8002f58:	4641      	mov	r1, r8
 8002f5a:	6820      	ldr	r0, [r4, #0]
 8002f5c:	f000 fac6 	bl	80034ec <memmove>
 8002f60:	68a3      	ldr	r3, [r4, #8]
 8002f62:	2000      	movs	r0, #0
 8002f64:	1b9b      	subs	r3, r3, r6
 8002f66:	60a3      	str	r3, [r4, #8]
 8002f68:	6823      	ldr	r3, [r4, #0]
 8002f6a:	4433      	add	r3, r6
 8002f6c:	6023      	str	r3, [r4, #0]
 8002f6e:	e7db      	b.n	8002f28 <__ssputs_r+0x58>
 8002f70:	462a      	mov	r2, r5
 8002f72:	f000 fbb1 	bl	80036d8 <_realloc_r>
 8002f76:	4606      	mov	r6, r0
 8002f78:	2800      	cmp	r0, #0
 8002f7a:	d1e1      	bne.n	8002f40 <__ssputs_r+0x70>
 8002f7c:	4650      	mov	r0, sl
 8002f7e:	6921      	ldr	r1, [r4, #16]
 8002f80:	f000 face 	bl	8003520 <_free_r>
 8002f84:	e7c7      	b.n	8002f16 <__ssputs_r+0x46>
	...

08002f88 <_svfiprintf_r>:
 8002f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f8c:	4698      	mov	r8, r3
 8002f8e:	898b      	ldrh	r3, [r1, #12]
 8002f90:	4607      	mov	r7, r0
 8002f92:	061b      	lsls	r3, r3, #24
 8002f94:	460d      	mov	r5, r1
 8002f96:	4614      	mov	r4, r2
 8002f98:	b09d      	sub	sp, #116	; 0x74
 8002f9a:	d50e      	bpl.n	8002fba <_svfiprintf_r+0x32>
 8002f9c:	690b      	ldr	r3, [r1, #16]
 8002f9e:	b963      	cbnz	r3, 8002fba <_svfiprintf_r+0x32>
 8002fa0:	2140      	movs	r1, #64	; 0x40
 8002fa2:	f000 fb25 	bl	80035f0 <_malloc_r>
 8002fa6:	6028      	str	r0, [r5, #0]
 8002fa8:	6128      	str	r0, [r5, #16]
 8002faa:	b920      	cbnz	r0, 8002fb6 <_svfiprintf_r+0x2e>
 8002fac:	230c      	movs	r3, #12
 8002fae:	603b      	str	r3, [r7, #0]
 8002fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb4:	e0d1      	b.n	800315a <_svfiprintf_r+0x1d2>
 8002fb6:	2340      	movs	r3, #64	; 0x40
 8002fb8:	616b      	str	r3, [r5, #20]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8002fbe:	2320      	movs	r3, #32
 8002fc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002fc4:	2330      	movs	r3, #48	; 0x30
 8002fc6:	f04f 0901 	mov.w	r9, #1
 8002fca:	f8cd 800c 	str.w	r8, [sp, #12]
 8002fce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003174 <_svfiprintf_r+0x1ec>
 8002fd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002fd6:	4623      	mov	r3, r4
 8002fd8:	469a      	mov	sl, r3
 8002fda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002fde:	b10a      	cbz	r2, 8002fe4 <_svfiprintf_r+0x5c>
 8002fe0:	2a25      	cmp	r2, #37	; 0x25
 8002fe2:	d1f9      	bne.n	8002fd8 <_svfiprintf_r+0x50>
 8002fe4:	ebba 0b04 	subs.w	fp, sl, r4
 8002fe8:	d00b      	beq.n	8003002 <_svfiprintf_r+0x7a>
 8002fea:	465b      	mov	r3, fp
 8002fec:	4622      	mov	r2, r4
 8002fee:	4629      	mov	r1, r5
 8002ff0:	4638      	mov	r0, r7
 8002ff2:	f7ff ff6d 	bl	8002ed0 <__ssputs_r>
 8002ff6:	3001      	adds	r0, #1
 8002ff8:	f000 80aa 	beq.w	8003150 <_svfiprintf_r+0x1c8>
 8002ffc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ffe:	445a      	add	r2, fp
 8003000:	9209      	str	r2, [sp, #36]	; 0x24
 8003002:	f89a 3000 	ldrb.w	r3, [sl]
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 80a2 	beq.w	8003150 <_svfiprintf_r+0x1c8>
 800300c:	2300      	movs	r3, #0
 800300e:	f04f 32ff 	mov.w	r2, #4294967295
 8003012:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003016:	f10a 0a01 	add.w	sl, sl, #1
 800301a:	9304      	str	r3, [sp, #16]
 800301c:	9307      	str	r3, [sp, #28]
 800301e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003022:	931a      	str	r3, [sp, #104]	; 0x68
 8003024:	4654      	mov	r4, sl
 8003026:	2205      	movs	r2, #5
 8003028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800302c:	4851      	ldr	r0, [pc, #324]	; (8003174 <_svfiprintf_r+0x1ec>)
 800302e:	f000 fa41 	bl	80034b4 <memchr>
 8003032:	9a04      	ldr	r2, [sp, #16]
 8003034:	b9d8      	cbnz	r0, 800306e <_svfiprintf_r+0xe6>
 8003036:	06d0      	lsls	r0, r2, #27
 8003038:	bf44      	itt	mi
 800303a:	2320      	movmi	r3, #32
 800303c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003040:	0711      	lsls	r1, r2, #28
 8003042:	bf44      	itt	mi
 8003044:	232b      	movmi	r3, #43	; 0x2b
 8003046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800304a:	f89a 3000 	ldrb.w	r3, [sl]
 800304e:	2b2a      	cmp	r3, #42	; 0x2a
 8003050:	d015      	beq.n	800307e <_svfiprintf_r+0xf6>
 8003052:	4654      	mov	r4, sl
 8003054:	2000      	movs	r0, #0
 8003056:	f04f 0c0a 	mov.w	ip, #10
 800305a:	9a07      	ldr	r2, [sp, #28]
 800305c:	4621      	mov	r1, r4
 800305e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003062:	3b30      	subs	r3, #48	; 0x30
 8003064:	2b09      	cmp	r3, #9
 8003066:	d94e      	bls.n	8003106 <_svfiprintf_r+0x17e>
 8003068:	b1b0      	cbz	r0, 8003098 <_svfiprintf_r+0x110>
 800306a:	9207      	str	r2, [sp, #28]
 800306c:	e014      	b.n	8003098 <_svfiprintf_r+0x110>
 800306e:	eba0 0308 	sub.w	r3, r0, r8
 8003072:	fa09 f303 	lsl.w	r3, r9, r3
 8003076:	4313      	orrs	r3, r2
 8003078:	46a2      	mov	sl, r4
 800307a:	9304      	str	r3, [sp, #16]
 800307c:	e7d2      	b.n	8003024 <_svfiprintf_r+0x9c>
 800307e:	9b03      	ldr	r3, [sp, #12]
 8003080:	1d19      	adds	r1, r3, #4
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	9103      	str	r1, [sp, #12]
 8003086:	2b00      	cmp	r3, #0
 8003088:	bfbb      	ittet	lt
 800308a:	425b      	neglt	r3, r3
 800308c:	f042 0202 	orrlt.w	r2, r2, #2
 8003090:	9307      	strge	r3, [sp, #28]
 8003092:	9307      	strlt	r3, [sp, #28]
 8003094:	bfb8      	it	lt
 8003096:	9204      	strlt	r2, [sp, #16]
 8003098:	7823      	ldrb	r3, [r4, #0]
 800309a:	2b2e      	cmp	r3, #46	; 0x2e
 800309c:	d10c      	bne.n	80030b8 <_svfiprintf_r+0x130>
 800309e:	7863      	ldrb	r3, [r4, #1]
 80030a0:	2b2a      	cmp	r3, #42	; 0x2a
 80030a2:	d135      	bne.n	8003110 <_svfiprintf_r+0x188>
 80030a4:	9b03      	ldr	r3, [sp, #12]
 80030a6:	3402      	adds	r4, #2
 80030a8:	1d1a      	adds	r2, r3, #4
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	9203      	str	r2, [sp, #12]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	bfb8      	it	lt
 80030b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80030b6:	9305      	str	r3, [sp, #20]
 80030b8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003178 <_svfiprintf_r+0x1f0>
 80030bc:	2203      	movs	r2, #3
 80030be:	4650      	mov	r0, sl
 80030c0:	7821      	ldrb	r1, [r4, #0]
 80030c2:	f000 f9f7 	bl	80034b4 <memchr>
 80030c6:	b140      	cbz	r0, 80030da <_svfiprintf_r+0x152>
 80030c8:	2340      	movs	r3, #64	; 0x40
 80030ca:	eba0 000a 	sub.w	r0, r0, sl
 80030ce:	fa03 f000 	lsl.w	r0, r3, r0
 80030d2:	9b04      	ldr	r3, [sp, #16]
 80030d4:	3401      	adds	r4, #1
 80030d6:	4303      	orrs	r3, r0
 80030d8:	9304      	str	r3, [sp, #16]
 80030da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030de:	2206      	movs	r2, #6
 80030e0:	4826      	ldr	r0, [pc, #152]	; (800317c <_svfiprintf_r+0x1f4>)
 80030e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80030e6:	f000 f9e5 	bl	80034b4 <memchr>
 80030ea:	2800      	cmp	r0, #0
 80030ec:	d038      	beq.n	8003160 <_svfiprintf_r+0x1d8>
 80030ee:	4b24      	ldr	r3, [pc, #144]	; (8003180 <_svfiprintf_r+0x1f8>)
 80030f0:	bb1b      	cbnz	r3, 800313a <_svfiprintf_r+0x1b2>
 80030f2:	9b03      	ldr	r3, [sp, #12]
 80030f4:	3307      	adds	r3, #7
 80030f6:	f023 0307 	bic.w	r3, r3, #7
 80030fa:	3308      	adds	r3, #8
 80030fc:	9303      	str	r3, [sp, #12]
 80030fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003100:	4433      	add	r3, r6
 8003102:	9309      	str	r3, [sp, #36]	; 0x24
 8003104:	e767      	b.n	8002fd6 <_svfiprintf_r+0x4e>
 8003106:	460c      	mov	r4, r1
 8003108:	2001      	movs	r0, #1
 800310a:	fb0c 3202 	mla	r2, ip, r2, r3
 800310e:	e7a5      	b.n	800305c <_svfiprintf_r+0xd4>
 8003110:	2300      	movs	r3, #0
 8003112:	f04f 0c0a 	mov.w	ip, #10
 8003116:	4619      	mov	r1, r3
 8003118:	3401      	adds	r4, #1
 800311a:	9305      	str	r3, [sp, #20]
 800311c:	4620      	mov	r0, r4
 800311e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003122:	3a30      	subs	r2, #48	; 0x30
 8003124:	2a09      	cmp	r2, #9
 8003126:	d903      	bls.n	8003130 <_svfiprintf_r+0x1a8>
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0c5      	beq.n	80030b8 <_svfiprintf_r+0x130>
 800312c:	9105      	str	r1, [sp, #20]
 800312e:	e7c3      	b.n	80030b8 <_svfiprintf_r+0x130>
 8003130:	4604      	mov	r4, r0
 8003132:	2301      	movs	r3, #1
 8003134:	fb0c 2101 	mla	r1, ip, r1, r2
 8003138:	e7f0      	b.n	800311c <_svfiprintf_r+0x194>
 800313a:	ab03      	add	r3, sp, #12
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	462a      	mov	r2, r5
 8003140:	4638      	mov	r0, r7
 8003142:	4b10      	ldr	r3, [pc, #64]	; (8003184 <_svfiprintf_r+0x1fc>)
 8003144:	a904      	add	r1, sp, #16
 8003146:	f3af 8000 	nop.w
 800314a:	1c42      	adds	r2, r0, #1
 800314c:	4606      	mov	r6, r0
 800314e:	d1d6      	bne.n	80030fe <_svfiprintf_r+0x176>
 8003150:	89ab      	ldrh	r3, [r5, #12]
 8003152:	065b      	lsls	r3, r3, #25
 8003154:	f53f af2c 	bmi.w	8002fb0 <_svfiprintf_r+0x28>
 8003158:	9809      	ldr	r0, [sp, #36]	; 0x24
 800315a:	b01d      	add	sp, #116	; 0x74
 800315c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003160:	ab03      	add	r3, sp, #12
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	462a      	mov	r2, r5
 8003166:	4638      	mov	r0, r7
 8003168:	4b06      	ldr	r3, [pc, #24]	; (8003184 <_svfiprintf_r+0x1fc>)
 800316a:	a904      	add	r1, sp, #16
 800316c:	f000 f87c 	bl	8003268 <_printf_i>
 8003170:	e7eb      	b.n	800314a <_svfiprintf_r+0x1c2>
 8003172:	bf00      	nop
 8003174:	0800382e 	.word	0x0800382e
 8003178:	08003834 	.word	0x08003834
 800317c:	08003838 	.word	0x08003838
 8003180:	00000000 	.word	0x00000000
 8003184:	08002ed1 	.word	0x08002ed1

08003188 <_printf_common>:
 8003188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800318c:	4616      	mov	r6, r2
 800318e:	4699      	mov	r9, r3
 8003190:	688a      	ldr	r2, [r1, #8]
 8003192:	690b      	ldr	r3, [r1, #16]
 8003194:	4607      	mov	r7, r0
 8003196:	4293      	cmp	r3, r2
 8003198:	bfb8      	it	lt
 800319a:	4613      	movlt	r3, r2
 800319c:	6033      	str	r3, [r6, #0]
 800319e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031a2:	460c      	mov	r4, r1
 80031a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80031a8:	b10a      	cbz	r2, 80031ae <_printf_common+0x26>
 80031aa:	3301      	adds	r3, #1
 80031ac:	6033      	str	r3, [r6, #0]
 80031ae:	6823      	ldr	r3, [r4, #0]
 80031b0:	0699      	lsls	r1, r3, #26
 80031b2:	bf42      	ittt	mi
 80031b4:	6833      	ldrmi	r3, [r6, #0]
 80031b6:	3302      	addmi	r3, #2
 80031b8:	6033      	strmi	r3, [r6, #0]
 80031ba:	6825      	ldr	r5, [r4, #0]
 80031bc:	f015 0506 	ands.w	r5, r5, #6
 80031c0:	d106      	bne.n	80031d0 <_printf_common+0x48>
 80031c2:	f104 0a19 	add.w	sl, r4, #25
 80031c6:	68e3      	ldr	r3, [r4, #12]
 80031c8:	6832      	ldr	r2, [r6, #0]
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	42ab      	cmp	r3, r5
 80031ce:	dc28      	bgt.n	8003222 <_printf_common+0x9a>
 80031d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80031d4:	1e13      	subs	r3, r2, #0
 80031d6:	6822      	ldr	r2, [r4, #0]
 80031d8:	bf18      	it	ne
 80031da:	2301      	movne	r3, #1
 80031dc:	0692      	lsls	r2, r2, #26
 80031de:	d42d      	bmi.n	800323c <_printf_common+0xb4>
 80031e0:	4649      	mov	r1, r9
 80031e2:	4638      	mov	r0, r7
 80031e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031e8:	47c0      	blx	r8
 80031ea:	3001      	adds	r0, #1
 80031ec:	d020      	beq.n	8003230 <_printf_common+0xa8>
 80031ee:	6823      	ldr	r3, [r4, #0]
 80031f0:	68e5      	ldr	r5, [r4, #12]
 80031f2:	f003 0306 	and.w	r3, r3, #6
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	bf18      	it	ne
 80031fa:	2500      	movne	r5, #0
 80031fc:	6832      	ldr	r2, [r6, #0]
 80031fe:	f04f 0600 	mov.w	r6, #0
 8003202:	68a3      	ldr	r3, [r4, #8]
 8003204:	bf08      	it	eq
 8003206:	1aad      	subeq	r5, r5, r2
 8003208:	6922      	ldr	r2, [r4, #16]
 800320a:	bf08      	it	eq
 800320c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003210:	4293      	cmp	r3, r2
 8003212:	bfc4      	itt	gt
 8003214:	1a9b      	subgt	r3, r3, r2
 8003216:	18ed      	addgt	r5, r5, r3
 8003218:	341a      	adds	r4, #26
 800321a:	42b5      	cmp	r5, r6
 800321c:	d11a      	bne.n	8003254 <_printf_common+0xcc>
 800321e:	2000      	movs	r0, #0
 8003220:	e008      	b.n	8003234 <_printf_common+0xac>
 8003222:	2301      	movs	r3, #1
 8003224:	4652      	mov	r2, sl
 8003226:	4649      	mov	r1, r9
 8003228:	4638      	mov	r0, r7
 800322a:	47c0      	blx	r8
 800322c:	3001      	adds	r0, #1
 800322e:	d103      	bne.n	8003238 <_printf_common+0xb0>
 8003230:	f04f 30ff 	mov.w	r0, #4294967295
 8003234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003238:	3501      	adds	r5, #1
 800323a:	e7c4      	b.n	80031c6 <_printf_common+0x3e>
 800323c:	2030      	movs	r0, #48	; 0x30
 800323e:	18e1      	adds	r1, r4, r3
 8003240:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800324a:	4422      	add	r2, r4
 800324c:	3302      	adds	r3, #2
 800324e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003252:	e7c5      	b.n	80031e0 <_printf_common+0x58>
 8003254:	2301      	movs	r3, #1
 8003256:	4622      	mov	r2, r4
 8003258:	4649      	mov	r1, r9
 800325a:	4638      	mov	r0, r7
 800325c:	47c0      	blx	r8
 800325e:	3001      	adds	r0, #1
 8003260:	d0e6      	beq.n	8003230 <_printf_common+0xa8>
 8003262:	3601      	adds	r6, #1
 8003264:	e7d9      	b.n	800321a <_printf_common+0x92>
	...

08003268 <_printf_i>:
 8003268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800326c:	7e0f      	ldrb	r7, [r1, #24]
 800326e:	4691      	mov	r9, r2
 8003270:	2f78      	cmp	r7, #120	; 0x78
 8003272:	4680      	mov	r8, r0
 8003274:	460c      	mov	r4, r1
 8003276:	469a      	mov	sl, r3
 8003278:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800327a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800327e:	d807      	bhi.n	8003290 <_printf_i+0x28>
 8003280:	2f62      	cmp	r7, #98	; 0x62
 8003282:	d80a      	bhi.n	800329a <_printf_i+0x32>
 8003284:	2f00      	cmp	r7, #0
 8003286:	f000 80d9 	beq.w	800343c <_printf_i+0x1d4>
 800328a:	2f58      	cmp	r7, #88	; 0x58
 800328c:	f000 80a4 	beq.w	80033d8 <_printf_i+0x170>
 8003290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003294:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003298:	e03a      	b.n	8003310 <_printf_i+0xa8>
 800329a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800329e:	2b15      	cmp	r3, #21
 80032a0:	d8f6      	bhi.n	8003290 <_printf_i+0x28>
 80032a2:	a101      	add	r1, pc, #4	; (adr r1, 80032a8 <_printf_i+0x40>)
 80032a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032a8:	08003301 	.word	0x08003301
 80032ac:	08003315 	.word	0x08003315
 80032b0:	08003291 	.word	0x08003291
 80032b4:	08003291 	.word	0x08003291
 80032b8:	08003291 	.word	0x08003291
 80032bc:	08003291 	.word	0x08003291
 80032c0:	08003315 	.word	0x08003315
 80032c4:	08003291 	.word	0x08003291
 80032c8:	08003291 	.word	0x08003291
 80032cc:	08003291 	.word	0x08003291
 80032d0:	08003291 	.word	0x08003291
 80032d4:	08003423 	.word	0x08003423
 80032d8:	08003345 	.word	0x08003345
 80032dc:	08003405 	.word	0x08003405
 80032e0:	08003291 	.word	0x08003291
 80032e4:	08003291 	.word	0x08003291
 80032e8:	08003445 	.word	0x08003445
 80032ec:	08003291 	.word	0x08003291
 80032f0:	08003345 	.word	0x08003345
 80032f4:	08003291 	.word	0x08003291
 80032f8:	08003291 	.word	0x08003291
 80032fc:	0800340d 	.word	0x0800340d
 8003300:	682b      	ldr	r3, [r5, #0]
 8003302:	1d1a      	adds	r2, r3, #4
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	602a      	str	r2, [r5, #0]
 8003308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800330c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003310:	2301      	movs	r3, #1
 8003312:	e0a4      	b.n	800345e <_printf_i+0x1f6>
 8003314:	6820      	ldr	r0, [r4, #0]
 8003316:	6829      	ldr	r1, [r5, #0]
 8003318:	0606      	lsls	r6, r0, #24
 800331a:	f101 0304 	add.w	r3, r1, #4
 800331e:	d50a      	bpl.n	8003336 <_printf_i+0xce>
 8003320:	680e      	ldr	r6, [r1, #0]
 8003322:	602b      	str	r3, [r5, #0]
 8003324:	2e00      	cmp	r6, #0
 8003326:	da03      	bge.n	8003330 <_printf_i+0xc8>
 8003328:	232d      	movs	r3, #45	; 0x2d
 800332a:	4276      	negs	r6, r6
 800332c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003330:	230a      	movs	r3, #10
 8003332:	485e      	ldr	r0, [pc, #376]	; (80034ac <_printf_i+0x244>)
 8003334:	e019      	b.n	800336a <_printf_i+0x102>
 8003336:	680e      	ldr	r6, [r1, #0]
 8003338:	f010 0f40 	tst.w	r0, #64	; 0x40
 800333c:	602b      	str	r3, [r5, #0]
 800333e:	bf18      	it	ne
 8003340:	b236      	sxthne	r6, r6
 8003342:	e7ef      	b.n	8003324 <_printf_i+0xbc>
 8003344:	682b      	ldr	r3, [r5, #0]
 8003346:	6820      	ldr	r0, [r4, #0]
 8003348:	1d19      	adds	r1, r3, #4
 800334a:	6029      	str	r1, [r5, #0]
 800334c:	0601      	lsls	r1, r0, #24
 800334e:	d501      	bpl.n	8003354 <_printf_i+0xec>
 8003350:	681e      	ldr	r6, [r3, #0]
 8003352:	e002      	b.n	800335a <_printf_i+0xf2>
 8003354:	0646      	lsls	r6, r0, #25
 8003356:	d5fb      	bpl.n	8003350 <_printf_i+0xe8>
 8003358:	881e      	ldrh	r6, [r3, #0]
 800335a:	2f6f      	cmp	r7, #111	; 0x6f
 800335c:	bf0c      	ite	eq
 800335e:	2308      	moveq	r3, #8
 8003360:	230a      	movne	r3, #10
 8003362:	4852      	ldr	r0, [pc, #328]	; (80034ac <_printf_i+0x244>)
 8003364:	2100      	movs	r1, #0
 8003366:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800336a:	6865      	ldr	r5, [r4, #4]
 800336c:	2d00      	cmp	r5, #0
 800336e:	bfa8      	it	ge
 8003370:	6821      	ldrge	r1, [r4, #0]
 8003372:	60a5      	str	r5, [r4, #8]
 8003374:	bfa4      	itt	ge
 8003376:	f021 0104 	bicge.w	r1, r1, #4
 800337a:	6021      	strge	r1, [r4, #0]
 800337c:	b90e      	cbnz	r6, 8003382 <_printf_i+0x11a>
 800337e:	2d00      	cmp	r5, #0
 8003380:	d04d      	beq.n	800341e <_printf_i+0x1b6>
 8003382:	4615      	mov	r5, r2
 8003384:	fbb6 f1f3 	udiv	r1, r6, r3
 8003388:	fb03 6711 	mls	r7, r3, r1, r6
 800338c:	5dc7      	ldrb	r7, [r0, r7]
 800338e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003392:	4637      	mov	r7, r6
 8003394:	42bb      	cmp	r3, r7
 8003396:	460e      	mov	r6, r1
 8003398:	d9f4      	bls.n	8003384 <_printf_i+0x11c>
 800339a:	2b08      	cmp	r3, #8
 800339c:	d10b      	bne.n	80033b6 <_printf_i+0x14e>
 800339e:	6823      	ldr	r3, [r4, #0]
 80033a0:	07de      	lsls	r6, r3, #31
 80033a2:	d508      	bpl.n	80033b6 <_printf_i+0x14e>
 80033a4:	6923      	ldr	r3, [r4, #16]
 80033a6:	6861      	ldr	r1, [r4, #4]
 80033a8:	4299      	cmp	r1, r3
 80033aa:	bfde      	ittt	le
 80033ac:	2330      	movle	r3, #48	; 0x30
 80033ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80033b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80033b6:	1b52      	subs	r2, r2, r5
 80033b8:	6122      	str	r2, [r4, #16]
 80033ba:	464b      	mov	r3, r9
 80033bc:	4621      	mov	r1, r4
 80033be:	4640      	mov	r0, r8
 80033c0:	f8cd a000 	str.w	sl, [sp]
 80033c4:	aa03      	add	r2, sp, #12
 80033c6:	f7ff fedf 	bl	8003188 <_printf_common>
 80033ca:	3001      	adds	r0, #1
 80033cc:	d14c      	bne.n	8003468 <_printf_i+0x200>
 80033ce:	f04f 30ff 	mov.w	r0, #4294967295
 80033d2:	b004      	add	sp, #16
 80033d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033d8:	4834      	ldr	r0, [pc, #208]	; (80034ac <_printf_i+0x244>)
 80033da:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80033de:	6829      	ldr	r1, [r5, #0]
 80033e0:	6823      	ldr	r3, [r4, #0]
 80033e2:	f851 6b04 	ldr.w	r6, [r1], #4
 80033e6:	6029      	str	r1, [r5, #0]
 80033e8:	061d      	lsls	r5, r3, #24
 80033ea:	d514      	bpl.n	8003416 <_printf_i+0x1ae>
 80033ec:	07df      	lsls	r7, r3, #31
 80033ee:	bf44      	itt	mi
 80033f0:	f043 0320 	orrmi.w	r3, r3, #32
 80033f4:	6023      	strmi	r3, [r4, #0]
 80033f6:	b91e      	cbnz	r6, 8003400 <_printf_i+0x198>
 80033f8:	6823      	ldr	r3, [r4, #0]
 80033fa:	f023 0320 	bic.w	r3, r3, #32
 80033fe:	6023      	str	r3, [r4, #0]
 8003400:	2310      	movs	r3, #16
 8003402:	e7af      	b.n	8003364 <_printf_i+0xfc>
 8003404:	6823      	ldr	r3, [r4, #0]
 8003406:	f043 0320 	orr.w	r3, r3, #32
 800340a:	6023      	str	r3, [r4, #0]
 800340c:	2378      	movs	r3, #120	; 0x78
 800340e:	4828      	ldr	r0, [pc, #160]	; (80034b0 <_printf_i+0x248>)
 8003410:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003414:	e7e3      	b.n	80033de <_printf_i+0x176>
 8003416:	0659      	lsls	r1, r3, #25
 8003418:	bf48      	it	mi
 800341a:	b2b6      	uxthmi	r6, r6
 800341c:	e7e6      	b.n	80033ec <_printf_i+0x184>
 800341e:	4615      	mov	r5, r2
 8003420:	e7bb      	b.n	800339a <_printf_i+0x132>
 8003422:	682b      	ldr	r3, [r5, #0]
 8003424:	6826      	ldr	r6, [r4, #0]
 8003426:	1d18      	adds	r0, r3, #4
 8003428:	6961      	ldr	r1, [r4, #20]
 800342a:	6028      	str	r0, [r5, #0]
 800342c:	0635      	lsls	r5, r6, #24
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	d501      	bpl.n	8003436 <_printf_i+0x1ce>
 8003432:	6019      	str	r1, [r3, #0]
 8003434:	e002      	b.n	800343c <_printf_i+0x1d4>
 8003436:	0670      	lsls	r0, r6, #25
 8003438:	d5fb      	bpl.n	8003432 <_printf_i+0x1ca>
 800343a:	8019      	strh	r1, [r3, #0]
 800343c:	2300      	movs	r3, #0
 800343e:	4615      	mov	r5, r2
 8003440:	6123      	str	r3, [r4, #16]
 8003442:	e7ba      	b.n	80033ba <_printf_i+0x152>
 8003444:	682b      	ldr	r3, [r5, #0]
 8003446:	2100      	movs	r1, #0
 8003448:	1d1a      	adds	r2, r3, #4
 800344a:	602a      	str	r2, [r5, #0]
 800344c:	681d      	ldr	r5, [r3, #0]
 800344e:	6862      	ldr	r2, [r4, #4]
 8003450:	4628      	mov	r0, r5
 8003452:	f000 f82f 	bl	80034b4 <memchr>
 8003456:	b108      	cbz	r0, 800345c <_printf_i+0x1f4>
 8003458:	1b40      	subs	r0, r0, r5
 800345a:	6060      	str	r0, [r4, #4]
 800345c:	6863      	ldr	r3, [r4, #4]
 800345e:	6123      	str	r3, [r4, #16]
 8003460:	2300      	movs	r3, #0
 8003462:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003466:	e7a8      	b.n	80033ba <_printf_i+0x152>
 8003468:	462a      	mov	r2, r5
 800346a:	4649      	mov	r1, r9
 800346c:	4640      	mov	r0, r8
 800346e:	6923      	ldr	r3, [r4, #16]
 8003470:	47d0      	blx	sl
 8003472:	3001      	adds	r0, #1
 8003474:	d0ab      	beq.n	80033ce <_printf_i+0x166>
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	079b      	lsls	r3, r3, #30
 800347a:	d413      	bmi.n	80034a4 <_printf_i+0x23c>
 800347c:	68e0      	ldr	r0, [r4, #12]
 800347e:	9b03      	ldr	r3, [sp, #12]
 8003480:	4298      	cmp	r0, r3
 8003482:	bfb8      	it	lt
 8003484:	4618      	movlt	r0, r3
 8003486:	e7a4      	b.n	80033d2 <_printf_i+0x16a>
 8003488:	2301      	movs	r3, #1
 800348a:	4632      	mov	r2, r6
 800348c:	4649      	mov	r1, r9
 800348e:	4640      	mov	r0, r8
 8003490:	47d0      	blx	sl
 8003492:	3001      	adds	r0, #1
 8003494:	d09b      	beq.n	80033ce <_printf_i+0x166>
 8003496:	3501      	adds	r5, #1
 8003498:	68e3      	ldr	r3, [r4, #12]
 800349a:	9903      	ldr	r1, [sp, #12]
 800349c:	1a5b      	subs	r3, r3, r1
 800349e:	42ab      	cmp	r3, r5
 80034a0:	dcf2      	bgt.n	8003488 <_printf_i+0x220>
 80034a2:	e7eb      	b.n	800347c <_printf_i+0x214>
 80034a4:	2500      	movs	r5, #0
 80034a6:	f104 0619 	add.w	r6, r4, #25
 80034aa:	e7f5      	b.n	8003498 <_printf_i+0x230>
 80034ac:	0800383f 	.word	0x0800383f
 80034b0:	08003850 	.word	0x08003850

080034b4 <memchr>:
 80034b4:	4603      	mov	r3, r0
 80034b6:	b510      	push	{r4, lr}
 80034b8:	b2c9      	uxtb	r1, r1
 80034ba:	4402      	add	r2, r0
 80034bc:	4293      	cmp	r3, r2
 80034be:	4618      	mov	r0, r3
 80034c0:	d101      	bne.n	80034c6 <memchr+0x12>
 80034c2:	2000      	movs	r0, #0
 80034c4:	e003      	b.n	80034ce <memchr+0x1a>
 80034c6:	7804      	ldrb	r4, [r0, #0]
 80034c8:	3301      	adds	r3, #1
 80034ca:	428c      	cmp	r4, r1
 80034cc:	d1f6      	bne.n	80034bc <memchr+0x8>
 80034ce:	bd10      	pop	{r4, pc}

080034d0 <memcpy>:
 80034d0:	440a      	add	r2, r1
 80034d2:	4291      	cmp	r1, r2
 80034d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80034d8:	d100      	bne.n	80034dc <memcpy+0xc>
 80034da:	4770      	bx	lr
 80034dc:	b510      	push	{r4, lr}
 80034de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034e2:	4291      	cmp	r1, r2
 80034e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034e8:	d1f9      	bne.n	80034de <memcpy+0xe>
 80034ea:	bd10      	pop	{r4, pc}

080034ec <memmove>:
 80034ec:	4288      	cmp	r0, r1
 80034ee:	b510      	push	{r4, lr}
 80034f0:	eb01 0402 	add.w	r4, r1, r2
 80034f4:	d902      	bls.n	80034fc <memmove+0x10>
 80034f6:	4284      	cmp	r4, r0
 80034f8:	4623      	mov	r3, r4
 80034fa:	d807      	bhi.n	800350c <memmove+0x20>
 80034fc:	1e43      	subs	r3, r0, #1
 80034fe:	42a1      	cmp	r1, r4
 8003500:	d008      	beq.n	8003514 <memmove+0x28>
 8003502:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003506:	f803 2f01 	strb.w	r2, [r3, #1]!
 800350a:	e7f8      	b.n	80034fe <memmove+0x12>
 800350c:	4601      	mov	r1, r0
 800350e:	4402      	add	r2, r0
 8003510:	428a      	cmp	r2, r1
 8003512:	d100      	bne.n	8003516 <memmove+0x2a>
 8003514:	bd10      	pop	{r4, pc}
 8003516:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800351a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800351e:	e7f7      	b.n	8003510 <memmove+0x24>

08003520 <_free_r>:
 8003520:	b538      	push	{r3, r4, r5, lr}
 8003522:	4605      	mov	r5, r0
 8003524:	2900      	cmp	r1, #0
 8003526:	d040      	beq.n	80035aa <_free_r+0x8a>
 8003528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800352c:	1f0c      	subs	r4, r1, #4
 800352e:	2b00      	cmp	r3, #0
 8003530:	bfb8      	it	lt
 8003532:	18e4      	addlt	r4, r4, r3
 8003534:	f000 f910 	bl	8003758 <__malloc_lock>
 8003538:	4a1c      	ldr	r2, [pc, #112]	; (80035ac <_free_r+0x8c>)
 800353a:	6813      	ldr	r3, [r2, #0]
 800353c:	b933      	cbnz	r3, 800354c <_free_r+0x2c>
 800353e:	6063      	str	r3, [r4, #4]
 8003540:	6014      	str	r4, [r2, #0]
 8003542:	4628      	mov	r0, r5
 8003544:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003548:	f000 b90c 	b.w	8003764 <__malloc_unlock>
 800354c:	42a3      	cmp	r3, r4
 800354e:	d908      	bls.n	8003562 <_free_r+0x42>
 8003550:	6820      	ldr	r0, [r4, #0]
 8003552:	1821      	adds	r1, r4, r0
 8003554:	428b      	cmp	r3, r1
 8003556:	bf01      	itttt	eq
 8003558:	6819      	ldreq	r1, [r3, #0]
 800355a:	685b      	ldreq	r3, [r3, #4]
 800355c:	1809      	addeq	r1, r1, r0
 800355e:	6021      	streq	r1, [r4, #0]
 8003560:	e7ed      	b.n	800353e <_free_r+0x1e>
 8003562:	461a      	mov	r2, r3
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	b10b      	cbz	r3, 800356c <_free_r+0x4c>
 8003568:	42a3      	cmp	r3, r4
 800356a:	d9fa      	bls.n	8003562 <_free_r+0x42>
 800356c:	6811      	ldr	r1, [r2, #0]
 800356e:	1850      	adds	r0, r2, r1
 8003570:	42a0      	cmp	r0, r4
 8003572:	d10b      	bne.n	800358c <_free_r+0x6c>
 8003574:	6820      	ldr	r0, [r4, #0]
 8003576:	4401      	add	r1, r0
 8003578:	1850      	adds	r0, r2, r1
 800357a:	4283      	cmp	r3, r0
 800357c:	6011      	str	r1, [r2, #0]
 800357e:	d1e0      	bne.n	8003542 <_free_r+0x22>
 8003580:	6818      	ldr	r0, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	4401      	add	r1, r0
 8003586:	6011      	str	r1, [r2, #0]
 8003588:	6053      	str	r3, [r2, #4]
 800358a:	e7da      	b.n	8003542 <_free_r+0x22>
 800358c:	d902      	bls.n	8003594 <_free_r+0x74>
 800358e:	230c      	movs	r3, #12
 8003590:	602b      	str	r3, [r5, #0]
 8003592:	e7d6      	b.n	8003542 <_free_r+0x22>
 8003594:	6820      	ldr	r0, [r4, #0]
 8003596:	1821      	adds	r1, r4, r0
 8003598:	428b      	cmp	r3, r1
 800359a:	bf01      	itttt	eq
 800359c:	6819      	ldreq	r1, [r3, #0]
 800359e:	685b      	ldreq	r3, [r3, #4]
 80035a0:	1809      	addeq	r1, r1, r0
 80035a2:	6021      	streq	r1, [r4, #0]
 80035a4:	6063      	str	r3, [r4, #4]
 80035a6:	6054      	str	r4, [r2, #4]
 80035a8:	e7cb      	b.n	8003542 <_free_r+0x22>
 80035aa:	bd38      	pop	{r3, r4, r5, pc}
 80035ac:	20000168 	.word	0x20000168

080035b0 <sbrk_aligned>:
 80035b0:	b570      	push	{r4, r5, r6, lr}
 80035b2:	4e0e      	ldr	r6, [pc, #56]	; (80035ec <sbrk_aligned+0x3c>)
 80035b4:	460c      	mov	r4, r1
 80035b6:	6831      	ldr	r1, [r6, #0]
 80035b8:	4605      	mov	r5, r0
 80035ba:	b911      	cbnz	r1, 80035c2 <sbrk_aligned+0x12>
 80035bc:	f000 f8bc 	bl	8003738 <_sbrk_r>
 80035c0:	6030      	str	r0, [r6, #0]
 80035c2:	4621      	mov	r1, r4
 80035c4:	4628      	mov	r0, r5
 80035c6:	f000 f8b7 	bl	8003738 <_sbrk_r>
 80035ca:	1c43      	adds	r3, r0, #1
 80035cc:	d00a      	beq.n	80035e4 <sbrk_aligned+0x34>
 80035ce:	1cc4      	adds	r4, r0, #3
 80035d0:	f024 0403 	bic.w	r4, r4, #3
 80035d4:	42a0      	cmp	r0, r4
 80035d6:	d007      	beq.n	80035e8 <sbrk_aligned+0x38>
 80035d8:	1a21      	subs	r1, r4, r0
 80035da:	4628      	mov	r0, r5
 80035dc:	f000 f8ac 	bl	8003738 <_sbrk_r>
 80035e0:	3001      	adds	r0, #1
 80035e2:	d101      	bne.n	80035e8 <sbrk_aligned+0x38>
 80035e4:	f04f 34ff 	mov.w	r4, #4294967295
 80035e8:	4620      	mov	r0, r4
 80035ea:	bd70      	pop	{r4, r5, r6, pc}
 80035ec:	2000016c 	.word	0x2000016c

080035f0 <_malloc_r>:
 80035f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035f4:	1ccd      	adds	r5, r1, #3
 80035f6:	f025 0503 	bic.w	r5, r5, #3
 80035fa:	3508      	adds	r5, #8
 80035fc:	2d0c      	cmp	r5, #12
 80035fe:	bf38      	it	cc
 8003600:	250c      	movcc	r5, #12
 8003602:	2d00      	cmp	r5, #0
 8003604:	4607      	mov	r7, r0
 8003606:	db01      	blt.n	800360c <_malloc_r+0x1c>
 8003608:	42a9      	cmp	r1, r5
 800360a:	d905      	bls.n	8003618 <_malloc_r+0x28>
 800360c:	230c      	movs	r3, #12
 800360e:	2600      	movs	r6, #0
 8003610:	603b      	str	r3, [r7, #0]
 8003612:	4630      	mov	r0, r6
 8003614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003618:	4e2e      	ldr	r6, [pc, #184]	; (80036d4 <_malloc_r+0xe4>)
 800361a:	f000 f89d 	bl	8003758 <__malloc_lock>
 800361e:	6833      	ldr	r3, [r6, #0]
 8003620:	461c      	mov	r4, r3
 8003622:	bb34      	cbnz	r4, 8003672 <_malloc_r+0x82>
 8003624:	4629      	mov	r1, r5
 8003626:	4638      	mov	r0, r7
 8003628:	f7ff ffc2 	bl	80035b0 <sbrk_aligned>
 800362c:	1c43      	adds	r3, r0, #1
 800362e:	4604      	mov	r4, r0
 8003630:	d14d      	bne.n	80036ce <_malloc_r+0xde>
 8003632:	6834      	ldr	r4, [r6, #0]
 8003634:	4626      	mov	r6, r4
 8003636:	2e00      	cmp	r6, #0
 8003638:	d140      	bne.n	80036bc <_malloc_r+0xcc>
 800363a:	6823      	ldr	r3, [r4, #0]
 800363c:	4631      	mov	r1, r6
 800363e:	4638      	mov	r0, r7
 8003640:	eb04 0803 	add.w	r8, r4, r3
 8003644:	f000 f878 	bl	8003738 <_sbrk_r>
 8003648:	4580      	cmp	r8, r0
 800364a:	d13a      	bne.n	80036c2 <_malloc_r+0xd2>
 800364c:	6821      	ldr	r1, [r4, #0]
 800364e:	3503      	adds	r5, #3
 8003650:	1a6d      	subs	r5, r5, r1
 8003652:	f025 0503 	bic.w	r5, r5, #3
 8003656:	3508      	adds	r5, #8
 8003658:	2d0c      	cmp	r5, #12
 800365a:	bf38      	it	cc
 800365c:	250c      	movcc	r5, #12
 800365e:	4638      	mov	r0, r7
 8003660:	4629      	mov	r1, r5
 8003662:	f7ff ffa5 	bl	80035b0 <sbrk_aligned>
 8003666:	3001      	adds	r0, #1
 8003668:	d02b      	beq.n	80036c2 <_malloc_r+0xd2>
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	442b      	add	r3, r5
 800366e:	6023      	str	r3, [r4, #0]
 8003670:	e00e      	b.n	8003690 <_malloc_r+0xa0>
 8003672:	6822      	ldr	r2, [r4, #0]
 8003674:	1b52      	subs	r2, r2, r5
 8003676:	d41e      	bmi.n	80036b6 <_malloc_r+0xc6>
 8003678:	2a0b      	cmp	r2, #11
 800367a:	d916      	bls.n	80036aa <_malloc_r+0xba>
 800367c:	1961      	adds	r1, r4, r5
 800367e:	42a3      	cmp	r3, r4
 8003680:	6025      	str	r5, [r4, #0]
 8003682:	bf18      	it	ne
 8003684:	6059      	strne	r1, [r3, #4]
 8003686:	6863      	ldr	r3, [r4, #4]
 8003688:	bf08      	it	eq
 800368a:	6031      	streq	r1, [r6, #0]
 800368c:	5162      	str	r2, [r4, r5]
 800368e:	604b      	str	r3, [r1, #4]
 8003690:	4638      	mov	r0, r7
 8003692:	f104 060b 	add.w	r6, r4, #11
 8003696:	f000 f865 	bl	8003764 <__malloc_unlock>
 800369a:	f026 0607 	bic.w	r6, r6, #7
 800369e:	1d23      	adds	r3, r4, #4
 80036a0:	1af2      	subs	r2, r6, r3
 80036a2:	d0b6      	beq.n	8003612 <_malloc_r+0x22>
 80036a4:	1b9b      	subs	r3, r3, r6
 80036a6:	50a3      	str	r3, [r4, r2]
 80036a8:	e7b3      	b.n	8003612 <_malloc_r+0x22>
 80036aa:	6862      	ldr	r2, [r4, #4]
 80036ac:	42a3      	cmp	r3, r4
 80036ae:	bf0c      	ite	eq
 80036b0:	6032      	streq	r2, [r6, #0]
 80036b2:	605a      	strne	r2, [r3, #4]
 80036b4:	e7ec      	b.n	8003690 <_malloc_r+0xa0>
 80036b6:	4623      	mov	r3, r4
 80036b8:	6864      	ldr	r4, [r4, #4]
 80036ba:	e7b2      	b.n	8003622 <_malloc_r+0x32>
 80036bc:	4634      	mov	r4, r6
 80036be:	6876      	ldr	r6, [r6, #4]
 80036c0:	e7b9      	b.n	8003636 <_malloc_r+0x46>
 80036c2:	230c      	movs	r3, #12
 80036c4:	4638      	mov	r0, r7
 80036c6:	603b      	str	r3, [r7, #0]
 80036c8:	f000 f84c 	bl	8003764 <__malloc_unlock>
 80036cc:	e7a1      	b.n	8003612 <_malloc_r+0x22>
 80036ce:	6025      	str	r5, [r4, #0]
 80036d0:	e7de      	b.n	8003690 <_malloc_r+0xa0>
 80036d2:	bf00      	nop
 80036d4:	20000168 	.word	0x20000168

080036d8 <_realloc_r>:
 80036d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036dc:	4680      	mov	r8, r0
 80036de:	4614      	mov	r4, r2
 80036e0:	460e      	mov	r6, r1
 80036e2:	b921      	cbnz	r1, 80036ee <_realloc_r+0x16>
 80036e4:	4611      	mov	r1, r2
 80036e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036ea:	f7ff bf81 	b.w	80035f0 <_malloc_r>
 80036ee:	b92a      	cbnz	r2, 80036fc <_realloc_r+0x24>
 80036f0:	f7ff ff16 	bl	8003520 <_free_r>
 80036f4:	4625      	mov	r5, r4
 80036f6:	4628      	mov	r0, r5
 80036f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036fc:	f000 f838 	bl	8003770 <_malloc_usable_size_r>
 8003700:	4284      	cmp	r4, r0
 8003702:	4607      	mov	r7, r0
 8003704:	d802      	bhi.n	800370c <_realloc_r+0x34>
 8003706:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800370a:	d812      	bhi.n	8003732 <_realloc_r+0x5a>
 800370c:	4621      	mov	r1, r4
 800370e:	4640      	mov	r0, r8
 8003710:	f7ff ff6e 	bl	80035f0 <_malloc_r>
 8003714:	4605      	mov	r5, r0
 8003716:	2800      	cmp	r0, #0
 8003718:	d0ed      	beq.n	80036f6 <_realloc_r+0x1e>
 800371a:	42bc      	cmp	r4, r7
 800371c:	4622      	mov	r2, r4
 800371e:	4631      	mov	r1, r6
 8003720:	bf28      	it	cs
 8003722:	463a      	movcs	r2, r7
 8003724:	f7ff fed4 	bl	80034d0 <memcpy>
 8003728:	4631      	mov	r1, r6
 800372a:	4640      	mov	r0, r8
 800372c:	f7ff fef8 	bl	8003520 <_free_r>
 8003730:	e7e1      	b.n	80036f6 <_realloc_r+0x1e>
 8003732:	4635      	mov	r5, r6
 8003734:	e7df      	b.n	80036f6 <_realloc_r+0x1e>
	...

08003738 <_sbrk_r>:
 8003738:	b538      	push	{r3, r4, r5, lr}
 800373a:	2300      	movs	r3, #0
 800373c:	4d05      	ldr	r5, [pc, #20]	; (8003754 <_sbrk_r+0x1c>)
 800373e:	4604      	mov	r4, r0
 8003740:	4608      	mov	r0, r1
 8003742:	602b      	str	r3, [r5, #0]
 8003744:	f7fd fbde 	bl	8000f04 <_sbrk>
 8003748:	1c43      	adds	r3, r0, #1
 800374a:	d102      	bne.n	8003752 <_sbrk_r+0x1a>
 800374c:	682b      	ldr	r3, [r5, #0]
 800374e:	b103      	cbz	r3, 8003752 <_sbrk_r+0x1a>
 8003750:	6023      	str	r3, [r4, #0]
 8003752:	bd38      	pop	{r3, r4, r5, pc}
 8003754:	20000170 	.word	0x20000170

08003758 <__malloc_lock>:
 8003758:	4801      	ldr	r0, [pc, #4]	; (8003760 <__malloc_lock+0x8>)
 800375a:	f000 b811 	b.w	8003780 <__retarget_lock_acquire_recursive>
 800375e:	bf00      	nop
 8003760:	20000174 	.word	0x20000174

08003764 <__malloc_unlock>:
 8003764:	4801      	ldr	r0, [pc, #4]	; (800376c <__malloc_unlock+0x8>)
 8003766:	f000 b80c 	b.w	8003782 <__retarget_lock_release_recursive>
 800376a:	bf00      	nop
 800376c:	20000174 	.word	0x20000174

08003770 <_malloc_usable_size_r>:
 8003770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003774:	1f18      	subs	r0, r3, #4
 8003776:	2b00      	cmp	r3, #0
 8003778:	bfbc      	itt	lt
 800377a:	580b      	ldrlt	r3, [r1, r0]
 800377c:	18c0      	addlt	r0, r0, r3
 800377e:	4770      	bx	lr

08003780 <__retarget_lock_acquire_recursive>:
 8003780:	4770      	bx	lr

08003782 <__retarget_lock_release_recursive>:
 8003782:	4770      	bx	lr

08003784 <_init>:
 8003784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003786:	bf00      	nop
 8003788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800378a:	bc08      	pop	{r3}
 800378c:	469e      	mov	lr, r3
 800378e:	4770      	bx	lr

08003790 <_fini>:
 8003790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003792:	bf00      	nop
 8003794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003796:	bc08      	pop	{r3}
 8003798:	469e      	mov	lr, r3
 800379a:	4770      	bx	lr
