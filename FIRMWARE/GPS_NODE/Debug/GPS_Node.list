
GPS_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006904  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08006a18  08006a18  00016a18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bd0  08006bd0  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08006bd0  08006bd0  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006bd0  08006bd0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bd0  08006bd0  00016bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bd4  08006bd4  00016bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006bd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011bc  20000080  08006c58  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000123c  08006c58  0002123c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015df6  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a73  00000000  00000000  00035e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  00039918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f8  00000000  00000000  0003adb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bd0a  00000000  00000000  0003c0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d84  00000000  00000000  00057dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a865  00000000  00000000  00070b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010b3a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e34  00000000  00000000  0010b3f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      0000004e  00000000  00000000  00111228  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	080069fc 	.word	0x080069fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	080069fc 	.word	0x080069fc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d94:	4b20      	ldr	r3, [pc, #128]	; (8000e18 <MX_ADC1_Init+0x94>)
 8000d96:	4a21      	ldr	r2, [pc, #132]	; (8000e1c <MX_ADC1_Init+0x98>)
 8000d98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d9a:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <MX_ADC1_Init+0x94>)
 8000d9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000da0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000da2:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <MX_ADC1_Init+0x94>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <MX_ADC1_Init+0x94>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dae:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <MX_ADC1_Init+0x94>)
 8000db0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000db4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <MX_ADC1_Init+0x94>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000dbc:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <MX_ADC1_Init+0x94>)
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dc2:	4815      	ldr	r0, [pc, #84]	; (8000e18 <MX_ADC1_Init+0x94>)
 8000dc4:	f000 ff0c 	bl	8001be0 <HAL_ADC_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000dce:	f000 fc75 	bl	80016bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000dda:	2307      	movs	r3, #7
 8000ddc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	4619      	mov	r1, r3
 8000de2:	480d      	ldr	r0, [pc, #52]	; (8000e18 <MX_ADC1_Init+0x94>)
 8000de4:	f001 f91a 	bl	800201c <HAL_ADC_ConfigChannel>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000dee:	f000 fc65 	bl	80016bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000df2:	2311      	movs	r3, #17
 8000df4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000df6:	2302      	movs	r3, #2
 8000df8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4806      	ldr	r0, [pc, #24]	; (8000e18 <MX_ADC1_Init+0x94>)
 8000e00:	f001 f90c 	bl	800201c <HAL_ADC_ConfigChannel>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000e0a:	f000 fc57 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	2000009c 	.word	0x2000009c
 8000e1c:	40012400 	.word	0x40012400

08000e20 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a28      	ldr	r2, [pc, #160]	; (8000edc <HAL_ADC_MspInit+0xbc>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d149      	bne.n	8000ed4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e40:	4b27      	ldr	r3, [pc, #156]	; (8000ee0 <HAL_ADC_MspInit+0xc0>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a26      	ldr	r2, [pc, #152]	; (8000ee0 <HAL_ADC_MspInit+0xc0>)
 8000e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e4a:	6193      	str	r3, [r2, #24]
 8000e4c:	4b24      	ldr	r3, [pc, #144]	; (8000ee0 <HAL_ADC_MspInit+0xc0>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e58:	4b21      	ldr	r3, [pc, #132]	; (8000ee0 <HAL_ADC_MspInit+0xc0>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	4a20      	ldr	r2, [pc, #128]	; (8000ee0 <HAL_ADC_MspInit+0xc0>)
 8000e5e:	f043 0304 	orr.w	r3, r3, #4
 8000e62:	6193      	str	r3, [r2, #24]
 8000e64:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <HAL_ADC_MspInit+0xc0>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	f003 0304 	and.w	r3, r3, #4
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e70:	2302      	movs	r3, #2
 8000e72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e74:	2303      	movs	r3, #3
 8000e76:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	f107 0310 	add.w	r3, r7, #16
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4819      	ldr	r0, [pc, #100]	; (8000ee4 <HAL_ADC_MspInit+0xc4>)
 8000e80:	f001 fdd0 	bl	8002a24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e84:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <HAL_ADC_MspInit+0xc8>)
 8000e86:	4a19      	ldr	r2, [pc, #100]	; (8000eec <HAL_ADC_MspInit+0xcc>)
 8000e88:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e8a:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <HAL_ADC_MspInit+0xc8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e90:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <HAL_ADC_MspInit+0xc8>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e96:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <HAL_ADC_MspInit+0xc8>)
 8000e98:	2280      	movs	r2, #128	; 0x80
 8000e9a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_ADC_MspInit+0xc8>)
 8000e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ea2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ea4:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <HAL_ADC_MspInit+0xc8>)
 8000ea6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000eaa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000eac:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <HAL_ADC_MspInit+0xc8>)
 8000eae:	2220      	movs	r2, #32
 8000eb0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <HAL_ADC_MspInit+0xc8>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000eb8:	480b      	ldr	r0, [pc, #44]	; (8000ee8 <HAL_ADC_MspInit+0xc8>)
 8000eba:	f001 fb89 	bl	80025d0 <HAL_DMA_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000ec4:	f000 fbfa 	bl	80016bc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <HAL_ADC_MspInit+0xc8>)
 8000ecc:	621a      	str	r2, [r3, #32]
 8000ece:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <HAL_ADC_MspInit+0xc8>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	3720      	adds	r7, #32
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40012400 	.word	0x40012400
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40010800 	.word	0x40010800
 8000ee8:	200000cc 	.word	0x200000cc
 8000eec:	40020008 	.word	0x40020008

08000ef0 <LOG>:
#include "common.h"

extern UART_HandleTypeDef huart1;

void LOG(const char *TAG, char *data)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b09c      	sub	sp, #112	; 0x70
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
	char data_log[100] = {0};
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	f107 0310 	add.w	r3, r7, #16
 8000f02:	2260      	movs	r2, #96	; 0x60
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f004 fa22 	bl	8005350 <memset>
	sprintf(data_log, "%s: %s\r\n", TAG, data);
 8000f0c:	f107 000c 	add.w	r0, r7, #12
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	490a      	ldr	r1, [pc, #40]	; (8000f40 <LOG+0x50>)
 8000f16:	f004 fa23 	bl	8005360 <siprintf>
	HAL_UART_Transmit(&huart1, data_log, strlen(data_log), 1000);
 8000f1a:	f107 030c 	add.w	r3, r7, #12
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff f916 	bl	8000150 <strlen>
 8000f24:	4603      	mov	r3, r0
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	f107 010c 	add.w	r1, r7, #12
 8000f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f30:	4804      	ldr	r0, [pc, #16]	; (8000f44 <LOG+0x54>)
 8000f32:	f002 ff63 	bl	8003dfc <HAL_UART_Transmit>
}
 8000f36:	bf00      	nop
 8000f38:	3770      	adds	r7, #112	; 0x70
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	08006a18 	.word	0x08006a18
 8000f44:	20000494 	.word	0x20000494

08000f48 <reverse>:

void reverse(char *str, int len)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b087      	sub	sp, #28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	613b      	str	r3, [r7, #16]
    while (i < j)
 8000f5c:	e018      	b.n	8000f90 <reverse+0x48>
    {
        temp = str[i];
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	4413      	add	r3, r2
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	441a      	add	r2, r3
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	440b      	add	r3, r1
 8000f74:	7812      	ldrb	r2, [r2, #0]
 8000f76:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	701a      	strb	r2, [r3, #0]
        i++;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	3301      	adds	r3, #1
 8000f88:	617b      	str	r3, [r7, #20]
        j--;
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	613b      	str	r3, [r7, #16]
    while (i < j)
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	dbe2      	blt.n	8000f5e <reverse+0x16>
    }
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	371c      	adds	r7, #28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <intToStr>:

int intToStr(int x, char str[], int d)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
    int i = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
    if(x == 0)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d126      	bne.n	8001008 <intToStr+0x64>
        str[i++] = '0';
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	1c5a      	adds	r2, r3, #1
 8000fbe:	617a      	str	r2, [r7, #20]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	2230      	movs	r2, #48	; 0x30
 8000fc8:	701a      	strb	r2, [r3, #0]

    while (x)
 8000fca:	e01d      	b.n	8001008 <intToStr+0x64>
    {
        str[i++] = (x % 10) + '0';
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <intToStr+0xa0>)
 8000fd0:	fb83 1302 	smull	r1, r3, r3, r2
 8000fd4:	1099      	asrs	r1, r3, #2
 8000fd6:	17d3      	asrs	r3, r2, #31
 8000fd8:	1ac9      	subs	r1, r1, r3
 8000fda:	460b      	mov	r3, r1
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	440b      	add	r3, r1
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	1ad1      	subs	r1, r2, r3
 8000fe4:	b2ca      	uxtb	r2, r1
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	1c59      	adds	r1, r3, #1
 8000fea:	6179      	str	r1, [r7, #20]
 8000fec:	4619      	mov	r1, r3
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	440b      	add	r3, r1
 8000ff2:	3230      	adds	r2, #48	; 0x30
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4a12      	ldr	r2, [pc, #72]	; (8001044 <intToStr+0xa0>)
 8000ffc:	fb82 1203 	smull	r1, r2, r2, r3
 8001000:	1092      	asrs	r2, r2, #2
 8001002:	17db      	asrs	r3, r3, #31
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	60fb      	str	r3, [r7, #12]
    while (x)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1de      	bne.n	8000fcc <intToStr+0x28>
    }

    while (i < d)
 800100e:	e007      	b.n	8001020 <intToStr+0x7c>
        str[i++] = '0';
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	1c5a      	adds	r2, r3, #1
 8001014:	617a      	str	r2, [r7, #20]
 8001016:	461a      	mov	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	4413      	add	r3, r2
 800101c:	2230      	movs	r2, #48	; 0x30
 800101e:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	429a      	cmp	r2, r3
 8001026:	dbf3      	blt.n	8001010 <intToStr+0x6c>

    reverse(str, i);
 8001028:	6979      	ldr	r1, [r7, #20]
 800102a:	68b8      	ldr	r0, [r7, #8]
 800102c:	f7ff ff8c 	bl	8000f48 <reverse>
    str[i] = '\0';
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	4413      	add	r3, r2
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
    return i;
 800103a:	697b      	ldr	r3, [r7, #20]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	66666667 	.word	0x66666667

08001048 <ftoa>:

void ftoa(double n, char* res, int afterpoint)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	; 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	603b      	str	r3, [r7, #0]
    int ipart = (int)n;
 8001056:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800105a:	f7ff fced 	bl	8000a38 <__aeabi_d2iz>
 800105e:	4603      	mov	r3, r0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
    double fpart = n - (double)ipart;
 8001062:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001064:	f7ff f9ce 	bl	8000404 <__aeabi_i2d>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001070:	f7ff f87a 	bl	8000168 <__aeabi_dsub>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int i = intToStr(ipart, res, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001082:	f7ff ff8f 	bl	8000fa4 <intToStr>
 8001086:	6178      	str	r0, [r7, #20]
    if (afterpoint != 0)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d024      	beq.n	80010d8 <ftoa+0x90>
    {
        res[i] = '.';
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	4413      	add	r3, r2
 8001094:	222e      	movs	r2, #46	; 0x2e
 8001096:	701a      	strb	r2, [r3, #0]
        fpart = fpart * pow(10, afterpoint);
 8001098:	6838      	ldr	r0, [r7, #0]
 800109a:	f7ff f9b3 	bl	8000404 <__aeabi_i2d>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	f04f 0000 	mov.w	r0, #0
 80010a6:	490e      	ldr	r1, [pc, #56]	; (80010e0 <ftoa+0x98>)
 80010a8:	f004 fdc6 	bl	8005c38 <pow>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010b4:	f7ff fa10 	bl	80004d8 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
        intToStr((int)fpart, res + i + 1, afterpoint);
 80010c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010c4:	f7ff fcb8 	bl	8000a38 <__aeabi_d2iz>
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	3301      	adds	r3, #1
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	4413      	add	r3, r2
 80010d0:	683a      	ldr	r2, [r7, #0]
 80010d2:	4619      	mov	r1, r3
 80010d4:	f7ff ff66 	bl	8000fa4 <intToStr>
    }
}
 80010d8:	bf00      	nop
 80010da:	3728      	adds	r7, #40	; 0x28
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40240000 	.word	0x40240000

080010e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <MX_DMA_Init+0x38>)
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <MX_DMA_Init+0x38>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6153      	str	r3, [r2, #20]
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_DMA_Init+0x38>)
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2105      	movs	r1, #5
 8001106:	200b      	movs	r0, #11
 8001108:	f001 fa37 	bl	800257a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800110c:	200b      	movs	r0, #11
 800110e:	f001 fa50 	bl	80025b2 <HAL_NVIC_EnableIRQ>

}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000

08001120 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4a06      	ldr	r2, [pc, #24]	; (8001148 <vApplicationGetIdleTaskMemory+0x28>)
 8001130:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	4a05      	ldr	r2, [pc, #20]	; (800114c <vApplicationGetIdleTaskMemory+0x2c>)
 8001136:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2280      	movs	r2, #128	; 0x80
 800113c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	20000114 	.word	0x20000114
 800114c:	20000168 	.word	0x20000168

08001150 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 8001150:	b5b0      	push	{r4, r5, r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af02      	add	r7, sp, #8
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <MX_FREERTOS_Init+0x5c>)
 8001158:	1d3c      	adds	r4, r7, #4
 800115a:	461d      	mov	r5, r3
 800115c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800115e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001160:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001164:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f002 ffe3 	bl	8004138 <osThreadCreate>
 8001172:	4603      	mov	r3, r0
 8001174:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <MX_FREERTOS_Init+0x60>)
 8001176:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate((TaskFunction_t)(&peripheral_task), "PERIPHERAL", 256, NULL, 10, NULL);
 8001178:	2300      	movs	r3, #0
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	230a      	movs	r3, #10
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2300      	movs	r3, #0
 8001182:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001186:	490b      	ldr	r1, [pc, #44]	; (80011b4 <MX_FREERTOS_Init+0x64>)
 8001188:	480b      	ldr	r0, [pc, #44]	; (80011b8 <MX_FREERTOS_Init+0x68>)
 800118a:	f003 f8f4 	bl	8004376 <xTaskCreate>
  xTaskCreate((TaskFunction_t)(&sx1278_task), "SX1278", 256, NULL, 9, NULL);
 800118e:	2300      	movs	r3, #0
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	2309      	movs	r3, #9
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2300      	movs	r3, #0
 8001198:	f44f 7280 	mov.w	r2, #256	; 0x100
 800119c:	4907      	ldr	r1, [pc, #28]	; (80011bc <MX_FREERTOS_Init+0x6c>)
 800119e:	4808      	ldr	r0, [pc, #32]	; (80011c0 <MX_FREERTOS_Init+0x70>)
 80011a0:	f003 f8e9 	bl	8004376 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */
}
 80011a4:	bf00      	nop
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bdb0      	pop	{r4, r5, r7, pc}
 80011ac:	08006a50 	.word	0x08006a50
 80011b0:	20000110 	.word	0x20000110
 80011b4:	08006a3c 	.word	0x08006a3c
 80011b8:	08001201 	.word	0x08001201
 80011bc:	08006a48 	.word	0x08006a48
 80011c0:	0800140d 	.word	0x0800140d

080011c4 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  char data_log[20];
  sprintf(data_log, "Default task");
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	4908      	ldr	r1, [pc, #32]	; (80011f4 <StartDefaultTask+0x30>)
 80011d2:	4618      	mov	r0, r3
 80011d4:	f004 f8c4 	bl	8005360 <siprintf>

  /* Infinite loop */
  for (;;)
  {
    LOG(TAG, data_log);
 80011d8:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <StartDefaultTask+0x34>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f107 020c 	add.w	r2, r7, #12
 80011e0:	4611      	mov	r1, r2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fe84 	bl	8000ef0 <LOG>
    HAL_Delay(1000);
 80011e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ec:	f000 fcd4 	bl	8001b98 <HAL_Delay>
    LOG(TAG, data_log);
 80011f0:	e7f2      	b.n	80011d8 <StartDefaultTask+0x14>
 80011f2:	bf00      	nop
 80011f4:	08006a6c 	.word	0x08006a6c
 80011f8:	20000000 	.word	0x20000000
 80011fc:	00000000 	.word	0x00000000

08001200 <peripheral_task>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void peripheral_task(void const *arg)
{
 8001200:	b5b0      	push	{r4, r5, r7, lr}
 8001202:	b08e      	sub	sp, #56	; 0x38
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  static uint32_t adc_val[22] = {0};
  static uint16_t ADC_VREF_mV = 3300;
  static float battery = 0;
  char data_log[40];

  memset(data_log, 0, 40 * sizeof(char));
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	2228      	movs	r2, #40	; 0x28
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f004 f89d 	bl	8005350 <memset>
  sprintf(data_log, "Peripheral task");
 8001216:	f107 030c 	add.w	r3, r7, #12
 800121a:	4971      	ldr	r1, [pc, #452]	; (80013e0 <peripheral_task+0x1e0>)
 800121c:	4618      	mov	r0, r3
 800121e:	f004 f89f 	bl	8005360 <siprintf>
  LOG(TAG, data_log);
 8001222:	4b70      	ldr	r3, [pc, #448]	; (80013e4 <peripheral_task+0x1e4>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f107 020c 	add.w	r2, r7, #12
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fe5f 	bl	8000ef0 <LOG>

  volatile uint32_t time_keeper_1 = HAL_GetTick();
 8001232:	f000 fca7 	bl	8001b84 <HAL_GetTick>
 8001236:	4603      	mov	r3, r0
 8001238:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for (;;)
  {
    HAL_ADC_Start_DMA(&hadc1, adc_val, 20);
 800123a:	2214      	movs	r2, #20
 800123c:	496a      	ldr	r1, [pc, #424]	; (80013e8 <peripheral_task+0x1e8>)
 800123e:	486b      	ldr	r0, [pc, #428]	; (80013ec <peripheral_task+0x1ec>)
 8001240:	f000 fda6 	bl	8001d90 <HAL_ADC_Start_DMA>
    time_keeper_1 = HAL_GetTick();
 8001244:	f000 fc9e 	bl	8001b84 <HAL_GetTick>
 8001248:	4603      	mov	r3, r0
 800124a:	60bb      	str	r3, [r7, #8]
    while ((HAL_GetTick() - time_keeper_1) <= 3000)
 800124c:	e0a5      	b.n	800139a <peripheral_task+0x19a>
    {
      adc_val[20] = 0;
 800124e:	4b66      	ldr	r3, [pc, #408]	; (80013e8 <peripheral_task+0x1e8>)
 8001250:	2200      	movs	r2, #0
 8001252:	651a      	str	r2, [r3, #80]	; 0x50
      adc_val[21] = 0;
 8001254:	4b64      	ldr	r3, [pc, #400]	; (80013e8 <peripheral_task+0x1e8>)
 8001256:	2200      	movs	r2, #0
 8001258:	655a      	str	r2, [r3, #84]	; 0x54
      for (uint8_t i = 0; i < 20; i += 2)
 800125a:	2300      	movs	r3, #0
 800125c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001260:	e019      	b.n	8001296 <peripheral_task+0x96>
      {
        adc_val[20] += adc_val[i];
 8001262:	4b61      	ldr	r3, [pc, #388]	; (80013e8 <peripheral_task+0x1e8>)
 8001264:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001266:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800126a:	495f      	ldr	r1, [pc, #380]	; (80013e8 <peripheral_task+0x1e8>)
 800126c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001270:	4413      	add	r3, r2
 8001272:	4a5d      	ldr	r2, [pc, #372]	; (80013e8 <peripheral_task+0x1e8>)
 8001274:	6513      	str	r3, [r2, #80]	; 0x50
        adc_val[21] += adc_val[i + 1];
 8001276:	4b5c      	ldr	r3, [pc, #368]	; (80013e8 <peripheral_task+0x1e8>)
 8001278:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800127a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800127e:	3301      	adds	r3, #1
 8001280:	4959      	ldr	r1, [pc, #356]	; (80013e8 <peripheral_task+0x1e8>)
 8001282:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001286:	4413      	add	r3, r2
 8001288:	4a57      	ldr	r2, [pc, #348]	; (80013e8 <peripheral_task+0x1e8>)
 800128a:	6553      	str	r3, [r2, #84]	; 0x54
      for (uint8_t i = 0; i < 20; i += 2)
 800128c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001290:	3302      	adds	r3, #2
 8001292:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001296:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800129a:	2b13      	cmp	r3, #19
 800129c:	d9e1      	bls.n	8001262 <peripheral_task+0x62>
      }
      adc_val[20] /= 10;
 800129e:	4b52      	ldr	r3, [pc, #328]	; (80013e8 <peripheral_task+0x1e8>)
 80012a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012a2:	4a53      	ldr	r2, [pc, #332]	; (80013f0 <peripheral_task+0x1f0>)
 80012a4:	fba2 2303 	umull	r2, r3, r2, r3
 80012a8:	08db      	lsrs	r3, r3, #3
 80012aa:	4a4f      	ldr	r2, [pc, #316]	; (80013e8 <peripheral_task+0x1e8>)
 80012ac:	6513      	str	r3, [r2, #80]	; 0x50
      adc_val[21] /= 10;
 80012ae:	4b4e      	ldr	r3, [pc, #312]	; (80013e8 <peripheral_task+0x1e8>)
 80012b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b2:	4a4f      	ldr	r2, [pc, #316]	; (80013f0 <peripheral_task+0x1f0>)
 80012b4:	fba2 2303 	umull	r2, r3, r2, r3
 80012b8:	08db      	lsrs	r3, r3, #3
 80012ba:	4a4b      	ldr	r2, [pc, #300]	; (80013e8 <peripheral_task+0x1e8>)
 80012bc:	6553      	str	r3, [r2, #84]	; 0x54

      ADC_VREF_mV = (uint16_t)(VREFINT * ADC_RESOLUTION * 1000 / adc_val[21]) - 130;
 80012be:	4b4a      	ldr	r3, [pc, #296]	; (80013e8 <peripheral_task+0x1e8>)
 80012c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f88e 	bl	80003e4 <__aeabi_ui2d>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	a13e      	add	r1, pc, #248	; (adr r1, 80013c8 <peripheral_task+0x1c8>)
 80012ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012d2:	f7ff fa2b 	bl	800072c <__aeabi_ddiv>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	f7ff fbd3 	bl	8000a88 <__aeabi_d2uiz>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	3b82      	subs	r3, #130	; 0x82
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	4b42      	ldr	r3, [pc, #264]	; (80013f4 <peripheral_task+0x1f4>)
 80012ec:	801a      	strh	r2, [r3, #0]
      battery = (float)(((float)adc_val[20] * RATIO * ADC_VREF_mV / ADC_RESOLUTION) / 1000);
 80012ee:	4b3e      	ldr	r3, [pc, #248]	; (80013e8 <peripheral_task+0x1e8>)
 80012f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fcee 	bl	8000cd4 <__aeabi_ui2f>
 80012f8:	4603      	mov	r3, r0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f894 	bl	8000428 <__aeabi_f2d>
 8001300:	a333      	add	r3, pc, #204	; (adr r3, 80013d0 <peripheral_task+0x1d0>)
 8001302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001306:	f7ff f8e7 	bl	80004d8 <__aeabi_dmul>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4614      	mov	r4, r2
 8001310:	461d      	mov	r5, r3
 8001312:	4b38      	ldr	r3, [pc, #224]	; (80013f4 <peripheral_task+0x1f4>)
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f874 	bl	8000404 <__aeabi_i2d>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4620      	mov	r0, r4
 8001322:	4629      	mov	r1, r5
 8001324:	f7ff f8d8 	bl	80004d8 <__aeabi_dmul>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	a329      	add	r3, pc, #164	; (adr r3, 80013d8 <peripheral_task+0x1d8>)
 8001332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001336:	f7ff f9f9 	bl	800072c <__aeabi_ddiv>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	4b2c      	ldr	r3, [pc, #176]	; (80013f8 <peripheral_task+0x1f8>)
 8001348:	f7ff f9f0 	bl	800072c <__aeabi_ddiv>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fbb8 	bl	8000ac8 <__aeabi_d2f>
 8001358:	4603      	mov	r3, r0
 800135a:	4a28      	ldr	r2, [pc, #160]	; (80013fc <peripheral_task+0x1fc>)
 800135c:	6013      	str	r3, [r2, #0]
      ftoa(battery, sx1278_node.battery, 2);
 800135e:	4b27      	ldr	r3, [pc, #156]	; (80013fc <peripheral_task+0x1fc>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f860 	bl	8000428 <__aeabi_f2d>
 8001368:	2302      	movs	r3, #2
 800136a:	4a25      	ldr	r2, [pc, #148]	; (8001400 <peripheral_task+0x200>)
 800136c:	f7ff fe6c 	bl	8001048 <ftoa>

      /* Logging data */
      sprintf(data_log, "Vref: %d, Vbat: %s", ADC_VREF_mV, sx1278_node.battery);
 8001370:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <peripheral_task+0x1f4>)
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	f107 000c 	add.w	r0, r7, #12
 800137a:	4b21      	ldr	r3, [pc, #132]	; (8001400 <peripheral_task+0x200>)
 800137c:	4921      	ldr	r1, [pc, #132]	; (8001404 <peripheral_task+0x204>)
 800137e:	f003 ffef 	bl	8005360 <siprintf>
      LOG(TAG, data_log);
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <peripheral_task+0x1e4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f107 020c 	add.w	r2, r7, #12
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fdaf 	bl	8000ef0 <LOG>
      HAL_Delay(1000);
 8001392:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001396:	f000 fbff 	bl	8001b98 <HAL_Delay>
    while ((HAL_GetTick() - time_keeper_1) <= 3000)
 800139a:	f000 fbf3 	bl	8001b84 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80013a8:	4293      	cmp	r3, r2
 80013aa:	f67f af50 	bls.w	800124e <peripheral_task+0x4e>
    }

    HAL_ADC_Stop_DMA(&hadc1);
 80013ae:	480f      	ldr	r0, [pc, #60]	; (80013ec <peripheral_task+0x1ec>)
 80013b0:	f000 fdcc 	bl	8001f4c <HAL_ADC_Stop_DMA>
    HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80013b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013b8:	4813      	ldr	r0, [pc, #76]	; (8001408 <peripheral_task+0x208>)
 80013ba:	f001 fccf 	bl	8002d5c <HAL_GPIO_TogglePin>
    HAL_Delay(2000);
 80013be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013c2:	f000 fbe9 	bl	8001b98 <HAL_Delay>
    HAL_ADC_Start_DMA(&hadc1, adc_val, 20);
 80013c6:	e738      	b.n	800123a <peripheral_task+0x3a>
 80013c8:	80000000 	.word	0x80000000
 80013cc:	4152e6d1 	.word	0x4152e6d1
 80013d0:	cccccccd 	.word	0xcccccccd
 80013d4:	3ff4cccc 	.word	0x3ff4cccc
 80013d8:	00000000 	.word	0x00000000
 80013dc:	40affe00 	.word	0x40affe00
 80013e0:	08006a7c 	.word	0x08006a7c
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000368 	.word	0x20000368
 80013ec:	2000009c 	.word	0x2000009c
 80013f0:	cccccccd 	.word	0xcccccccd
 80013f4:	20000004 	.word	0x20000004
 80013f8:	408f4000 	.word	0x408f4000
 80013fc:	200003c0 	.word	0x200003c0
 8001400:	200003d6 	.word	0x200003d6
 8001404:	08006a8c 	.word	0x08006a8c
 8001408:	40011000 	.word	0x40011000

0800140c <sx1278_task>:
  }
  /* USER CODE END StartDefaultTask */
}

void sx1278_task(void const *arg)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08c      	sub	sp, #48	; 0x30
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  char data_log[40] = {0};
 8001414:	2300      	movs	r3, #0
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	2224      	movs	r2, #36	; 0x24
 800141e:	2100      	movs	r1, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f003 ff95 	bl	8005350 <memset>

  sprintf(data_log, "SX1278 Task");
 8001426:	f107 0308 	add.w	r3, r7, #8
 800142a:	490f      	ldr	r1, [pc, #60]	; (8001468 <sx1278_task+0x5c>)
 800142c:	4618      	mov	r0, r3
 800142e:	f003 ff97 	bl	8005360 <siprintf>
  LOG(TAG, data_log);
 8001432:	4b0e      	ldr	r3, [pc, #56]	; (800146c <sx1278_task+0x60>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f107 0208 	add.w	r2, r7, #8
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fd57 	bl	8000ef0 <LOG>

  sprintf(data_log, "for loop in sx1278_task");
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	490a      	ldr	r1, [pc, #40]	; (8001470 <sx1278_task+0x64>)
 8001448:	4618      	mov	r0, r3
 800144a:	f003 ff89 	bl	8005360 <siprintf>
  for (;;)
  {
    LOG(TAG, data_log);
 800144e:	4b07      	ldr	r3, [pc, #28]	; (800146c <sx1278_task+0x60>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f107 0208 	add.w	r2, r7, #8
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fd49 	bl	8000ef0 <LOG>
    HAL_Delay(500);
 800145e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001462:	f000 fb99 	bl	8001b98 <HAL_Delay>
    LOG(TAG, data_log);
 8001466:	e7f2      	b.n	800144e <sx1278_task+0x42>
 8001468:	08006aa0 	.word	0x08006aa0
 800146c:	20000000 	.word	0x20000000
 8001470:	08006aac 	.word	0x08006aac

08001474 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147a:	f107 0310 	add.w	r3, r7, #16
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001488:	4b39      	ldr	r3, [pc, #228]	; (8001570 <MX_GPIO_Init+0xfc>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	4a38      	ldr	r2, [pc, #224]	; (8001570 <MX_GPIO_Init+0xfc>)
 800148e:	f043 0310 	orr.w	r3, r3, #16
 8001492:	6193      	str	r3, [r2, #24]
 8001494:	4b36      	ldr	r3, [pc, #216]	; (8001570 <MX_GPIO_Init+0xfc>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	f003 0310 	and.w	r3, r3, #16
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a0:	4b33      	ldr	r3, [pc, #204]	; (8001570 <MX_GPIO_Init+0xfc>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	4a32      	ldr	r2, [pc, #200]	; (8001570 <MX_GPIO_Init+0xfc>)
 80014a6:	f043 0320 	orr.w	r3, r3, #32
 80014aa:	6193      	str	r3, [r2, #24]
 80014ac:	4b30      	ldr	r3, [pc, #192]	; (8001570 <MX_GPIO_Init+0xfc>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f003 0320 	and.w	r3, r3, #32
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b8:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <MX_GPIO_Init+0xfc>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a2c      	ldr	r2, [pc, #176]	; (8001570 <MX_GPIO_Init+0xfc>)
 80014be:	f043 0304 	orr.w	r3, r3, #4
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <MX_GPIO_Init+0xfc>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	607b      	str	r3, [r7, #4]
 80014ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d0:	4b27      	ldr	r3, [pc, #156]	; (8001570 <MX_GPIO_Init+0xfc>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a26      	ldr	r2, [pc, #152]	; (8001570 <MX_GPIO_Init+0xfc>)
 80014d6:	f043 0308 	orr.w	r3, r3, #8
 80014da:	6193      	str	r3, [r2, #24]
 80014dc:	4b24      	ldr	r3, [pc, #144]	; (8001570 <MX_GPIO_Init+0xfc>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f003 0308 	and.w	r3, r3, #8
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED0_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80014e8:	2200      	movs	r2, #0
 80014ea:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80014ee:	4821      	ldr	r0, [pc, #132]	; (8001574 <MX_GPIO_Init+0x100>)
 80014f0:	f001 fc1c 	bl	8002d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LoRa_RST_GPIO_Port, LoRa_RST_Pin, GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014fa:	481f      	ldr	r0, [pc, #124]	; (8001578 <MX_GPIO_Init+0x104>)
 80014fc:	f001 fc16 	bl	8002d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin;
 8001500:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001504:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001506:	2301      	movs	r3, #1
 8001508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800150a:	2301      	movs	r3, #1
 800150c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2302      	movs	r3, #2
 8001510:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001512:	f107 0310 	add.w	r3, r7, #16
 8001516:	4619      	mov	r1, r3
 8001518:	4816      	ldr	r0, [pc, #88]	; (8001574 <MX_GPIO_Init+0x100>)
 800151a:	f001 fa83 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LoRa_EXTI2_Pin;
 800151e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001522:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001524:	4b15      	ldr	r3, [pc, #84]	; (800157c <MX_GPIO_Init+0x108>)
 8001526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001528:	2302      	movs	r3, #2
 800152a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LoRa_EXTI2_GPIO_Port, &GPIO_InitStruct);
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	4619      	mov	r1, r3
 8001532:	4813      	ldr	r0, [pc, #76]	; (8001580 <MX_GPIO_Init+0x10c>)
 8001534:	f001 fa76 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LoRa_RST_Pin;
 8001538:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800153c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153e:	2301      	movs	r3, #1
 8001540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001542:	2301      	movs	r3, #1
 8001544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2302      	movs	r3, #2
 8001548:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LoRa_RST_GPIO_Port, &GPIO_InitStruct);
 800154a:	f107 0310 	add.w	r3, r7, #16
 800154e:	4619      	mov	r1, r3
 8001550:	4809      	ldr	r0, [pc, #36]	; (8001578 <MX_GPIO_Init+0x104>)
 8001552:	f001 fa67 	bl	8002a24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2105      	movs	r1, #5
 800155a:	2028      	movs	r0, #40	; 0x28
 800155c:	f001 f80d 	bl	800257a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001560:	2028      	movs	r0, #40	; 0x28
 8001562:	f001 f826 	bl	80025b2 <HAL_NVIC_EnableIRQ>

}
 8001566:	bf00      	nop
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000
 8001574:	40011000 	.word	0x40011000
 8001578:	40010800 	.word	0x40010800
 800157c:	10110000 	.word	0x10110000
 8001580:	40010c00 	.word	0x40010c00

08001584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800158a:	f000 fad3 	bl	8001b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800158e:	f000 f827 	bl	80015e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001592:	f7ff ff6f 	bl	8001474 <MX_GPIO_Init>
  MX_DMA_Init();
 8001596:	f7ff fda5 	bl	80010e4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800159a:	f000 fa2f 	bl	80019fc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800159e:	f7ff fbf1 	bl	8000d84 <MX_ADC1_Init>
  MX_SPI2_Init();
 80015a2:	f000 f891 	bl	80016c8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  char data_log[20];
  sx1278_node.node_id = 10;
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <main+0x50>)
 80015a8:	220a      	movs	r2, #10
 80015aa:	601a      	str	r2, [r3, #0]
  sprintf(data_log, "node_id: %d", sx1278_node.node_id);
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <main+0x50>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	4909      	ldr	r1, [pc, #36]	; (80015d8 <main+0x54>)
 80015b4:	4618      	mov	r0, r3
 80015b6:	f003 fed3 	bl	8005360 <siprintf>
  LOG(TAG, data_log);
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <main+0x58>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	1d3a      	adds	r2, r7, #4
 80015c0:	4611      	mov	r1, r2
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fc94 	bl	8000ef0 <LOG>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80015c8:	f7ff fdc2 	bl	8001150 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80015cc:	f002 fdad 	bl	800412a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <main+0x4c>
 80015d2:	bf00      	nop
 80015d4:	200003c4 	.word	0x200003c4
 80015d8:	08006acc 	.word	0x08006acc
 80015dc:	20000008 	.word	0x20000008

080015e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b094      	sub	sp, #80	; 0x50
 80015e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ea:	2228      	movs	r2, #40	; 0x28
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f003 feae 	bl	8005350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001610:	2301      	movs	r3, #1
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001618:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800161a:	2300      	movs	r3, #0
 800161c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800161e:	2301      	movs	r3, #1
 8001620:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001622:	2302      	movs	r3, #2
 8001624:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001626:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800162a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800162c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001630:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001632:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001636:	4618      	mov	r0, r3
 8001638:	f001 fbcc 	bl	8002dd4 <HAL_RCC_OscConfig>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001642:	f000 f83b 	bl	80016bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001646:	230f      	movs	r3, #15
 8001648:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800164a:	2302      	movs	r3, #2
 800164c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001656:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001658:	2300      	movs	r3, #0
 800165a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	2102      	movs	r1, #2
 8001662:	4618      	mov	r0, r3
 8001664:	f001 fe38 	bl	80032d8 <HAL_RCC_ClockConfig>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800166e:	f000 f825 	bl	80016bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001672:	2302      	movs	r3, #2
 8001674:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800167a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	4618      	mov	r0, r3
 8001680:	f001 ffe8 	bl	8003654 <HAL_RCCEx_PeriphCLKConfig>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800168a:	f000 f817 	bl	80016bc <Error_Handler>
  }
}
 800168e:	bf00      	nop
 8001690:	3750      	adds	r7, #80	; 0x50
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d101      	bne.n	80016ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016aa:	f000 fa59 	bl	8001b60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40012c00 	.word	0x40012c00

080016bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c0:	b672      	cpsid	i
}
 80016c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <Error_Handler+0x8>
	...

080016c8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80016cc:	4b17      	ldr	r3, [pc, #92]	; (800172c <MX_SPI2_Init+0x64>)
 80016ce:	4a18      	ldr	r2, [pc, #96]	; (8001730 <MX_SPI2_Init+0x68>)
 80016d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016d2:	4b16      	ldr	r3, [pc, #88]	; (800172c <MX_SPI2_Init+0x64>)
 80016d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016da:	4b14      	ldr	r3, [pc, #80]	; (800172c <MX_SPI2_Init+0x64>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <MX_SPI2_Init+0x64>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <MX_SPI2_Init+0x64>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ec:	4b0f      	ldr	r3, [pc, #60]	; (800172c <MX_SPI2_Init+0x64>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <MX_SPI2_Init+0x64>)
 80016f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016f8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016fa:	4b0c      	ldr	r3, [pc, #48]	; (800172c <MX_SPI2_Init+0x64>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001700:	4b0a      	ldr	r3, [pc, #40]	; (800172c <MX_SPI2_Init+0x64>)
 8001702:	2200      	movs	r2, #0
 8001704:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <MX_SPI2_Init+0x64>)
 8001708:	2200      	movs	r2, #0
 800170a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800170c:	4b07      	ldr	r3, [pc, #28]	; (800172c <MX_SPI2_Init+0x64>)
 800170e:	2200      	movs	r2, #0
 8001710:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <MX_SPI2_Init+0x64>)
 8001714:	220a      	movs	r2, #10
 8001716:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001718:	4804      	ldr	r0, [pc, #16]	; (800172c <MX_SPI2_Init+0x64>)
 800171a:	f002 f851 	bl	80037c0 <HAL_SPI_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001724:	f7ff ffca 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200003f0 	.word	0x200003f0
 8001730:	40003800 	.word	0x40003800

08001734 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 0310 	add.w	r3, r7, #16
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a1c      	ldr	r2, [pc, #112]	; (80017c0 <HAL_SPI_MspInit+0x8c>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d131      	bne.n	80017b8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <HAL_SPI_MspInit+0x90>)
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	4a1a      	ldr	r2, [pc, #104]	; (80017c4 <HAL_SPI_MspInit+0x90>)
 800175a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800175e:	61d3      	str	r3, [r2, #28]
 8001760:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <HAL_SPI_MspInit+0x90>)
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176c:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <HAL_SPI_MspInit+0x90>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4a14      	ldr	r2, [pc, #80]	; (80017c4 <HAL_SPI_MspInit+0x90>)
 8001772:	f043 0308 	orr.w	r3, r3, #8
 8001776:	6193      	str	r3, [r2, #24]
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_SPI_MspInit+0x90>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f003 0308 	and.w	r3, r3, #8
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001784:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001788:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800178e:	2303      	movs	r3, #3
 8001790:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001792:	f107 0310 	add.w	r3, r7, #16
 8001796:	4619      	mov	r1, r3
 8001798:	480b      	ldr	r0, [pc, #44]	; (80017c8 <HAL_SPI_MspInit+0x94>)
 800179a:	f001 f943 	bl	8002a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800179e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ac:	f107 0310 	add.w	r3, r7, #16
 80017b0:	4619      	mov	r1, r3
 80017b2:	4805      	ldr	r0, [pc, #20]	; (80017c8 <HAL_SPI_MspInit+0x94>)
 80017b4:	f001 f936 	bl	8002a24 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80017b8:	bf00      	nop
 80017ba:	3720      	adds	r7, #32
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40003800 	.word	0x40003800
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40010c00 	.word	0x40010c00

080017cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017d2:	4b18      	ldr	r3, [pc, #96]	; (8001834 <HAL_MspInit+0x68>)
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	4a17      	ldr	r2, [pc, #92]	; (8001834 <HAL_MspInit+0x68>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6193      	str	r3, [r2, #24]
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <HAL_MspInit+0x68>)
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_MspInit+0x68>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	4a11      	ldr	r2, [pc, #68]	; (8001834 <HAL_MspInit+0x68>)
 80017f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f4:	61d3      	str	r3, [r2, #28]
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <HAL_MspInit+0x68>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	210f      	movs	r1, #15
 8001806:	f06f 0001 	mvn.w	r0, #1
 800180a:	f000 feb6 	bl	800257a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <HAL_MspInit+0x6c>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	4a04      	ldr	r2, [pc, #16]	; (8001838 <HAL_MspInit+0x6c>)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40021000 	.word	0x40021000
 8001838:	40010000 	.word	0x40010000

0800183c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08c      	sub	sp, #48	; 0x30
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001852:	4b2e      	ldr	r3, [pc, #184]	; (800190c <HAL_InitTick+0xd0>)
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	4a2d      	ldr	r2, [pc, #180]	; (800190c <HAL_InitTick+0xd0>)
 8001858:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800185c:	6193      	str	r3, [r2, #24]
 800185e:	4b2b      	ldr	r3, [pc, #172]	; (800190c <HAL_InitTick+0xd0>)
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800186a:	f107 020c 	add.w	r2, r7, #12
 800186e:	f107 0310 	add.w	r3, r7, #16
 8001872:	4611      	mov	r1, r2
 8001874:	4618      	mov	r0, r3
 8001876:	f001 fe9f 	bl	80035b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800187a:	f001 fe89 	bl	8003590 <HAL_RCC_GetPCLK2Freq>
 800187e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001882:	4a23      	ldr	r2, [pc, #140]	; (8001910 <HAL_InitTick+0xd4>)
 8001884:	fba2 2303 	umull	r2, r3, r2, r3
 8001888:	0c9b      	lsrs	r3, r3, #18
 800188a:	3b01      	subs	r3, #1
 800188c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800188e:	4b21      	ldr	r3, [pc, #132]	; (8001914 <HAL_InitTick+0xd8>)
 8001890:	4a21      	ldr	r2, [pc, #132]	; (8001918 <HAL_InitTick+0xdc>)
 8001892:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001894:	4b1f      	ldr	r3, [pc, #124]	; (8001914 <HAL_InitTick+0xd8>)
 8001896:	f240 32e7 	movw	r2, #999	; 0x3e7
 800189a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800189c:	4a1d      	ldr	r2, [pc, #116]	; (8001914 <HAL_InitTick+0xd8>)
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80018a2:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <HAL_InitTick+0xd8>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a8:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <HAL_InitTick+0xd8>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ae:	4b19      	ldr	r3, [pc, #100]	; (8001914 <HAL_InitTick+0xd8>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80018b4:	4817      	ldr	r0, [pc, #92]	; (8001914 <HAL_InitTick+0xd8>)
 80018b6:	f002 f807 	bl	80038c8 <HAL_TIM_Base_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80018c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d11b      	bne.n	8001900 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80018c8:	4812      	ldr	r0, [pc, #72]	; (8001914 <HAL_InitTick+0xd8>)
 80018ca:	f002 f855 	bl	8003978 <HAL_TIM_Base_Start_IT>
 80018ce:	4603      	mov	r3, r0
 80018d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80018d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d111      	bne.n	8001900 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80018dc:	2019      	movs	r0, #25
 80018de:	f000 fe68 	bl	80025b2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b0f      	cmp	r3, #15
 80018e6:	d808      	bhi.n	80018fa <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80018e8:	2200      	movs	r2, #0
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	2019      	movs	r0, #25
 80018ee:	f000 fe44 	bl	800257a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018f2:	4a0a      	ldr	r2, [pc, #40]	; (800191c <HAL_InitTick+0xe0>)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	e002      	b.n	8001900 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001900:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001904:	4618      	mov	r0, r3
 8001906:	3730      	adds	r7, #48	; 0x30
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40021000 	.word	0x40021000
 8001910:	431bde83 	.word	0x431bde83
 8001914:	20000448 	.word	0x20000448
 8001918:	40012c00 	.word	0x40012c00
 800191c:	20000010 	.word	0x20000010

08001920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <NMI_Handler+0x4>

08001926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192a:	e7fe      	b.n	800192a <HardFault_Handler+0x4>

0800192c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001930:	e7fe      	b.n	8001930 <MemManage_Handler+0x4>

08001932 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001936:	e7fe      	b.n	8001936 <BusFault_Handler+0x4>

08001938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800193c:	e7fe      	b.n	800193c <UsageFault_Handler+0x4>

0800193e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
	...

0800194c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001950:	4802      	ldr	r0, [pc, #8]	; (800195c <DMA1_Channel1_IRQHandler+0x10>)
 8001952:	f000 ff33 	bl	80027bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200000cc 	.word	0x200000cc

08001960 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001964:	4802      	ldr	r0, [pc, #8]	; (8001970 <TIM1_UP_IRQHandler+0x10>)
 8001966:	f002 f859 	bl	8003a1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000448 	.word	0x20000448

08001974 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LoRa_EXTI2_Pin);
 8001978:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800197c:	f001 fa08 	bl	8002d90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}

08001984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800198c:	4a14      	ldr	r2, [pc, #80]	; (80019e0 <_sbrk+0x5c>)
 800198e:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <_sbrk+0x60>)
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001998:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <_sbrk+0x64>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d102      	bne.n	80019a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <_sbrk+0x64>)
 80019a2:	4a12      	ldr	r2, [pc, #72]	; (80019ec <_sbrk+0x68>)
 80019a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <_sbrk+0x64>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d207      	bcs.n	80019c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b4:	f003 fc94 	bl	80052e0 <__errno>
 80019b8:	4603      	mov	r3, r0
 80019ba:	220c      	movs	r2, #12
 80019bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019be:	f04f 33ff 	mov.w	r3, #4294967295
 80019c2:	e009      	b.n	80019d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <_sbrk+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ca:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <_sbrk+0x64>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	4a05      	ldr	r2, [pc, #20]	; (80019e8 <_sbrk+0x64>)
 80019d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019d6:	68fb      	ldr	r3, [r7, #12]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20005000 	.word	0x20005000
 80019e4:	00000400 	.word	0x00000400
 80019e8:	20000490 	.word	0x20000490
 80019ec:	20001240 	.word	0x20001240

080019f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <MX_USART1_UART_Init+0x4c>)
 8001a02:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <MX_USART1_UART_Init+0x50>)
 8001a04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <MX_USART1_UART_Init+0x4c>)
 8001a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <MX_USART1_UART_Init+0x4c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <MX_USART1_UART_Init+0x4c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <MX_USART1_UART_Init+0x4c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <MX_USART1_UART_Init+0x4c>)
 8001a22:	220c      	movs	r2, #12
 8001a24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <MX_USART1_UART_Init+0x4c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <MX_USART1_UART_Init+0x4c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_USART1_UART_Init+0x4c>)
 8001a34:	f002 f992 	bl	8003d5c <HAL_UART_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a3e:	f7ff fe3d 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000494 	.word	0x20000494
 8001a4c:	40013800 	.word	0x40013800

08001a50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0310 	add.w	r3, r7, #16
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a1c      	ldr	r2, [pc, #112]	; (8001adc <HAL_UART_MspInit+0x8c>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d131      	bne.n	8001ad4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a70:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <HAL_UART_MspInit+0x90>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	4a1a      	ldr	r2, [pc, #104]	; (8001ae0 <HAL_UART_MspInit+0x90>)
 8001a76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a7a:	6193      	str	r3, [r2, #24]
 8001a7c:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <HAL_UART_MspInit+0x90>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a88:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <HAL_UART_MspInit+0x90>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	4a14      	ldr	r2, [pc, #80]	; (8001ae0 <HAL_UART_MspInit+0x90>)
 8001a8e:	f043 0304 	orr.w	r3, r3, #4
 8001a92:	6193      	str	r3, [r2, #24]
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_UART_MspInit+0x90>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aa4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aae:	f107 0310 	add.w	r3, r7, #16
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	480b      	ldr	r0, [pc, #44]	; (8001ae4 <HAL_UART_MspInit+0x94>)
 8001ab6:	f000 ffb5 	bl	8002a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001abe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac8:	f107 0310 	add.w	r3, r7, #16
 8001acc:	4619      	mov	r1, r3
 8001ace:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <HAL_UART_MspInit+0x94>)
 8001ad0:	f000 ffa8 	bl	8002a24 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	3720      	adds	r7, #32
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40013800 	.word	0x40013800
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40010800 	.word	0x40010800

08001ae8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ae8:	f7ff ff82 	bl	80019f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aec:	480b      	ldr	r0, [pc, #44]	; (8001b1c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001aee:	490c      	ldr	r1, [pc, #48]	; (8001b20 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001af0:	4a0c      	ldr	r2, [pc, #48]	; (8001b24 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af4:	e002      	b.n	8001afc <LoopCopyDataInit>

08001af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afa:	3304      	adds	r3, #4

08001afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b00:	d3f9      	bcc.n	8001af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b02:	4a09      	ldr	r2, [pc, #36]	; (8001b28 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b04:	4c09      	ldr	r4, [pc, #36]	; (8001b2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b08:	e001      	b.n	8001b0e <LoopFillZerobss>

08001b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b0c:	3204      	adds	r2, #4

08001b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b10:	d3fb      	bcc.n	8001b0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b12:	f003 fbeb 	bl	80052ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b16:	f7ff fd35 	bl	8001584 <main>
  bx lr
 8001b1a:	4770      	bx	lr
  ldr r0, =_sdata
 8001b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b20:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001b24:	08006bd8 	.word	0x08006bd8
  ldr r2, =_sbss
 8001b28:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001b2c:	2000123c 	.word	0x2000123c

08001b30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b30:	e7fe      	b.n	8001b30 <ADC1_2_IRQHandler>
	...

08001b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b38:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <HAL_Init+0x28>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <HAL_Init+0x28>)
 8001b3e:	f043 0310 	orr.w	r3, r3, #16
 8001b42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b44:	2003      	movs	r0, #3
 8001b46:	f000 fd0d 	bl	8002564 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b4a:	200f      	movs	r0, #15
 8001b4c:	f7ff fe76 	bl	800183c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b50:	f7ff fe3c 	bl	80017cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40022000 	.word	0x40022000

08001b60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_IncTick+0x1c>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <HAL_IncTick+0x20>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	4a03      	ldr	r2, [pc, #12]	; (8001b80 <HAL_IncTick+0x20>)
 8001b72:	6013      	str	r3, [r2, #0]
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	20000014 	.word	0x20000014
 8001b80:	200004dc 	.word	0x200004dc

08001b84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return uwTick;
 8001b88:	4b02      	ldr	r3, [pc, #8]	; (8001b94 <HAL_GetTick+0x10>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	200004dc 	.word	0x200004dc

08001b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba0:	f7ff fff0 	bl	8001b84 <HAL_GetTick>
 8001ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb0:	d005      	beq.n	8001bbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <HAL_Delay+0x44>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4413      	add	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bbe:	bf00      	nop
 8001bc0:	f7ff ffe0 	bl	8001b84 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d8f7      	bhi.n	8001bc0 <HAL_Delay+0x28>
  {
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000014 	.word	0x20000014

08001be0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be8:	2300      	movs	r3, #0
 8001bea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e0be      	b.n	8001d80 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d109      	bne.n	8001c24 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff f8fe 	bl	8000e20 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 fb4b 	bl	80022c0 <ADC_ConversionStop_Disable>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c32:	f003 0310 	and.w	r3, r3, #16
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f040 8099 	bne.w	8001d6e <HAL_ADC_Init+0x18e>
 8001c3c:	7dfb      	ldrb	r3, [r7, #23]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f040 8095 	bne.w	8001d6e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c48:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c4c:	f023 0302 	bic.w	r3, r3, #2
 8001c50:	f043 0202 	orr.w	r2, r3, #2
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c60:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	7b1b      	ldrb	r3, [r3, #12]
 8001c66:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c68:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c78:	d003      	beq.n	8001c82 <HAL_ADC_Init+0xa2>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d102      	bne.n	8001c88 <HAL_ADC_Init+0xa8>
 8001c82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c86:	e000      	b.n	8001c8a <HAL_ADC_Init+0xaa>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	7d1b      	ldrb	r3, [r3, #20]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d119      	bne.n	8001ccc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	7b1b      	ldrb	r3, [r3, #12]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d109      	bne.n	8001cb4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	035a      	lsls	r2, r3, #13
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	e00b      	b.n	8001ccc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb8:	f043 0220 	orr.w	r2, r3, #32
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc4:	f043 0201 	orr.w	r2, r3, #1
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	4b28      	ldr	r3, [pc, #160]	; (8001d88 <HAL_ADC_Init+0x1a8>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	68b9      	ldr	r1, [r7, #8]
 8001cf0:	430b      	orrs	r3, r1
 8001cf2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cfc:	d003      	beq.n	8001d06 <HAL_ADC_Init+0x126>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d104      	bne.n	8001d10 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	051b      	lsls	r3, r3, #20
 8001d0e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d16:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <HAL_ADC_Init+0x1ac>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d10b      	bne.n	8001d4c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3e:	f023 0303 	bic.w	r3, r3, #3
 8001d42:	f043 0201 	orr.w	r2, r3, #1
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d4a:	e018      	b.n	8001d7e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d50:	f023 0312 	bic.w	r3, r3, #18
 8001d54:	f043 0210 	orr.w	r2, r3, #16
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d60:	f043 0201 	orr.w	r2, r3, #1
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d6c:	e007      	b.n	8001d7e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d72:	f043 0210 	orr.w	r2, r3, #16
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	ffe1f7fd 	.word	0xffe1f7fd
 8001d8c:	ff1f0efe 	.word	0xff1f0efe

08001d90 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a64      	ldr	r2, [pc, #400]	; (8001f38 <HAL_ADC_Start_DMA+0x1a8>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d004      	beq.n	8001db4 <HAL_ADC_Start_DMA+0x24>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a63      	ldr	r2, [pc, #396]	; (8001f3c <HAL_ADC_Start_DMA+0x1ac>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d106      	bne.n	8001dc2 <HAL_ADC_Start_DMA+0x32>
 8001db4:	4b60      	ldr	r3, [pc, #384]	; (8001f38 <HAL_ADC_Start_DMA+0x1a8>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f040 80b3 	bne.w	8001f28 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d101      	bne.n	8001dd0 <HAL_ADC_Start_DMA+0x40>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e0ae      	b.n	8001f2e <HAL_ADC_Start_DMA+0x19e>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 fa17 	bl	800220c <ADC_Enable>
 8001dde:	4603      	mov	r3, r0
 8001de0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001de2:	7dfb      	ldrb	r3, [r7, #23]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f040 809a 	bne.w	8001f1e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001df2:	f023 0301 	bic.w	r3, r3, #1
 8001df6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a4e      	ldr	r2, [pc, #312]	; (8001f3c <HAL_ADC_Start_DMA+0x1ac>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d105      	bne.n	8001e14 <HAL_ADC_Start_DMA+0x84>
 8001e08:	4b4b      	ldr	r3, [pc, #300]	; (8001f38 <HAL_ADC_Start_DMA+0x1a8>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d115      	bne.n	8001e40 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e18:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d026      	beq.n	8001e7c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e32:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e36:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e3e:	e01d      	b.n	8001e7c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e44:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a39      	ldr	r2, [pc, #228]	; (8001f38 <HAL_ADC_Start_DMA+0x1a8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d004      	beq.n	8001e60 <HAL_ADC_Start_DMA+0xd0>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a38      	ldr	r2, [pc, #224]	; (8001f3c <HAL_ADC_Start_DMA+0x1ac>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d10d      	bne.n	8001e7c <HAL_ADC_Start_DMA+0xec>
 8001e60:	4b35      	ldr	r3, [pc, #212]	; (8001f38 <HAL_ADC_Start_DMA+0x1a8>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d007      	beq.n	8001e7c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e74:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d006      	beq.n	8001e96 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8c:	f023 0206 	bic.w	r2, r3, #6
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e94:	e002      	b.n	8001e9c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4a25      	ldr	r2, [pc, #148]	; (8001f40 <HAL_ADC_Start_DMA+0x1b0>)
 8001eaa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	4a24      	ldr	r2, [pc, #144]	; (8001f44 <HAL_ADC_Start_DMA+0x1b4>)
 8001eb2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	4a23      	ldr	r2, [pc, #140]	; (8001f48 <HAL_ADC_Start_DMA+0x1b8>)
 8001eba:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0202 	mvn.w	r2, #2
 8001ec4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ed4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6a18      	ldr	r0, [r3, #32]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	334c      	adds	r3, #76	; 0x4c
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f000 fbcd 	bl	8002684 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ef4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ef8:	d108      	bne.n	8001f0c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001f08:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001f0a:	e00f      	b.n	8001f2c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001f1a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001f1c:	e006      	b.n	8001f2c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001f26:	e001      	b.n	8001f2c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40012400 	.word	0x40012400
 8001f3c:	40012800 	.word	0x40012800
 8001f40:	08002343 	.word	0x08002343
 8001f44:	080023bf 	.word	0x080023bf
 8001f48:	080023db 	.word	0x080023db

08001f4c <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <HAL_ADC_Stop_DMA+0x1a>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e03a      	b.n	8001fdc <HAL_ADC_Stop_DMA+0x90>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f9a6 	bl	80022c0 <ADC_ConversionStop_Disable>
 8001f74:	4603      	mov	r3, r0
 8001f76:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d129      	bne.n	8001fd2 <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f8c:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d11a      	bne.n	8001fd2 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 fbcf 	bl	8002744 <HAL_DMA_Abort>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10a      	bne.n	8001fc6 <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fb8:	f023 0301 	bic.w	r3, r3, #1
 8001fbc:	f043 0201 	orr.w	r2, r3, #1
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	629a      	str	r2, [r3, #40]	; 0x28
 8001fc4:	e005      	b.n	8001fd2 <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr

08001ff6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr

08002008 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr
	...

0800201c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002034:	2b01      	cmp	r3, #1
 8002036:	d101      	bne.n	800203c <HAL_ADC_ConfigChannel+0x20>
 8002038:	2302      	movs	r3, #2
 800203a:	e0dc      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x1da>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b06      	cmp	r3, #6
 800204a:	d81c      	bhi.n	8002086 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	3b05      	subs	r3, #5
 800205e:	221f      	movs	r2, #31
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	4019      	ands	r1, r3
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	6818      	ldr	r0, [r3, #0]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	3b05      	subs	r3, #5
 8002078:	fa00 f203 	lsl.w	r2, r0, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	635a      	str	r2, [r3, #52]	; 0x34
 8002084:	e03c      	b.n	8002100 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b0c      	cmp	r3, #12
 800208c:	d81c      	bhi.n	80020c8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	3b23      	subs	r3, #35	; 0x23
 80020a0:	221f      	movs	r2, #31
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	4019      	ands	r1, r3
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	6818      	ldr	r0, [r3, #0]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	3b23      	subs	r3, #35	; 0x23
 80020ba:	fa00 f203 	lsl.w	r2, r0, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	631a      	str	r2, [r3, #48]	; 0x30
 80020c6:	e01b      	b.n	8002100 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	3b41      	subs	r3, #65	; 0x41
 80020da:	221f      	movs	r2, #31
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	4019      	ands	r1, r3
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	3b41      	subs	r3, #65	; 0x41
 80020f4:	fa00 f203 	lsl.w	r2, r0, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b09      	cmp	r3, #9
 8002106:	d91c      	bls.n	8002142 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68d9      	ldr	r1, [r3, #12]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	4613      	mov	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	4413      	add	r3, r2
 8002118:	3b1e      	subs	r3, #30
 800211a:	2207      	movs	r2, #7
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	4019      	ands	r1, r3
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	6898      	ldr	r0, [r3, #8]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4613      	mov	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	4413      	add	r3, r2
 8002132:	3b1e      	subs	r3, #30
 8002134:	fa00 f203 	lsl.w	r2, r0, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	60da      	str	r2, [r3, #12]
 8002140:	e019      	b.n	8002176 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6919      	ldr	r1, [r3, #16]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4613      	mov	r3, r2
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	4413      	add	r3, r2
 8002152:	2207      	movs	r2, #7
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	4019      	ands	r1, r3
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	6898      	ldr	r0, [r3, #8]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4613      	mov	r3, r2
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	4413      	add	r3, r2
 800216a:	fa00 f203 	lsl.w	r2, r0, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2b10      	cmp	r3, #16
 800217c:	d003      	beq.n	8002186 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002182:	2b11      	cmp	r3, #17
 8002184:	d132      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a1d      	ldr	r2, [pc, #116]	; (8002200 <HAL_ADC_ConfigChannel+0x1e4>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d125      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d126      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80021ac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2b10      	cmp	r3, #16
 80021b4:	d11a      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021b6:	4b13      	ldr	r3, [pc, #76]	; (8002204 <HAL_ADC_ConfigChannel+0x1e8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a13      	ldr	r2, [pc, #76]	; (8002208 <HAL_ADC_ConfigChannel+0x1ec>)
 80021bc:	fba2 2303 	umull	r2, r3, r2, r3
 80021c0:	0c9a      	lsrs	r2, r3, #18
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021cc:	e002      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f9      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x1b2>
 80021da:	e007      	b.n	80021ec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e0:	f043 0220 	orr.w	r2, r3, #32
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	40012400 	.word	0x40012400
 8002204:	2000000c 	.word	0x2000000c
 8002208:	431bde83 	.word	0x431bde83

0800220c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b01      	cmp	r3, #1
 8002228:	d040      	beq.n	80022ac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0201 	orr.w	r2, r2, #1
 8002238:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800223a:	4b1f      	ldr	r3, [pc, #124]	; (80022b8 <ADC_Enable+0xac>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a1f      	ldr	r2, [pc, #124]	; (80022bc <ADC_Enable+0xb0>)
 8002240:	fba2 2303 	umull	r2, r3, r2, r3
 8002244:	0c9b      	lsrs	r3, r3, #18
 8002246:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002248:	e002      	b.n	8002250 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	3b01      	subs	r3, #1
 800224e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f9      	bne.n	800224a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002256:	f7ff fc95 	bl	8001b84 <HAL_GetTick>
 800225a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800225c:	e01f      	b.n	800229e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800225e:	f7ff fc91 	bl	8001b84 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d918      	bls.n	800229e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b01      	cmp	r3, #1
 8002278:	d011      	beq.n	800229e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227e:	f043 0210 	orr.w	r2, r3, #16
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228a:	f043 0201 	orr.w	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e007      	b.n	80022ae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d1d8      	bne.n	800225e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	2000000c 	.word	0x2000000c
 80022bc:	431bde83 	.word	0x431bde83

080022c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d12e      	bne.n	8002338 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0201 	bic.w	r2, r2, #1
 80022e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022ea:	f7ff fc4b 	bl	8001b84 <HAL_GetTick>
 80022ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022f0:	e01b      	b.n	800232a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022f2:	f7ff fc47 	bl	8001b84 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d914      	bls.n	800232a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b01      	cmp	r3, #1
 800230c:	d10d      	bne.n	800232a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002312:	f043 0210 	orr.w	r2, r3, #16
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231e:	f043 0201 	orr.w	r2, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e007      	b.n	800233a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b01      	cmp	r3, #1
 8002336:	d0dc      	beq.n	80022f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002354:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002358:	2b00      	cmp	r3, #0
 800235a:	d127      	bne.n	80023ac <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002360:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002372:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002376:	d115      	bne.n	80023a4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800237c:	2b00      	cmp	r3, #0
 800237e:	d111      	bne.n	80023a4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d105      	bne.n	80023a4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239c:	f043 0201 	orr.w	r2, r3, #1
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f7ff fe1d 	bl	8001fe4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80023aa:	e004      	b.n	80023b6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	4798      	blx	r3
}
 80023b6:	bf00      	nop
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b084      	sub	sp, #16
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f7ff fe12 	bl	8001ff6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b084      	sub	sp, #16
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	f043 0204 	orr.w	r2, r3, #4
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f7ff fe01 	bl	8002008 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002406:	bf00      	nop
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002420:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <__NVIC_SetPriorityGrouping+0x44>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800242c:	4013      	ands	r3, r2
 800242e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800243c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002442:	4a04      	ldr	r2, [pc, #16]	; (8002454 <__NVIC_SetPriorityGrouping+0x44>)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	60d3      	str	r3, [r2, #12]
}
 8002448:	bf00      	nop
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800245c:	4b04      	ldr	r3, [pc, #16]	; (8002470 <__NVIC_GetPriorityGrouping+0x18>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	0a1b      	lsrs	r3, r3, #8
 8002462:	f003 0307 	and.w	r3, r3, #7
}
 8002466:	4618      	mov	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	2b00      	cmp	r3, #0
 8002484:	db0b      	blt.n	800249e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	f003 021f 	and.w	r2, r3, #31
 800248c:	4906      	ldr	r1, [pc, #24]	; (80024a8 <__NVIC_EnableIRQ+0x34>)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	2001      	movs	r0, #1
 8002496:	fa00 f202 	lsl.w	r2, r0, r2
 800249a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr
 80024a8:	e000e100 	.word	0xe000e100

080024ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	6039      	str	r1, [r7, #0]
 80024b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	db0a      	blt.n	80024d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	490c      	ldr	r1, [pc, #48]	; (80024f8 <__NVIC_SetPriority+0x4c>)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	0112      	lsls	r2, r2, #4
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	440b      	add	r3, r1
 80024d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d4:	e00a      	b.n	80024ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	4908      	ldr	r1, [pc, #32]	; (80024fc <__NVIC_SetPriority+0x50>)
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	3b04      	subs	r3, #4
 80024e4:	0112      	lsls	r2, r2, #4
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	440b      	add	r3, r1
 80024ea:	761a      	strb	r2, [r3, #24]
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	e000e100 	.word	0xe000e100
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002500:	b480      	push	{r7}
 8002502:	b089      	sub	sp, #36	; 0x24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f1c3 0307 	rsb	r3, r3, #7
 800251a:	2b04      	cmp	r3, #4
 800251c:	bf28      	it	cs
 800251e:	2304      	movcs	r3, #4
 8002520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3304      	adds	r3, #4
 8002526:	2b06      	cmp	r3, #6
 8002528:	d902      	bls.n	8002530 <NVIC_EncodePriority+0x30>
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	3b03      	subs	r3, #3
 800252e:	e000      	b.n	8002532 <NVIC_EncodePriority+0x32>
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002534:	f04f 32ff 	mov.w	r2, #4294967295
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43da      	mvns	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	401a      	ands	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002548:	f04f 31ff 	mov.w	r1, #4294967295
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	fa01 f303 	lsl.w	r3, r1, r3
 8002552:	43d9      	mvns	r1, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002558:	4313      	orrs	r3, r2
         );
}
 800255a:	4618      	mov	r0, r3
 800255c:	3724      	adds	r7, #36	; 0x24
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr

08002564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff ff4f 	bl	8002410 <__NVIC_SetPriorityGrouping>
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800257a:	b580      	push	{r7, lr}
 800257c:	b086      	sub	sp, #24
 800257e:	af00      	add	r7, sp, #0
 8002580:	4603      	mov	r3, r0
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	607a      	str	r2, [r7, #4]
 8002586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800258c:	f7ff ff64 	bl	8002458 <__NVIC_GetPriorityGrouping>
 8002590:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	68b9      	ldr	r1, [r7, #8]
 8002596:	6978      	ldr	r0, [r7, #20]
 8002598:	f7ff ffb2 	bl	8002500 <NVIC_EncodePriority>
 800259c:	4602      	mov	r2, r0
 800259e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a2:	4611      	mov	r1, r2
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff81 	bl	80024ac <__NVIC_SetPriority>
}
 80025aa:	bf00      	nop
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	4603      	mov	r3, r0
 80025ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff57 	bl	8002474 <__NVIC_EnableIRQ>
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e043      	b.n	800266e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	461a      	mov	r2, r3
 80025ec:	4b22      	ldr	r3, [pc, #136]	; (8002678 <HAL_DMA_Init+0xa8>)
 80025ee:	4413      	add	r3, r2
 80025f0:	4a22      	ldr	r2, [pc, #136]	; (800267c <HAL_DMA_Init+0xac>)
 80025f2:	fba2 2303 	umull	r2, r3, r2, r3
 80025f6:	091b      	lsrs	r3, r3, #4
 80025f8:	009a      	lsls	r2, r3, #2
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a1f      	ldr	r2, [pc, #124]	; (8002680 <HAL_DMA_Init+0xb0>)
 8002602:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2202      	movs	r2, #2
 8002608:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800261a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800261e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002628:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002634:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002640:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	4313      	orrs	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr
 8002678:	bffdfff8 	.word	0xbffdfff8
 800267c:	cccccccd 	.word	0xcccccccd
 8002680:	40020000 	.word	0x40020000

08002684 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
 8002690:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f893 3020 	ldrb.w	r3, [r3, #32]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <HAL_DMA_Start_IT+0x20>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e04b      	b.n	800273c <HAL_DMA_Start_IT+0xb8>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d13a      	bne.n	800272e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2202      	movs	r2, #2
 80026bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0201 	bic.w	r2, r2, #1
 80026d4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	68b9      	ldr	r1, [r7, #8]
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 f973 	bl	80029c8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d008      	beq.n	80026fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 020e 	orr.w	r2, r2, #14
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	e00f      	b.n	800271c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0204 	bic.w	r2, r2, #4
 800270a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 020a 	orr.w	r2, r2, #10
 800271a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0201 	orr.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	e005      	b.n	800273a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002736:	2302      	movs	r3, #2
 8002738:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800273a:	7dfb      	ldrb	r3, [r7, #23]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800274c:	2300      	movs	r3, #0
 800274e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d008      	beq.n	800276e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2204      	movs	r2, #4
 8002760:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e020      	b.n	80027b0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 020e 	bic.w	r2, r2, #14
 800277c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0201 	bic.w	r2, r2, #1
 800278c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002796:	2101      	movs	r1, #1
 8002798:	fa01 f202 	lsl.w	r2, r1, r2
 800279c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr
	...

080027bc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	2204      	movs	r2, #4
 80027da:	409a      	lsls	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4013      	ands	r3, r2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d04f      	beq.n	8002884 <HAL_DMA_IRQHandler+0xc8>
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f003 0304 	and.w	r3, r3, #4
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d04a      	beq.n	8002884 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0320 	and.w	r3, r3, #32
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d107      	bne.n	800280c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0204 	bic.w	r2, r2, #4
 800280a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a66      	ldr	r2, [pc, #408]	; (80029ac <HAL_DMA_IRQHandler+0x1f0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d029      	beq.n	800286a <HAL_DMA_IRQHandler+0xae>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a65      	ldr	r2, [pc, #404]	; (80029b0 <HAL_DMA_IRQHandler+0x1f4>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d022      	beq.n	8002866 <HAL_DMA_IRQHandler+0xaa>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a63      	ldr	r2, [pc, #396]	; (80029b4 <HAL_DMA_IRQHandler+0x1f8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d01a      	beq.n	8002860 <HAL_DMA_IRQHandler+0xa4>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a62      	ldr	r2, [pc, #392]	; (80029b8 <HAL_DMA_IRQHandler+0x1fc>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d012      	beq.n	800285a <HAL_DMA_IRQHandler+0x9e>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a60      	ldr	r2, [pc, #384]	; (80029bc <HAL_DMA_IRQHandler+0x200>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d00a      	beq.n	8002854 <HAL_DMA_IRQHandler+0x98>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a5f      	ldr	r2, [pc, #380]	; (80029c0 <HAL_DMA_IRQHandler+0x204>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d102      	bne.n	800284e <HAL_DMA_IRQHandler+0x92>
 8002848:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800284c:	e00e      	b.n	800286c <HAL_DMA_IRQHandler+0xb0>
 800284e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002852:	e00b      	b.n	800286c <HAL_DMA_IRQHandler+0xb0>
 8002854:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002858:	e008      	b.n	800286c <HAL_DMA_IRQHandler+0xb0>
 800285a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800285e:	e005      	b.n	800286c <HAL_DMA_IRQHandler+0xb0>
 8002860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002864:	e002      	b.n	800286c <HAL_DMA_IRQHandler+0xb0>
 8002866:	2340      	movs	r3, #64	; 0x40
 8002868:	e000      	b.n	800286c <HAL_DMA_IRQHandler+0xb0>
 800286a:	2304      	movs	r3, #4
 800286c:	4a55      	ldr	r2, [pc, #340]	; (80029c4 <HAL_DMA_IRQHandler+0x208>)
 800286e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 8094 	beq.w	80029a2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002882:	e08e      	b.n	80029a2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	2202      	movs	r2, #2
 800288a:	409a      	lsls	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4013      	ands	r3, r2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d056      	beq.n	8002942 <HAL_DMA_IRQHandler+0x186>
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d051      	beq.n	8002942 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0320 	and.w	r3, r3, #32
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10b      	bne.n	80028c4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 020a 	bic.w	r2, r2, #10
 80028ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a38      	ldr	r2, [pc, #224]	; (80029ac <HAL_DMA_IRQHandler+0x1f0>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d029      	beq.n	8002922 <HAL_DMA_IRQHandler+0x166>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a37      	ldr	r2, [pc, #220]	; (80029b0 <HAL_DMA_IRQHandler+0x1f4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d022      	beq.n	800291e <HAL_DMA_IRQHandler+0x162>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a35      	ldr	r2, [pc, #212]	; (80029b4 <HAL_DMA_IRQHandler+0x1f8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d01a      	beq.n	8002918 <HAL_DMA_IRQHandler+0x15c>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a34      	ldr	r2, [pc, #208]	; (80029b8 <HAL_DMA_IRQHandler+0x1fc>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d012      	beq.n	8002912 <HAL_DMA_IRQHandler+0x156>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a32      	ldr	r2, [pc, #200]	; (80029bc <HAL_DMA_IRQHandler+0x200>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00a      	beq.n	800290c <HAL_DMA_IRQHandler+0x150>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a31      	ldr	r2, [pc, #196]	; (80029c0 <HAL_DMA_IRQHandler+0x204>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d102      	bne.n	8002906 <HAL_DMA_IRQHandler+0x14a>
 8002900:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002904:	e00e      	b.n	8002924 <HAL_DMA_IRQHandler+0x168>
 8002906:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800290a:	e00b      	b.n	8002924 <HAL_DMA_IRQHandler+0x168>
 800290c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002910:	e008      	b.n	8002924 <HAL_DMA_IRQHandler+0x168>
 8002912:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002916:	e005      	b.n	8002924 <HAL_DMA_IRQHandler+0x168>
 8002918:	f44f 7300 	mov.w	r3, #512	; 0x200
 800291c:	e002      	b.n	8002924 <HAL_DMA_IRQHandler+0x168>
 800291e:	2320      	movs	r3, #32
 8002920:	e000      	b.n	8002924 <HAL_DMA_IRQHandler+0x168>
 8002922:	2302      	movs	r3, #2
 8002924:	4a27      	ldr	r2, [pc, #156]	; (80029c4 <HAL_DMA_IRQHandler+0x208>)
 8002926:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002934:	2b00      	cmp	r3, #0
 8002936:	d034      	beq.n	80029a2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002940:	e02f      	b.n	80029a2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	2208      	movs	r2, #8
 8002948:	409a      	lsls	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4013      	ands	r3, r2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d028      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x1e8>
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	2b00      	cmp	r3, #0
 800295a:	d023      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 020e 	bic.w	r2, r2, #14
 800296a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002974:	2101      	movs	r1, #1
 8002976:	fa01 f202 	lsl.w	r2, r1, r2
 800297a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	2b00      	cmp	r3, #0
 8002998:	d004      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	4798      	blx	r3
    }
  }
  return;
 80029a2:	bf00      	nop
 80029a4:	bf00      	nop
}
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40020008 	.word	0x40020008
 80029b0:	4002001c 	.word	0x4002001c
 80029b4:	40020030 	.word	0x40020030
 80029b8:	40020044 	.word	0x40020044
 80029bc:	40020058 	.word	0x40020058
 80029c0:	4002006c 	.word	0x4002006c
 80029c4:	40020000 	.word	0x40020000

080029c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
 80029d4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029de:	2101      	movs	r1, #1
 80029e0:	fa01 f202 	lsl.w	r2, r1, r2
 80029e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b10      	cmp	r3, #16
 80029f4:	d108      	bne.n	8002a08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a06:	e007      	b.n	8002a18 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	60da      	str	r2, [r3, #12]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr
	...

08002a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b08b      	sub	sp, #44	; 0x2c
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a32:	2300      	movs	r3, #0
 8002a34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a36:	e169      	b.n	8002d0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a38:	2201      	movs	r2, #1
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	69fa      	ldr	r2, [r7, #28]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	f040 8158 	bne.w	8002d06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	4a9a      	ldr	r2, [pc, #616]	; (8002cc4 <HAL_GPIO_Init+0x2a0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d05e      	beq.n	8002b1e <HAL_GPIO_Init+0xfa>
 8002a60:	4a98      	ldr	r2, [pc, #608]	; (8002cc4 <HAL_GPIO_Init+0x2a0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d875      	bhi.n	8002b52 <HAL_GPIO_Init+0x12e>
 8002a66:	4a98      	ldr	r2, [pc, #608]	; (8002cc8 <HAL_GPIO_Init+0x2a4>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d058      	beq.n	8002b1e <HAL_GPIO_Init+0xfa>
 8002a6c:	4a96      	ldr	r2, [pc, #600]	; (8002cc8 <HAL_GPIO_Init+0x2a4>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d86f      	bhi.n	8002b52 <HAL_GPIO_Init+0x12e>
 8002a72:	4a96      	ldr	r2, [pc, #600]	; (8002ccc <HAL_GPIO_Init+0x2a8>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d052      	beq.n	8002b1e <HAL_GPIO_Init+0xfa>
 8002a78:	4a94      	ldr	r2, [pc, #592]	; (8002ccc <HAL_GPIO_Init+0x2a8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d869      	bhi.n	8002b52 <HAL_GPIO_Init+0x12e>
 8002a7e:	4a94      	ldr	r2, [pc, #592]	; (8002cd0 <HAL_GPIO_Init+0x2ac>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d04c      	beq.n	8002b1e <HAL_GPIO_Init+0xfa>
 8002a84:	4a92      	ldr	r2, [pc, #584]	; (8002cd0 <HAL_GPIO_Init+0x2ac>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d863      	bhi.n	8002b52 <HAL_GPIO_Init+0x12e>
 8002a8a:	4a92      	ldr	r2, [pc, #584]	; (8002cd4 <HAL_GPIO_Init+0x2b0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d046      	beq.n	8002b1e <HAL_GPIO_Init+0xfa>
 8002a90:	4a90      	ldr	r2, [pc, #576]	; (8002cd4 <HAL_GPIO_Init+0x2b0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d85d      	bhi.n	8002b52 <HAL_GPIO_Init+0x12e>
 8002a96:	2b12      	cmp	r3, #18
 8002a98:	d82a      	bhi.n	8002af0 <HAL_GPIO_Init+0xcc>
 8002a9a:	2b12      	cmp	r3, #18
 8002a9c:	d859      	bhi.n	8002b52 <HAL_GPIO_Init+0x12e>
 8002a9e:	a201      	add	r2, pc, #4	; (adr r2, 8002aa4 <HAL_GPIO_Init+0x80>)
 8002aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa4:	08002b1f 	.word	0x08002b1f
 8002aa8:	08002af9 	.word	0x08002af9
 8002aac:	08002b0b 	.word	0x08002b0b
 8002ab0:	08002b4d 	.word	0x08002b4d
 8002ab4:	08002b53 	.word	0x08002b53
 8002ab8:	08002b53 	.word	0x08002b53
 8002abc:	08002b53 	.word	0x08002b53
 8002ac0:	08002b53 	.word	0x08002b53
 8002ac4:	08002b53 	.word	0x08002b53
 8002ac8:	08002b53 	.word	0x08002b53
 8002acc:	08002b53 	.word	0x08002b53
 8002ad0:	08002b53 	.word	0x08002b53
 8002ad4:	08002b53 	.word	0x08002b53
 8002ad8:	08002b53 	.word	0x08002b53
 8002adc:	08002b53 	.word	0x08002b53
 8002ae0:	08002b53 	.word	0x08002b53
 8002ae4:	08002b53 	.word	0x08002b53
 8002ae8:	08002b01 	.word	0x08002b01
 8002aec:	08002b15 	.word	0x08002b15
 8002af0:	4a79      	ldr	r2, [pc, #484]	; (8002cd8 <HAL_GPIO_Init+0x2b4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d013      	beq.n	8002b1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002af6:	e02c      	b.n	8002b52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	623b      	str	r3, [r7, #32]
          break;
 8002afe:	e029      	b.n	8002b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	3304      	adds	r3, #4
 8002b06:	623b      	str	r3, [r7, #32]
          break;
 8002b08:	e024      	b.n	8002b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	3308      	adds	r3, #8
 8002b10:	623b      	str	r3, [r7, #32]
          break;
 8002b12:	e01f      	b.n	8002b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	330c      	adds	r3, #12
 8002b1a:	623b      	str	r3, [r7, #32]
          break;
 8002b1c:	e01a      	b.n	8002b54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d102      	bne.n	8002b2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b26:	2304      	movs	r3, #4
 8002b28:	623b      	str	r3, [r7, #32]
          break;
 8002b2a:	e013      	b.n	8002b54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d105      	bne.n	8002b40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b34:	2308      	movs	r3, #8
 8002b36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	611a      	str	r2, [r3, #16]
          break;
 8002b3e:	e009      	b.n	8002b54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b40:	2308      	movs	r3, #8
 8002b42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	615a      	str	r2, [r3, #20]
          break;
 8002b4a:	e003      	b.n	8002b54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	623b      	str	r3, [r7, #32]
          break;
 8002b50:	e000      	b.n	8002b54 <HAL_GPIO_Init+0x130>
          break;
 8002b52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	2bff      	cmp	r3, #255	; 0xff
 8002b58:	d801      	bhi.n	8002b5e <HAL_GPIO_Init+0x13a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	e001      	b.n	8002b62 <HAL_GPIO_Init+0x13e>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3304      	adds	r3, #4
 8002b62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	2bff      	cmp	r3, #255	; 0xff
 8002b68:	d802      	bhi.n	8002b70 <HAL_GPIO_Init+0x14c>
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	e002      	b.n	8002b76 <HAL_GPIO_Init+0x152>
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	3b08      	subs	r3, #8
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	210f      	movs	r1, #15
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	fa01 f303 	lsl.w	r3, r1, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	401a      	ands	r2, r3
 8002b88:	6a39      	ldr	r1, [r7, #32]
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b90:	431a      	orrs	r2, r3
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 80b1 	beq.w	8002d06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ba4:	4b4d      	ldr	r3, [pc, #308]	; (8002cdc <HAL_GPIO_Init+0x2b8>)
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	4a4c      	ldr	r2, [pc, #304]	; (8002cdc <HAL_GPIO_Init+0x2b8>)
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	6193      	str	r3, [r2, #24]
 8002bb0:	4b4a      	ldr	r3, [pc, #296]	; (8002cdc <HAL_GPIO_Init+0x2b8>)
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bbc:	4a48      	ldr	r2, [pc, #288]	; (8002ce0 <HAL_GPIO_Init+0x2bc>)
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	089b      	lsrs	r3, r3, #2
 8002bc2:	3302      	adds	r3, #2
 8002bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	220f      	movs	r2, #15
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a40      	ldr	r2, [pc, #256]	; (8002ce4 <HAL_GPIO_Init+0x2c0>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d013      	beq.n	8002c10 <HAL_GPIO_Init+0x1ec>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a3f      	ldr	r2, [pc, #252]	; (8002ce8 <HAL_GPIO_Init+0x2c4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00d      	beq.n	8002c0c <HAL_GPIO_Init+0x1e8>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a3e      	ldr	r2, [pc, #248]	; (8002cec <HAL_GPIO_Init+0x2c8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d007      	beq.n	8002c08 <HAL_GPIO_Init+0x1e4>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a3d      	ldr	r2, [pc, #244]	; (8002cf0 <HAL_GPIO_Init+0x2cc>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d101      	bne.n	8002c04 <HAL_GPIO_Init+0x1e0>
 8002c00:	2303      	movs	r3, #3
 8002c02:	e006      	b.n	8002c12 <HAL_GPIO_Init+0x1ee>
 8002c04:	2304      	movs	r3, #4
 8002c06:	e004      	b.n	8002c12 <HAL_GPIO_Init+0x1ee>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e002      	b.n	8002c12 <HAL_GPIO_Init+0x1ee>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <HAL_GPIO_Init+0x1ee>
 8002c10:	2300      	movs	r3, #0
 8002c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c14:	f002 0203 	and.w	r2, r2, #3
 8002c18:	0092      	lsls	r2, r2, #2
 8002c1a:	4093      	lsls	r3, r2
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c22:	492f      	ldr	r1, [pc, #188]	; (8002ce0 <HAL_GPIO_Init+0x2bc>)
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	089b      	lsrs	r3, r3, #2
 8002c28:	3302      	adds	r3, #2
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d006      	beq.n	8002c4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c3c:	4b2d      	ldr	r3, [pc, #180]	; (8002cf4 <HAL_GPIO_Init+0x2d0>)
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	492c      	ldr	r1, [pc, #176]	; (8002cf4 <HAL_GPIO_Init+0x2d0>)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	608b      	str	r3, [r1, #8]
 8002c48:	e006      	b.n	8002c58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c4a:	4b2a      	ldr	r3, [pc, #168]	; (8002cf4 <HAL_GPIO_Init+0x2d0>)
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	43db      	mvns	r3, r3
 8002c52:	4928      	ldr	r1, [pc, #160]	; (8002cf4 <HAL_GPIO_Init+0x2d0>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d006      	beq.n	8002c72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c64:	4b23      	ldr	r3, [pc, #140]	; (8002cf4 <HAL_GPIO_Init+0x2d0>)
 8002c66:	68da      	ldr	r2, [r3, #12]
 8002c68:	4922      	ldr	r1, [pc, #136]	; (8002cf4 <HAL_GPIO_Init+0x2d0>)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	60cb      	str	r3, [r1, #12]
 8002c70:	e006      	b.n	8002c80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c72:	4b20      	ldr	r3, [pc, #128]	; (8002cf4 <HAL_GPIO_Init+0x2d0>)
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	491e      	ldr	r1, [pc, #120]	; (8002cf4 <HAL_GPIO_Init+0x2d0>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d006      	beq.n	8002c9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c8c:	4b19      	ldr	r3, [pc, #100]	; (8002cf4 <HAL_GPIO_Init+0x2d0>)
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	4918      	ldr	r1, [pc, #96]	; (8002cf4 <HAL_GPIO_Init+0x2d0>)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	604b      	str	r3, [r1, #4]
 8002c98:	e006      	b.n	8002ca8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c9a:	4b16      	ldr	r3, [pc, #88]	; (8002cf4 <HAL_GPIO_Init+0x2d0>)
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	4914      	ldr	r1, [pc, #80]	; (8002cf4 <HAL_GPIO_Init+0x2d0>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d021      	beq.n	8002cf8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cb4:	4b0f      	ldr	r3, [pc, #60]	; (8002cf4 <HAL_GPIO_Init+0x2d0>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	490e      	ldr	r1, [pc, #56]	; (8002cf4 <HAL_GPIO_Init+0x2d0>)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	600b      	str	r3, [r1, #0]
 8002cc0:	e021      	b.n	8002d06 <HAL_GPIO_Init+0x2e2>
 8002cc2:	bf00      	nop
 8002cc4:	10320000 	.word	0x10320000
 8002cc8:	10310000 	.word	0x10310000
 8002ccc:	10220000 	.word	0x10220000
 8002cd0:	10210000 	.word	0x10210000
 8002cd4:	10120000 	.word	0x10120000
 8002cd8:	10110000 	.word	0x10110000
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40010000 	.word	0x40010000
 8002ce4:	40010800 	.word	0x40010800
 8002ce8:	40010c00 	.word	0x40010c00
 8002cec:	40011000 	.word	0x40011000
 8002cf0:	40011400 	.word	0x40011400
 8002cf4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cf8:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <HAL_GPIO_Init+0x304>)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	4909      	ldr	r1, [pc, #36]	; (8002d28 <HAL_GPIO_Init+0x304>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	3301      	adds	r3, #1
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	fa22 f303 	lsr.w	r3, r2, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f47f ae8e 	bne.w	8002a38 <HAL_GPIO_Init+0x14>
  }
}
 8002d1c:	bf00      	nop
 8002d1e:	bf00      	nop
 8002d20:	372c      	adds	r7, #44	; 0x2c
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr
 8002d28:	40010400 	.word	0x40010400

08002d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	807b      	strh	r3, [r7, #2]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d3c:	787b      	ldrb	r3, [r7, #1]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d42:	887a      	ldrh	r2, [r7, #2]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d48:	e003      	b.n	8002d52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d4a:	887b      	ldrh	r3, [r7, #2]
 8002d4c:	041a      	lsls	r2, r3, #16
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	611a      	str	r2, [r3, #16]
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr

08002d5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d6e:	887a      	ldrh	r2, [r7, #2]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4013      	ands	r3, r2
 8002d74:	041a      	lsls	r2, r3, #16
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	43d9      	mvns	r1, r3
 8002d7a:	887b      	ldrh	r3, [r7, #2]
 8002d7c:	400b      	ands	r3, r1
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	611a      	str	r2, [r3, #16]
}
 8002d84:	bf00      	nop
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr
	...

08002d90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d9a:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d9c:	695a      	ldr	r2, [r3, #20]
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	4013      	ands	r3, r2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d006      	beq.n	8002db4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002da6:	4a05      	ldr	r2, [pc, #20]	; (8002dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002da8:	88fb      	ldrh	r3, [r7, #6]
 8002daa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 f806 	bl	8002dc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002db4:	bf00      	nop
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40010400 	.word	0x40010400

08002dc0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e272      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 8087 	beq.w	8002f02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002df4:	4b92      	ldr	r3, [pc, #584]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 030c 	and.w	r3, r3, #12
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d00c      	beq.n	8002e1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e00:	4b8f      	ldr	r3, [pc, #572]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 030c 	and.w	r3, r3, #12
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d112      	bne.n	8002e32 <HAL_RCC_OscConfig+0x5e>
 8002e0c:	4b8c      	ldr	r3, [pc, #560]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e18:	d10b      	bne.n	8002e32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e1a:	4b89      	ldr	r3, [pc, #548]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d06c      	beq.n	8002f00 <HAL_RCC_OscConfig+0x12c>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d168      	bne.n	8002f00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e24c      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e3a:	d106      	bne.n	8002e4a <HAL_RCC_OscConfig+0x76>
 8002e3c:	4b80      	ldr	r3, [pc, #512]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a7f      	ldr	r2, [pc, #508]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	e02e      	b.n	8002ea8 <HAL_RCC_OscConfig+0xd4>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x98>
 8002e52:	4b7b      	ldr	r3, [pc, #492]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a7a      	ldr	r2, [pc, #488]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	4b78      	ldr	r3, [pc, #480]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a77      	ldr	r2, [pc, #476]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	e01d      	b.n	8002ea8 <HAL_RCC_OscConfig+0xd4>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e74:	d10c      	bne.n	8002e90 <HAL_RCC_OscConfig+0xbc>
 8002e76:	4b72      	ldr	r3, [pc, #456]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a71      	ldr	r2, [pc, #452]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	4b6f      	ldr	r3, [pc, #444]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a6e      	ldr	r2, [pc, #440]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	e00b      	b.n	8002ea8 <HAL_RCC_OscConfig+0xd4>
 8002e90:	4b6b      	ldr	r3, [pc, #428]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a6a      	ldr	r2, [pc, #424]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e9a:	6013      	str	r3, [r2, #0]
 8002e9c:	4b68      	ldr	r3, [pc, #416]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a67      	ldr	r2, [pc, #412]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ea6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d013      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7fe fe68 	bl	8001b84 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb8:	f7fe fe64 	bl	8001b84 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b64      	cmp	r3, #100	; 0x64
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e200      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eca:	4b5d      	ldr	r3, [pc, #372]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0f0      	beq.n	8002eb8 <HAL_RCC_OscConfig+0xe4>
 8002ed6:	e014      	b.n	8002f02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed8:	f7fe fe54 	bl	8001b84 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee0:	f7fe fe50 	bl	8001b84 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b64      	cmp	r3, #100	; 0x64
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e1ec      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef2:	4b53      	ldr	r3, [pc, #332]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f0      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x10c>
 8002efe:	e000      	b.n	8002f02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d063      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f0e:	4b4c      	ldr	r3, [pc, #304]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00b      	beq.n	8002f32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f1a:	4b49      	ldr	r3, [pc, #292]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d11c      	bne.n	8002f60 <HAL_RCC_OscConfig+0x18c>
 8002f26:	4b46      	ldr	r3, [pc, #280]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d116      	bne.n	8002f60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f32:	4b43      	ldr	r3, [pc, #268]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d005      	beq.n	8002f4a <HAL_RCC_OscConfig+0x176>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d001      	beq.n	8002f4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e1c0      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4a:	4b3d      	ldr	r3, [pc, #244]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4939      	ldr	r1, [pc, #228]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5e:	e03a      	b.n	8002fd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d020      	beq.n	8002faa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f68:	4b36      	ldr	r3, [pc, #216]	; (8003044 <HAL_RCC_OscConfig+0x270>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6e:	f7fe fe09 	bl	8001b84 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f76:	f7fe fe05 	bl	8001b84 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e1a1      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f88:	4b2d      	ldr	r3, [pc, #180]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f94:	4b2a      	ldr	r3, [pc, #168]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	4927      	ldr	r1, [pc, #156]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	600b      	str	r3, [r1, #0]
 8002fa8:	e015      	b.n	8002fd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002faa:	4b26      	ldr	r3, [pc, #152]	; (8003044 <HAL_RCC_OscConfig+0x270>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb0:	f7fe fde8 	bl	8001b84 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb8:	f7fe fde4 	bl	8001b84 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e180      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fca:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d03a      	beq.n	8003058 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d019      	beq.n	800301e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fea:	4b17      	ldr	r3, [pc, #92]	; (8003048 <HAL_RCC_OscConfig+0x274>)
 8002fec:	2201      	movs	r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff0:	f7fe fdc8 	bl	8001b84 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff8:	f7fe fdc4 	bl	8001b84 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e160      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300a:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003016:	2001      	movs	r0, #1
 8003018:	f000 fafe 	bl	8003618 <RCC_Delay>
 800301c:	e01c      	b.n	8003058 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800301e:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <HAL_RCC_OscConfig+0x274>)
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003024:	f7fe fdae 	bl	8001b84 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800302a:	e00f      	b.n	800304c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800302c:	f7fe fdaa 	bl	8001b84 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d908      	bls.n	800304c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e146      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
 800303e:	bf00      	nop
 8003040:	40021000 	.word	0x40021000
 8003044:	42420000 	.word	0x42420000
 8003048:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800304c:	4b92      	ldr	r3, [pc, #584]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1e9      	bne.n	800302c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 80a6 	beq.w	80031b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003066:	2300      	movs	r3, #0
 8003068:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800306a:	4b8b      	ldr	r3, [pc, #556]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10d      	bne.n	8003092 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003076:	4b88      	ldr	r3, [pc, #544]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	4a87      	ldr	r2, [pc, #540]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 800307c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003080:	61d3      	str	r3, [r2, #28]
 8003082:	4b85      	ldr	r3, [pc, #532]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308a:	60bb      	str	r3, [r7, #8]
 800308c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800308e:	2301      	movs	r3, #1
 8003090:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003092:	4b82      	ldr	r3, [pc, #520]	; (800329c <HAL_RCC_OscConfig+0x4c8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309a:	2b00      	cmp	r3, #0
 800309c:	d118      	bne.n	80030d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800309e:	4b7f      	ldr	r3, [pc, #508]	; (800329c <HAL_RCC_OscConfig+0x4c8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a7e      	ldr	r2, [pc, #504]	; (800329c <HAL_RCC_OscConfig+0x4c8>)
 80030a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030aa:	f7fe fd6b 	bl	8001b84 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b2:	f7fe fd67 	bl	8001b84 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b64      	cmp	r3, #100	; 0x64
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e103      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c4:	4b75      	ldr	r3, [pc, #468]	; (800329c <HAL_RCC_OscConfig+0x4c8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0f0      	beq.n	80030b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d106      	bne.n	80030e6 <HAL_RCC_OscConfig+0x312>
 80030d8:	4b6f      	ldr	r3, [pc, #444]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	4a6e      	ldr	r2, [pc, #440]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 80030de:	f043 0301 	orr.w	r3, r3, #1
 80030e2:	6213      	str	r3, [r2, #32]
 80030e4:	e02d      	b.n	8003142 <HAL_RCC_OscConfig+0x36e>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10c      	bne.n	8003108 <HAL_RCC_OscConfig+0x334>
 80030ee:	4b6a      	ldr	r3, [pc, #424]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	4a69      	ldr	r2, [pc, #420]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 80030f4:	f023 0301 	bic.w	r3, r3, #1
 80030f8:	6213      	str	r3, [r2, #32]
 80030fa:	4b67      	ldr	r3, [pc, #412]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	4a66      	ldr	r2, [pc, #408]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 8003100:	f023 0304 	bic.w	r3, r3, #4
 8003104:	6213      	str	r3, [r2, #32]
 8003106:	e01c      	b.n	8003142 <HAL_RCC_OscConfig+0x36e>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	2b05      	cmp	r3, #5
 800310e:	d10c      	bne.n	800312a <HAL_RCC_OscConfig+0x356>
 8003110:	4b61      	ldr	r3, [pc, #388]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	4a60      	ldr	r2, [pc, #384]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 8003116:	f043 0304 	orr.w	r3, r3, #4
 800311a:	6213      	str	r3, [r2, #32]
 800311c:	4b5e      	ldr	r3, [pc, #376]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	4a5d      	ldr	r2, [pc, #372]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	6213      	str	r3, [r2, #32]
 8003128:	e00b      	b.n	8003142 <HAL_RCC_OscConfig+0x36e>
 800312a:	4b5b      	ldr	r3, [pc, #364]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	4a5a      	ldr	r2, [pc, #360]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 8003130:	f023 0301 	bic.w	r3, r3, #1
 8003134:	6213      	str	r3, [r2, #32]
 8003136:	4b58      	ldr	r3, [pc, #352]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	4a57      	ldr	r2, [pc, #348]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 800313c:	f023 0304 	bic.w	r3, r3, #4
 8003140:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d015      	beq.n	8003176 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314a:	f7fe fd1b 	bl	8001b84 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003150:	e00a      	b.n	8003168 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003152:	f7fe fd17 	bl	8001b84 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003160:	4293      	cmp	r3, r2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e0b1      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003168:	4b4b      	ldr	r3, [pc, #300]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0ee      	beq.n	8003152 <HAL_RCC_OscConfig+0x37e>
 8003174:	e014      	b.n	80031a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003176:	f7fe fd05 	bl	8001b84 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800317c:	e00a      	b.n	8003194 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317e:	f7fe fd01 	bl	8001b84 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	f241 3288 	movw	r2, #5000	; 0x1388
 800318c:	4293      	cmp	r3, r2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e09b      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003194:	4b40      	ldr	r3, [pc, #256]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1ee      	bne.n	800317e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031a0:	7dfb      	ldrb	r3, [r7, #23]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d105      	bne.n	80031b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a6:	4b3c      	ldr	r3, [pc, #240]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	4a3b      	ldr	r2, [pc, #236]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 80031ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 8087 	beq.w	80032ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031bc:	4b36      	ldr	r3, [pc, #216]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 030c 	and.w	r3, r3, #12
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d061      	beq.n	800328c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d146      	bne.n	800325e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d0:	4b33      	ldr	r3, [pc, #204]	; (80032a0 <HAL_RCC_OscConfig+0x4cc>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d6:	f7fe fcd5 	bl	8001b84 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031de:	f7fe fcd1 	bl	8001b84 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e06d      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f0:	4b29      	ldr	r3, [pc, #164]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1f0      	bne.n	80031de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003204:	d108      	bne.n	8003218 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003206:	4b24      	ldr	r3, [pc, #144]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	4921      	ldr	r1, [pc, #132]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 8003214:	4313      	orrs	r3, r2
 8003216:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003218:	4b1f      	ldr	r3, [pc, #124]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a19      	ldr	r1, [r3, #32]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	430b      	orrs	r3, r1
 800322a:	491b      	ldr	r1, [pc, #108]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 800322c:	4313      	orrs	r3, r2
 800322e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003230:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <HAL_RCC_OscConfig+0x4cc>)
 8003232:	2201      	movs	r2, #1
 8003234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003236:	f7fe fca5 	bl	8001b84 <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323e:	f7fe fca1 	bl	8001b84 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e03d      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003250:	4b11      	ldr	r3, [pc, #68]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0f0      	beq.n	800323e <HAL_RCC_OscConfig+0x46a>
 800325c:	e035      	b.n	80032ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325e:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <HAL_RCC_OscConfig+0x4cc>)
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003264:	f7fe fc8e 	bl	8001b84 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326c:	f7fe fc8a 	bl	8001b84 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e026      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800327e:	4b06      	ldr	r3, [pc, #24]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f0      	bne.n	800326c <HAL_RCC_OscConfig+0x498>
 800328a:	e01e      	b.n	80032ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d107      	bne.n	80032a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e019      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
 8003298:	40021000 	.word	0x40021000
 800329c:	40007000 	.word	0x40007000
 80032a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032a4:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <HAL_RCC_OscConfig+0x500>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d106      	bne.n	80032c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d001      	beq.n	80032ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e000      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40021000 	.word	0x40021000

080032d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0d0      	b.n	800348e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032ec:	4b6a      	ldr	r3, [pc, #424]	; (8003498 <HAL_RCC_ClockConfig+0x1c0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d910      	bls.n	800331c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fa:	4b67      	ldr	r3, [pc, #412]	; (8003498 <HAL_RCC_ClockConfig+0x1c0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 0207 	bic.w	r2, r3, #7
 8003302:	4965      	ldr	r1, [pc, #404]	; (8003498 <HAL_RCC_ClockConfig+0x1c0>)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	4313      	orrs	r3, r2
 8003308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800330a:	4b63      	ldr	r3, [pc, #396]	; (8003498 <HAL_RCC_ClockConfig+0x1c0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	d001      	beq.n	800331c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e0b8      	b.n	800348e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d020      	beq.n	800336a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003334:	4b59      	ldr	r3, [pc, #356]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	4a58      	ldr	r2, [pc, #352]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 800333a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800333e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	2b00      	cmp	r3, #0
 800334a:	d005      	beq.n	8003358 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800334c:	4b53      	ldr	r3, [pc, #332]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	4a52      	ldr	r2, [pc, #328]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 8003352:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003356:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003358:	4b50      	ldr	r3, [pc, #320]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	494d      	ldr	r1, [pc, #308]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 8003366:	4313      	orrs	r3, r2
 8003368:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d040      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d107      	bne.n	800338e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337e:	4b47      	ldr	r3, [pc, #284]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d115      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e07f      	b.n	800348e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d107      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003396:	4b41      	ldr	r3, [pc, #260]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d109      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e073      	b.n	800348e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a6:	4b3d      	ldr	r3, [pc, #244]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e06b      	b.n	800348e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033b6:	4b39      	ldr	r3, [pc, #228]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f023 0203 	bic.w	r2, r3, #3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	4936      	ldr	r1, [pc, #216]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033c8:	f7fe fbdc 	bl	8001b84 <HAL_GetTick>
 80033cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ce:	e00a      	b.n	80033e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d0:	f7fe fbd8 	bl	8001b84 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	f241 3288 	movw	r2, #5000	; 0x1388
 80033de:	4293      	cmp	r3, r2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e053      	b.n	800348e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e6:	4b2d      	ldr	r3, [pc, #180]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f003 020c 	and.w	r2, r3, #12
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d1eb      	bne.n	80033d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033f8:	4b27      	ldr	r3, [pc, #156]	; (8003498 <HAL_RCC_ClockConfig+0x1c0>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d210      	bcs.n	8003428 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003406:	4b24      	ldr	r3, [pc, #144]	; (8003498 <HAL_RCC_ClockConfig+0x1c0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f023 0207 	bic.w	r2, r3, #7
 800340e:	4922      	ldr	r1, [pc, #136]	; (8003498 <HAL_RCC_ClockConfig+0x1c0>)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	4313      	orrs	r3, r2
 8003414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003416:	4b20      	ldr	r3, [pc, #128]	; (8003498 <HAL_RCC_ClockConfig+0x1c0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d001      	beq.n	8003428 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e032      	b.n	800348e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d008      	beq.n	8003446 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003434:	4b19      	ldr	r3, [pc, #100]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	4916      	ldr	r1, [pc, #88]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 8003442:	4313      	orrs	r3, r2
 8003444:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b00      	cmp	r3, #0
 8003450:	d009      	beq.n	8003466 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003452:	4b12      	ldr	r3, [pc, #72]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	490e      	ldr	r1, [pc, #56]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 8003462:	4313      	orrs	r3, r2
 8003464:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003466:	f000 f821 	bl	80034ac <HAL_RCC_GetSysClockFreq>
 800346a:	4602      	mov	r2, r0
 800346c:	4b0b      	ldr	r3, [pc, #44]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	091b      	lsrs	r3, r3, #4
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	490a      	ldr	r1, [pc, #40]	; (80034a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003478:	5ccb      	ldrb	r3, [r1, r3]
 800347a:	fa22 f303 	lsr.w	r3, r2, r3
 800347e:	4a09      	ldr	r2, [pc, #36]	; (80034a4 <HAL_RCC_ClockConfig+0x1cc>)
 8003480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003482:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <HAL_RCC_ClockConfig+0x1d0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f7fe f9d8 	bl	800183c <HAL_InitTick>

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40022000 	.word	0x40022000
 800349c:	40021000 	.word	0x40021000
 80034a0:	08006ae0 	.word	0x08006ae0
 80034a4:	2000000c 	.word	0x2000000c
 80034a8:	20000010 	.word	0x20000010

080034ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	2300      	movs	r3, #0
 80034b8:	60bb      	str	r3, [r7, #8]
 80034ba:	2300      	movs	r3, #0
 80034bc:	617b      	str	r3, [r7, #20]
 80034be:	2300      	movs	r3, #0
 80034c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034c6:	4b1e      	ldr	r3, [pc, #120]	; (8003540 <HAL_RCC_GetSysClockFreq+0x94>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f003 030c 	and.w	r3, r3, #12
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d002      	beq.n	80034dc <HAL_RCC_GetSysClockFreq+0x30>
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d003      	beq.n	80034e2 <HAL_RCC_GetSysClockFreq+0x36>
 80034da:	e027      	b.n	800352c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034dc:	4b19      	ldr	r3, [pc, #100]	; (8003544 <HAL_RCC_GetSysClockFreq+0x98>)
 80034de:	613b      	str	r3, [r7, #16]
      break;
 80034e0:	e027      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	0c9b      	lsrs	r3, r3, #18
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	4a17      	ldr	r2, [pc, #92]	; (8003548 <HAL_RCC_GetSysClockFreq+0x9c>)
 80034ec:	5cd3      	ldrb	r3, [r2, r3]
 80034ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d010      	beq.n	800351c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034fa:	4b11      	ldr	r3, [pc, #68]	; (8003540 <HAL_RCC_GetSysClockFreq+0x94>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	0c5b      	lsrs	r3, r3, #17
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	4a11      	ldr	r2, [pc, #68]	; (800354c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003506:	5cd3      	ldrb	r3, [r2, r3]
 8003508:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a0d      	ldr	r2, [pc, #52]	; (8003544 <HAL_RCC_GetSysClockFreq+0x98>)
 800350e:	fb03 f202 	mul.w	r2, r3, r2
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	fbb2 f3f3 	udiv	r3, r2, r3
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	e004      	b.n	8003526 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a0c      	ldr	r2, [pc, #48]	; (8003550 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003520:	fb02 f303 	mul.w	r3, r2, r3
 8003524:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	613b      	str	r3, [r7, #16]
      break;
 800352a:	e002      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800352c:	4b05      	ldr	r3, [pc, #20]	; (8003544 <HAL_RCC_GetSysClockFreq+0x98>)
 800352e:	613b      	str	r3, [r7, #16]
      break;
 8003530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003532:	693b      	ldr	r3, [r7, #16]
}
 8003534:	4618      	mov	r0, r3
 8003536:	371c      	adds	r7, #28
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	40021000 	.word	0x40021000
 8003544:	007a1200 	.word	0x007a1200
 8003548:	08006af8 	.word	0x08006af8
 800354c:	08006b08 	.word	0x08006b08
 8003550:	003d0900 	.word	0x003d0900

08003554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003558:	4b02      	ldr	r3, [pc, #8]	; (8003564 <HAL_RCC_GetHCLKFreq+0x10>)
 800355a:	681b      	ldr	r3, [r3, #0]
}
 800355c:	4618      	mov	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	bc80      	pop	{r7}
 8003562:	4770      	bx	lr
 8003564:	2000000c 	.word	0x2000000c

08003568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800356c:	f7ff fff2 	bl	8003554 <HAL_RCC_GetHCLKFreq>
 8003570:	4602      	mov	r2, r0
 8003572:	4b05      	ldr	r3, [pc, #20]	; (8003588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	0a1b      	lsrs	r3, r3, #8
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	4903      	ldr	r1, [pc, #12]	; (800358c <HAL_RCC_GetPCLK1Freq+0x24>)
 800357e:	5ccb      	ldrb	r3, [r1, r3]
 8003580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003584:	4618      	mov	r0, r3
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40021000 	.word	0x40021000
 800358c:	08006af0 	.word	0x08006af0

08003590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003594:	f7ff ffde 	bl	8003554 <HAL_RCC_GetHCLKFreq>
 8003598:	4602      	mov	r2, r0
 800359a:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	0adb      	lsrs	r3, r3, #11
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	4903      	ldr	r1, [pc, #12]	; (80035b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035a6:	5ccb      	ldrb	r3, [r1, r3]
 80035a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40021000 	.word	0x40021000
 80035b4:	08006af0 	.word	0x08006af0

080035b8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	220f      	movs	r2, #15
 80035c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035c8:	4b11      	ldr	r3, [pc, #68]	; (8003610 <HAL_RCC_GetClockConfig+0x58>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 0203 	and.w	r2, r3, #3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80035d4:	4b0e      	ldr	r3, [pc, #56]	; (8003610 <HAL_RCC_GetClockConfig+0x58>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80035e0:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <HAL_RCC_GetClockConfig+0x58>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80035ec:	4b08      	ldr	r3, [pc, #32]	; (8003610 <HAL_RCC_GetClockConfig+0x58>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	08db      	lsrs	r3, r3, #3
 80035f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80035fa:	4b06      	ldr	r3, [pc, #24]	; (8003614 <HAL_RCC_GetClockConfig+0x5c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0207 	and.w	r2, r3, #7
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr
 8003610:	40021000 	.word	0x40021000
 8003614:	40022000 	.word	0x40022000

08003618 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003620:	4b0a      	ldr	r3, [pc, #40]	; (800364c <RCC_Delay+0x34>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a0a      	ldr	r2, [pc, #40]	; (8003650 <RCC_Delay+0x38>)
 8003626:	fba2 2303 	umull	r2, r3, r2, r3
 800362a:	0a5b      	lsrs	r3, r3, #9
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	fb02 f303 	mul.w	r3, r2, r3
 8003632:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003634:	bf00      	nop
  }
  while (Delay --);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	1e5a      	subs	r2, r3, #1
 800363a:	60fa      	str	r2, [r7, #12]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1f9      	bne.n	8003634 <RCC_Delay+0x1c>
}
 8003640:	bf00      	nop
 8003642:	bf00      	nop
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr
 800364c:	2000000c 	.word	0x2000000c
 8003650:	10624dd3 	.word	0x10624dd3

08003654 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	613b      	str	r3, [r7, #16]
 8003660:	2300      	movs	r3, #0
 8003662:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b00      	cmp	r3, #0
 800366e:	d07d      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003670:	2300      	movs	r3, #0
 8003672:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003674:	4b4f      	ldr	r3, [pc, #316]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10d      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003680:	4b4c      	ldr	r3, [pc, #304]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	4a4b      	ldr	r2, [pc, #300]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800368a:	61d3      	str	r3, [r2, #28]
 800368c:	4b49      	ldr	r3, [pc, #292]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003698:	2301      	movs	r3, #1
 800369a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369c:	4b46      	ldr	r3, [pc, #280]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d118      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036a8:	4b43      	ldr	r3, [pc, #268]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a42      	ldr	r2, [pc, #264]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036b4:	f7fe fa66 	bl	8001b84 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ba:	e008      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036bc:	f7fe fa62 	bl	8001b84 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b64      	cmp	r3, #100	; 0x64
 80036c8:	d901      	bls.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e06d      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ce:	4b3a      	ldr	r3, [pc, #232]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0f0      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036da:	4b36      	ldr	r3, [pc, #216]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d02e      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d027      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036f8:	4b2e      	ldr	r3, [pc, #184]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003700:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003702:	4b2e      	ldr	r3, [pc, #184]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003704:	2201      	movs	r2, #1
 8003706:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003708:	4b2c      	ldr	r3, [pc, #176]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800370e:	4a29      	ldr	r2, [pc, #164]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d014      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371e:	f7fe fa31 	bl	8001b84 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003724:	e00a      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003726:	f7fe fa2d 	bl	8001b84 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	f241 3288 	movw	r2, #5000	; 0x1388
 8003734:	4293      	cmp	r3, r2
 8003736:	d901      	bls.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e036      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800373c:	4b1d      	ldr	r3, [pc, #116]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0ee      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003748:	4b1a      	ldr	r3, [pc, #104]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	4917      	ldr	r1, [pc, #92]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003756:	4313      	orrs	r3, r2
 8003758:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800375a:	7dfb      	ldrb	r3, [r7, #23]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d105      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003760:	4b14      	ldr	r3, [pc, #80]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	4a13      	ldr	r2, [pc, #76]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800376a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d008      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003778:	4b0e      	ldr	r3, [pc, #56]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	490b      	ldr	r1, [pc, #44]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003786:	4313      	orrs	r3, r2
 8003788:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0310 	and.w	r3, r3, #16
 8003792:	2b00      	cmp	r3, #0
 8003794:	d008      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003796:	4b07      	ldr	r3, [pc, #28]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	4904      	ldr	r1, [pc, #16]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40021000 	.word	0x40021000
 80037b8:	40007000 	.word	0x40007000
 80037bc:	42420440 	.word	0x42420440

080037c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e076      	b.n	80038c0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d108      	bne.n	80037ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037e2:	d009      	beq.n	80037f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	61da      	str	r2, [r3, #28]
 80037ea:	e005      	b.n	80037f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d106      	bne.n	8003818 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7fd ff8e 	bl	8001734 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2202      	movs	r2, #2
 800381c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800382e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	431a      	orrs	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003868:	431a      	orrs	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387c:	ea42 0103 	orr.w	r1, r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003884:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	0c1a      	lsrs	r2, r3, #16
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f002 0204 	and.w	r2, r2, #4
 800389e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	69da      	ldr	r2, [r3, #28]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e041      	b.n	800395e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d106      	bne.n	80038f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f839 	bl	8003966 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3304      	adds	r3, #4
 8003904:	4619      	mov	r1, r3
 8003906:	4610      	mov	r0, r2
 8003908:	f000 f9b4 	bl	8003c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr

08003978 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b01      	cmp	r3, #1
 800398a:	d001      	beq.n	8003990 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e03a      	b.n	8003a06 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a18      	ldr	r2, [pc, #96]	; (8003a10 <HAL_TIM_Base_Start_IT+0x98>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d00e      	beq.n	80039d0 <HAL_TIM_Base_Start_IT+0x58>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ba:	d009      	beq.n	80039d0 <HAL_TIM_Base_Start_IT+0x58>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a14      	ldr	r2, [pc, #80]	; (8003a14 <HAL_TIM_Base_Start_IT+0x9c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d004      	beq.n	80039d0 <HAL_TIM_Base_Start_IT+0x58>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a13      	ldr	r2, [pc, #76]	; (8003a18 <HAL_TIM_Base_Start_IT+0xa0>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d111      	bne.n	80039f4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2b06      	cmp	r3, #6
 80039e0:	d010      	beq.n	8003a04 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f042 0201 	orr.w	r2, r2, #1
 80039f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f2:	e007      	b.n	8003a04 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0201 	orr.w	r2, r2, #1
 8003a02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr
 8003a10:	40012c00 	.word	0x40012c00
 8003a14:	40000400 	.word	0x40000400
 8003a18:	40000800 	.word	0x40000800

08003a1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d122      	bne.n	8003a78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d11b      	bne.n	8003a78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f06f 0202 	mvn.w	r2, #2
 8003a48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f8ed 	bl	8003c3e <HAL_TIM_IC_CaptureCallback>
 8003a64:	e005      	b.n	8003a72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f8e0 	bl	8003c2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f8ef 	bl	8003c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d122      	bne.n	8003acc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d11b      	bne.n	8003acc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f06f 0204 	mvn.w	r2, #4
 8003a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f8c3 	bl	8003c3e <HAL_TIM_IC_CaptureCallback>
 8003ab8:	e005      	b.n	8003ac6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f8b6 	bl	8003c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f8c5 	bl	8003c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d122      	bne.n	8003b20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d11b      	bne.n	8003b20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f06f 0208 	mvn.w	r2, #8
 8003af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2204      	movs	r2, #4
 8003af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f899 	bl	8003c3e <HAL_TIM_IC_CaptureCallback>
 8003b0c:	e005      	b.n	8003b1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f88c 	bl	8003c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f89b 	bl	8003c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f003 0310 	and.w	r3, r3, #16
 8003b2a:	2b10      	cmp	r3, #16
 8003b2c:	d122      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	2b10      	cmp	r3, #16
 8003b3a:	d11b      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f06f 0210 	mvn.w	r2, #16
 8003b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2208      	movs	r2, #8
 8003b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f86f 	bl	8003c3e <HAL_TIM_IC_CaptureCallback>
 8003b60:	e005      	b.n	8003b6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f862 	bl	8003c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f871 	bl	8003c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d10e      	bne.n	8003ba0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d107      	bne.n	8003ba0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0201 	mvn.w	r2, #1
 8003b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fd fd7c 	bl	8001698 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003baa:	2b80      	cmp	r3, #128	; 0x80
 8003bac:	d10e      	bne.n	8003bcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb8:	2b80      	cmp	r3, #128	; 0x80
 8003bba:	d107      	bne.n	8003bcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f8bf 	bl	8003d4a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd6:	2b40      	cmp	r3, #64	; 0x40
 8003bd8:	d10e      	bne.n	8003bf8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be4:	2b40      	cmp	r3, #64	; 0x40
 8003be6:	d107      	bne.n	8003bf8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f835 	bl	8003c62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	f003 0320 	and.w	r3, r3, #32
 8003c02:	2b20      	cmp	r3, #32
 8003c04:	d10e      	bne.n	8003c24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f003 0320 	and.w	r3, r3, #32
 8003c10:	2b20      	cmp	r3, #32
 8003c12:	d107      	bne.n	8003c24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f06f 0220 	mvn.w	r2, #32
 8003c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f88a 	bl	8003d38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c24:	bf00      	nop
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bc80      	pop	{r7}
 8003c3c:	4770      	bx	lr

08003c3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bc80      	pop	{r7}
 8003c4e:	4770      	bx	lr

08003c50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc80      	pop	{r7}
 8003c60:	4770      	bx	lr

08003c62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr

08003c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a29      	ldr	r2, [pc, #164]	; (8003d2c <TIM_Base_SetConfig+0xb8>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d00b      	beq.n	8003ca4 <TIM_Base_SetConfig+0x30>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c92:	d007      	beq.n	8003ca4 <TIM_Base_SetConfig+0x30>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a26      	ldr	r2, [pc, #152]	; (8003d30 <TIM_Base_SetConfig+0xbc>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d003      	beq.n	8003ca4 <TIM_Base_SetConfig+0x30>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a25      	ldr	r2, [pc, #148]	; (8003d34 <TIM_Base_SetConfig+0xc0>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d108      	bne.n	8003cb6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a1c      	ldr	r2, [pc, #112]	; (8003d2c <TIM_Base_SetConfig+0xb8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00b      	beq.n	8003cd6 <TIM_Base_SetConfig+0x62>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc4:	d007      	beq.n	8003cd6 <TIM_Base_SetConfig+0x62>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a19      	ldr	r2, [pc, #100]	; (8003d30 <TIM_Base_SetConfig+0xbc>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d003      	beq.n	8003cd6 <TIM_Base_SetConfig+0x62>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a18      	ldr	r2, [pc, #96]	; (8003d34 <TIM_Base_SetConfig+0xc0>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d108      	bne.n	8003ce8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a07      	ldr	r2, [pc, #28]	; (8003d2c <TIM_Base_SetConfig+0xb8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d103      	bne.n	8003d1c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	691a      	ldr	r2, [r3, #16]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	615a      	str	r2, [r3, #20]
}
 8003d22:	bf00      	nop
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40000400 	.word	0x40000400
 8003d34:	40000800 	.word	0x40000800

08003d38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bc80      	pop	{r7}
 8003d48:	4770      	bx	lr

08003d4a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc80      	pop	{r7}
 8003d5a:	4770      	bx	lr

08003d5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e042      	b.n	8003df4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d106      	bne.n	8003d88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7fd fe64 	bl	8001a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2224      	movs	r2, #36	; 0x24
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f91d 	bl	8003fe0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003db4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	695a      	ldr	r2, [r3, #20]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b08a      	sub	sp, #40	; 0x28
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b20      	cmp	r3, #32
 8003e1a:	d16d      	bne.n	8003ef8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <HAL_UART_Transmit+0x2c>
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e066      	b.n	8003efa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2221      	movs	r2, #33	; 0x21
 8003e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e3a:	f7fd fea3 	bl	8001b84 <HAL_GetTick>
 8003e3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	88fa      	ldrh	r2, [r7, #6]
 8003e44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	88fa      	ldrh	r2, [r7, #6]
 8003e4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e54:	d108      	bne.n	8003e68 <HAL_UART_Transmit+0x6c>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d104      	bne.n	8003e68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	61bb      	str	r3, [r7, #24]
 8003e66:	e003      	b.n	8003e70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e70:	e02a      	b.n	8003ec8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	2180      	movs	r1, #128	; 0x80
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 f840 	bl	8003f02 <UART_WaitOnFlagUntilTimeout>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e036      	b.n	8003efa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10b      	bne.n	8003eaa <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	881b      	ldrh	r3, [r3, #0]
 8003e96:	461a      	mov	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ea0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	3302      	adds	r3, #2
 8003ea6:	61bb      	str	r3, [r7, #24]
 8003ea8:	e007      	b.n	8003eba <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	781a      	ldrb	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1cf      	bne.n	8003e72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	2140      	movs	r1, #64	; 0x40
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 f810 	bl	8003f02 <UART_WaitOnFlagUntilTimeout>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e006      	b.n	8003efa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	e000      	b.n	8003efa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003ef8:	2302      	movs	r3, #2
  }
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3720      	adds	r7, #32
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b090      	sub	sp, #64	; 0x40
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	60f8      	str	r0, [r7, #12]
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	603b      	str	r3, [r7, #0]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f12:	e050      	b.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1a:	d04c      	beq.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d007      	beq.n	8003f32 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f22:	f7fd fe2f 	bl	8001b84 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d241      	bcs.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	330c      	adds	r3, #12
 8003f38:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3c:	e853 3f00 	ldrex	r3, [r3]
 8003f40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	330c      	adds	r3, #12
 8003f50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f52:	637a      	str	r2, [r7, #52]	; 0x34
 8003f54:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f5a:	e841 2300 	strex	r3, r2, [r1]
 8003f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e5      	bne.n	8003f32 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3314      	adds	r3, #20
 8003f6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	e853 3f00 	ldrex	r3, [r3]
 8003f74:	613b      	str	r3, [r7, #16]
   return(result);
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	f023 0301 	bic.w	r3, r3, #1
 8003f7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3314      	adds	r3, #20
 8003f84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f86:	623a      	str	r2, [r7, #32]
 8003f88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8a:	69f9      	ldr	r1, [r7, #28]
 8003f8c:	6a3a      	ldr	r2, [r7, #32]
 8003f8e:	e841 2300 	strex	r3, r2, [r1]
 8003f92:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1e5      	bne.n	8003f66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e00f      	b.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	bf0c      	ite	eq
 8003fc6:	2301      	moveq	r3, #1
 8003fc8:	2300      	movne	r3, #0
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	461a      	mov	r2, r3
 8003fce:	79fb      	ldrb	r3, [r7, #7]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d09f      	beq.n	8003f14 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3740      	adds	r7, #64	; 0x40
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	4313      	orrs	r3, r2
 800400e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800401a:	f023 030c 	bic.w	r3, r3, #12
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6812      	ldr	r2, [r2, #0]
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	430b      	orrs	r3, r1
 8004026:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	699a      	ldr	r2, [r3, #24]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a2c      	ldr	r2, [pc, #176]	; (80040f4 <UART_SetConfig+0x114>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d103      	bne.n	8004050 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004048:	f7ff faa2 	bl	8003590 <HAL_RCC_GetPCLK2Freq>
 800404c:	60f8      	str	r0, [r7, #12]
 800404e:	e002      	b.n	8004056 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004050:	f7ff fa8a 	bl	8003568 <HAL_RCC_GetPCLK1Freq>
 8004054:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	4613      	mov	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	009a      	lsls	r2, r3, #2
 8004060:	441a      	add	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	fbb2 f3f3 	udiv	r3, r2, r3
 800406c:	4a22      	ldr	r2, [pc, #136]	; (80040f8 <UART_SetConfig+0x118>)
 800406e:	fba2 2303 	umull	r2, r3, r2, r3
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	0119      	lsls	r1, r3, #4
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	4613      	mov	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	009a      	lsls	r2, r3, #2
 8004080:	441a      	add	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	fbb2 f2f3 	udiv	r2, r2, r3
 800408c:	4b1a      	ldr	r3, [pc, #104]	; (80040f8 <UART_SetConfig+0x118>)
 800408e:	fba3 0302 	umull	r0, r3, r3, r2
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	2064      	movs	r0, #100	; 0x64
 8004096:	fb00 f303 	mul.w	r3, r0, r3
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	3332      	adds	r3, #50	; 0x32
 80040a0:	4a15      	ldr	r2, [pc, #84]	; (80040f8 <UART_SetConfig+0x118>)
 80040a2:	fba2 2303 	umull	r2, r3, r2, r3
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040ac:	4419      	add	r1, r3
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	4613      	mov	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	009a      	lsls	r2, r3, #2
 80040b8:	441a      	add	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040c4:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <UART_SetConfig+0x118>)
 80040c6:	fba3 0302 	umull	r0, r3, r3, r2
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	2064      	movs	r0, #100	; 0x64
 80040ce:	fb00 f303 	mul.w	r3, r0, r3
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	011b      	lsls	r3, r3, #4
 80040d6:	3332      	adds	r3, #50	; 0x32
 80040d8:	4a07      	ldr	r2, [pc, #28]	; (80040f8 <UART_SetConfig+0x118>)
 80040da:	fba2 2303 	umull	r2, r3, r2, r3
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	f003 020f 	and.w	r2, r3, #15
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	440a      	add	r2, r1
 80040ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80040ec:	bf00      	nop
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40013800 	.word	0x40013800
 80040f8:	51eb851f 	.word	0x51eb851f

080040fc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	4603      	mov	r3, r0
 8004104:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004106:	2300      	movs	r3, #0
 8004108:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800410a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800410e:	2b84      	cmp	r3, #132	; 0x84
 8004110:	d005      	beq.n	800411e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004112:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4413      	add	r3, r2
 800411a:	3303      	adds	r3, #3
 800411c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800411e:	68fb      	ldr	r3, [r7, #12]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	bc80      	pop	{r7}
 8004128:	4770      	bx	lr

0800412a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800412e:	f000 fa51 	bl	80045d4 <vTaskStartScheduler>
  
  return osOK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	bd80      	pop	{r7, pc}

08004138 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800413a:	b089      	sub	sp, #36	; 0x24
 800413c:	af04      	add	r7, sp, #16
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d020      	beq.n	800418c <osThreadCreate+0x54>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d01c      	beq.n	800418c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685c      	ldr	r4, [r3, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681d      	ldr	r5, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691e      	ldr	r6, [r3, #16]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff ffc9 	bl	80040fc <makeFreeRtosPriority>
 800416a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004174:	9202      	str	r2, [sp, #8]
 8004176:	9301      	str	r3, [sp, #4]
 8004178:	9100      	str	r1, [sp, #0]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	4632      	mov	r2, r6
 800417e:	4629      	mov	r1, r5
 8004180:	4620      	mov	r0, r4
 8004182:	f000 f89c 	bl	80042be <xTaskCreateStatic>
 8004186:	4603      	mov	r3, r0
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	e01c      	b.n	80041c6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685c      	ldr	r4, [r3, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004198:	b29e      	uxth	r6, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7ff ffab 	bl	80040fc <makeFreeRtosPriority>
 80041a6:	4602      	mov	r2, r0
 80041a8:	f107 030c 	add.w	r3, r7, #12
 80041ac:	9301      	str	r3, [sp, #4]
 80041ae:	9200      	str	r2, [sp, #0]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	4632      	mov	r2, r6
 80041b4:	4629      	mov	r1, r5
 80041b6:	4620      	mov	r0, r4
 80041b8:	f000 f8dd 	bl	8004376 <xTaskCreate>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d001      	beq.n	80041c6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	e000      	b.n	80041c8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80041c6:	68fb      	ldr	r3, [r7, #12]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f103 0208 	add.w	r2, r3, #8
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f04f 32ff 	mov.w	r2, #4294967295
 80041e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f103 0208 	add.w	r2, r3, #8
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f103 0208 	add.w	r2, r3, #8
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	bc80      	pop	{r7}
 800420c:	4770      	bx	lr

0800420e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr

08004226 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004226:	b480      	push	{r7}
 8004228:	b085      	sub	sp, #20
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	601a      	str	r2, [r3, #0]
}
 8004262:	bf00      	nop
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr

0800426c <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6892      	ldr	r2, [r2, #8]
 8004282:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6852      	ldr	r2, [r2, #4]
 800428c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	429a      	cmp	r2, r3
 8004296:	d103      	bne.n	80042a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	1e5a      	subs	r2, r3, #1
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bc80      	pop	{r7}
 80042bc:	4770      	bx	lr

080042be <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b08e      	sub	sp, #56	; 0x38
 80042c2:	af04      	add	r7, sp, #16
 80042c4:	60f8      	str	r0, [r7, #12]
 80042c6:	60b9      	str	r1, [r7, #8]
 80042c8:	607a      	str	r2, [r7, #4]
 80042ca:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80042cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10a      	bne.n	80042e8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80042d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80042e4:	bf00      	nop
 80042e6:	e7fe      	b.n	80042e6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80042e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10a      	bne.n	8004304 <xTaskCreateStatic+0x46>
	__asm volatile
 80042ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	61fb      	str	r3, [r7, #28]
}
 8004300:	bf00      	nop
 8004302:	e7fe      	b.n	8004302 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004304:	2354      	movs	r3, #84	; 0x54
 8004306:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	2b54      	cmp	r3, #84	; 0x54
 800430c:	d00a      	beq.n	8004324 <xTaskCreateStatic+0x66>
	__asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	61bb      	str	r3, [r7, #24]
}
 8004320:	bf00      	nop
 8004322:	e7fe      	b.n	8004322 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004326:	2b00      	cmp	r3, #0
 8004328:	d01e      	beq.n	8004368 <xTaskCreateStatic+0xaa>
 800432a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800432c:	2b00      	cmp	r3, #0
 800432e:	d01b      	beq.n	8004368 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004338:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	2202      	movs	r2, #2
 800433e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004342:	2300      	movs	r3, #0
 8004344:	9303      	str	r3, [sp, #12]
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	9302      	str	r3, [sp, #8]
 800434a:	f107 0314 	add.w	r3, r7, #20
 800434e:	9301      	str	r3, [sp, #4]
 8004350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	68b9      	ldr	r1, [r7, #8]
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 f850 	bl	8004400 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004360:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004362:	f000 f8cd 	bl	8004500 <prvAddNewTaskToReadyList>
 8004366:	e001      	b.n	800436c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800436c:	697b      	ldr	r3, [r7, #20]
	}
 800436e:	4618      	mov	r0, r3
 8004370:	3728      	adds	r7, #40	; 0x28
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004376:	b580      	push	{r7, lr}
 8004378:	b08c      	sub	sp, #48	; 0x30
 800437a:	af04      	add	r7, sp, #16
 800437c:	60f8      	str	r0, [r7, #12]
 800437e:	60b9      	str	r1, [r7, #8]
 8004380:	603b      	str	r3, [r7, #0]
 8004382:	4613      	mov	r3, r2
 8004384:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004386:	88fb      	ldrh	r3, [r7, #6]
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4618      	mov	r0, r3
 800438c:	f000 fdd0 	bl	8004f30 <pvPortMalloc>
 8004390:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00e      	beq.n	80043b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004398:	2054      	movs	r0, #84	; 0x54
 800439a:	f000 fdc9 	bl	8004f30 <pvPortMalloc>
 800439e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	631a      	str	r2, [r3, #48]	; 0x30
 80043ac:	e005      	b.n	80043ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043ae:	6978      	ldr	r0, [r7, #20]
 80043b0:	f000 fe82 	bl	80050b8 <vPortFree>
 80043b4:	e001      	b.n	80043ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043b6:	2300      	movs	r3, #0
 80043b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d017      	beq.n	80043f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043c8:	88fa      	ldrh	r2, [r7, #6]
 80043ca:	2300      	movs	r3, #0
 80043cc:	9303      	str	r3, [sp, #12]
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	9302      	str	r3, [sp, #8]
 80043d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d4:	9301      	str	r3, [sp, #4]
 80043d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68b9      	ldr	r1, [r7, #8]
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 f80e 	bl	8004400 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043e4:	69f8      	ldr	r0, [r7, #28]
 80043e6:	f000 f88b 	bl	8004500 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80043ea:	2301      	movs	r3, #1
 80043ec:	61bb      	str	r3, [r7, #24]
 80043ee:	e002      	b.n	80043f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043f0:	f04f 33ff 	mov.w	r3, #4294967295
 80043f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80043f6:	69bb      	ldr	r3, [r7, #24]
	}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3720      	adds	r7, #32
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004418:	3b01      	subs	r3, #1
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	f023 0307 	bic.w	r3, r3, #7
 8004426:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	617b      	str	r3, [r7, #20]
}
 8004444:	bf00      	nop
 8004446:	e7fe      	b.n	8004446 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004448:	2300      	movs	r3, #0
 800444a:	61fb      	str	r3, [r7, #28]
 800444c:	e012      	b.n	8004474 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	4413      	add	r3, r2
 8004454:	7819      	ldrb	r1, [r3, #0]
 8004456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	4413      	add	r3, r2
 800445c:	3334      	adds	r3, #52	; 0x34
 800445e:	460a      	mov	r2, r1
 8004460:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	4413      	add	r3, r2
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d006      	beq.n	800447c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	3301      	adds	r3, #1
 8004472:	61fb      	str	r3, [r7, #28]
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	2b0f      	cmp	r3, #15
 8004478:	d9e9      	bls.n	800444e <prvInitialiseNewTask+0x4e>
 800447a:	e000      	b.n	800447e <prvInitialiseNewTask+0x7e>
		{
			break;
 800447c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800447e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004488:	2b06      	cmp	r3, #6
 800448a:	d901      	bls.n	8004490 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800448c:	2306      	movs	r3, #6
 800448e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004492:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004494:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004498:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800449a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800449c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449e:	2200      	movs	r2, #0
 80044a0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a4:	3304      	adds	r3, #4
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff feb1 	bl	800420e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ae:	3318      	adds	r3, #24
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff feac 	bl	800420e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044be:	f1c3 0207 	rsb	r2, r3, #7
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ce:	2200      	movs	r2, #0
 80044d0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	68f9      	ldr	r1, [r7, #12]
 80044de:	69b8      	ldr	r0, [r7, #24]
 80044e0:	f000 fb74 	bl	8004bcc <pxPortInitialiseStack>
 80044e4:	4602      	mov	r2, r0
 80044e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80044ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d002      	beq.n	80044f6 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80044f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044f6:	bf00      	nop
 80044f8:	3720      	adds	r7, #32
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
	...

08004500 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004508:	f000 fc50 	bl	8004dac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800450c:	4b2a      	ldr	r3, [pc, #168]	; (80045b8 <prvAddNewTaskToReadyList+0xb8>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3301      	adds	r3, #1
 8004512:	4a29      	ldr	r2, [pc, #164]	; (80045b8 <prvAddNewTaskToReadyList+0xb8>)
 8004514:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004516:	4b29      	ldr	r3, [pc, #164]	; (80045bc <prvAddNewTaskToReadyList+0xbc>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d109      	bne.n	8004532 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800451e:	4a27      	ldr	r2, [pc, #156]	; (80045bc <prvAddNewTaskToReadyList+0xbc>)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004524:	4b24      	ldr	r3, [pc, #144]	; (80045b8 <prvAddNewTaskToReadyList+0xb8>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d110      	bne.n	800454e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800452c:	f000 fa8c 	bl	8004a48 <prvInitialiseTaskLists>
 8004530:	e00d      	b.n	800454e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004532:	4b23      	ldr	r3, [pc, #140]	; (80045c0 <prvAddNewTaskToReadyList+0xc0>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d109      	bne.n	800454e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800453a:	4b20      	ldr	r3, [pc, #128]	; (80045bc <prvAddNewTaskToReadyList+0xbc>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004544:	429a      	cmp	r2, r3
 8004546:	d802      	bhi.n	800454e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004548:	4a1c      	ldr	r2, [pc, #112]	; (80045bc <prvAddNewTaskToReadyList+0xbc>)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800454e:	4b1d      	ldr	r3, [pc, #116]	; (80045c4 <prvAddNewTaskToReadyList+0xc4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3301      	adds	r3, #1
 8004554:	4a1b      	ldr	r2, [pc, #108]	; (80045c4 <prvAddNewTaskToReadyList+0xc4>)
 8004556:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	2201      	movs	r2, #1
 800455e:	409a      	lsls	r2, r3
 8004560:	4b19      	ldr	r3, [pc, #100]	; (80045c8 <prvAddNewTaskToReadyList+0xc8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4313      	orrs	r3, r2
 8004566:	4a18      	ldr	r2, [pc, #96]	; (80045c8 <prvAddNewTaskToReadyList+0xc8>)
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456e:	4613      	mov	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4a15      	ldr	r2, [pc, #84]	; (80045cc <prvAddNewTaskToReadyList+0xcc>)
 8004578:	441a      	add	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3304      	adds	r3, #4
 800457e:	4619      	mov	r1, r3
 8004580:	4610      	mov	r0, r2
 8004582:	f7ff fe50 	bl	8004226 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004586:	f000 fc41 	bl	8004e0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800458a:	4b0d      	ldr	r3, [pc, #52]	; (80045c0 <prvAddNewTaskToReadyList+0xc0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00e      	beq.n	80045b0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004592:	4b0a      	ldr	r3, [pc, #40]	; (80045bc <prvAddNewTaskToReadyList+0xbc>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	429a      	cmp	r2, r3
 800459e:	d207      	bcs.n	80045b0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045a0:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <prvAddNewTaskToReadyList+0xd0>)
 80045a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045b0:	bf00      	nop
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	200005e0 	.word	0x200005e0
 80045bc:	200004e0 	.word	0x200004e0
 80045c0:	200005ec 	.word	0x200005ec
 80045c4:	200005fc 	.word	0x200005fc
 80045c8:	200005e8 	.word	0x200005e8
 80045cc:	200004e4 	.word	0x200004e4
 80045d0:	e000ed04 	.word	0xe000ed04

080045d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08a      	sub	sp, #40	; 0x28
 80045d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80045de:	2300      	movs	r3, #0
 80045e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80045e2:	463a      	mov	r2, r7
 80045e4:	1d39      	adds	r1, r7, #4
 80045e6:	f107 0308 	add.w	r3, r7, #8
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fc fd98 	bl	8001120 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80045f0:	6839      	ldr	r1, [r7, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	9202      	str	r2, [sp, #8]
 80045f8:	9301      	str	r3, [sp, #4]
 80045fa:	2300      	movs	r3, #0
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	2300      	movs	r3, #0
 8004600:	460a      	mov	r2, r1
 8004602:	491e      	ldr	r1, [pc, #120]	; (800467c <vTaskStartScheduler+0xa8>)
 8004604:	481e      	ldr	r0, [pc, #120]	; (8004680 <vTaskStartScheduler+0xac>)
 8004606:	f7ff fe5a 	bl	80042be <xTaskCreateStatic>
 800460a:	4603      	mov	r3, r0
 800460c:	4a1d      	ldr	r2, [pc, #116]	; (8004684 <vTaskStartScheduler+0xb0>)
 800460e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004610:	4b1c      	ldr	r3, [pc, #112]	; (8004684 <vTaskStartScheduler+0xb0>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004618:	2301      	movs	r3, #1
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	e001      	b.n	8004622 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800461e:	2300      	movs	r3, #0
 8004620:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d116      	bne.n	8004656 <vTaskStartScheduler+0x82>
	__asm volatile
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	613b      	str	r3, [r7, #16]
}
 800463a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800463c:	4b12      	ldr	r3, [pc, #72]	; (8004688 <vTaskStartScheduler+0xb4>)
 800463e:	f04f 32ff 	mov.w	r2, #4294967295
 8004642:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004644:	4b11      	ldr	r3, [pc, #68]	; (800468c <vTaskStartScheduler+0xb8>)
 8004646:	2201      	movs	r2, #1
 8004648:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800464a:	4b11      	ldr	r3, [pc, #68]	; (8004690 <vTaskStartScheduler+0xbc>)
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004650:	f000 fb3a 	bl	8004cc8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004654:	e00e      	b.n	8004674 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465c:	d10a      	bne.n	8004674 <vTaskStartScheduler+0xa0>
	__asm volatile
 800465e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	60fb      	str	r3, [r7, #12]
}
 8004670:	bf00      	nop
 8004672:	e7fe      	b.n	8004672 <vTaskStartScheduler+0x9e>
}
 8004674:	bf00      	nop
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	08006ad8 	.word	0x08006ad8
 8004680:	08004a19 	.word	0x08004a19
 8004684:	20000604 	.word	0x20000604
 8004688:	20000600 	.word	0x20000600
 800468c:	200005ec 	.word	0x200005ec
 8004690:	200005e4 	.word	0x200005e4

08004694 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004698:	4b04      	ldr	r3, [pc, #16]	; (80046ac <vTaskSuspendAll+0x18>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3301      	adds	r3, #1
 800469e:	4a03      	ldr	r2, [pc, #12]	; (80046ac <vTaskSuspendAll+0x18>)
 80046a0:	6013      	str	r3, [r2, #0]
}
 80046a2:	bf00      	nop
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	20000608 	.word	0x20000608

080046b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80046b6:	2300      	movs	r3, #0
 80046b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80046ba:	2300      	movs	r3, #0
 80046bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80046be:	4b41      	ldr	r3, [pc, #260]	; (80047c4 <xTaskResumeAll+0x114>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10a      	bne.n	80046dc <xTaskResumeAll+0x2c>
	__asm volatile
 80046c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ca:	f383 8811 	msr	BASEPRI, r3
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f3bf 8f4f 	dsb	sy
 80046d6:	603b      	str	r3, [r7, #0]
}
 80046d8:	bf00      	nop
 80046da:	e7fe      	b.n	80046da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80046dc:	f000 fb66 	bl	8004dac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046e0:	4b38      	ldr	r3, [pc, #224]	; (80047c4 <xTaskResumeAll+0x114>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3b01      	subs	r3, #1
 80046e6:	4a37      	ldr	r2, [pc, #220]	; (80047c4 <xTaskResumeAll+0x114>)
 80046e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046ea:	4b36      	ldr	r3, [pc, #216]	; (80047c4 <xTaskResumeAll+0x114>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d161      	bne.n	80047b6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046f2:	4b35      	ldr	r3, [pc, #212]	; (80047c8 <xTaskResumeAll+0x118>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d05d      	beq.n	80047b6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046fa:	e02e      	b.n	800475a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80046fc:	4b33      	ldr	r3, [pc, #204]	; (80047cc <xTaskResumeAll+0x11c>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	3318      	adds	r3, #24
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff fdaf 	bl	800426c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	3304      	adds	r3, #4
 8004712:	4618      	mov	r0, r3
 8004714:	f7ff fdaa 	bl	800426c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471c:	2201      	movs	r2, #1
 800471e:	409a      	lsls	r2, r3
 8004720:	4b2b      	ldr	r3, [pc, #172]	; (80047d0 <xTaskResumeAll+0x120>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4313      	orrs	r3, r2
 8004726:	4a2a      	ldr	r2, [pc, #168]	; (80047d0 <xTaskResumeAll+0x120>)
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800472e:	4613      	mov	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4413      	add	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4a27      	ldr	r2, [pc, #156]	; (80047d4 <xTaskResumeAll+0x124>)
 8004738:	441a      	add	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	3304      	adds	r3, #4
 800473e:	4619      	mov	r1, r3
 8004740:	4610      	mov	r0, r2
 8004742:	f7ff fd70 	bl	8004226 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800474a:	4b23      	ldr	r3, [pc, #140]	; (80047d8 <xTaskResumeAll+0x128>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004750:	429a      	cmp	r2, r3
 8004752:	d302      	bcc.n	800475a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004754:	4b21      	ldr	r3, [pc, #132]	; (80047dc <xTaskResumeAll+0x12c>)
 8004756:	2201      	movs	r2, #1
 8004758:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800475a:	4b1c      	ldr	r3, [pc, #112]	; (80047cc <xTaskResumeAll+0x11c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1cc      	bne.n	80046fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004768:	f000 fa0c 	bl	8004b84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800476c:	4b1c      	ldr	r3, [pc, #112]	; (80047e0 <xTaskResumeAll+0x130>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d010      	beq.n	800479a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004778:	f000 f836 	bl	80047e8 <xTaskIncrementTick>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004782:	4b16      	ldr	r3, [pc, #88]	; (80047dc <xTaskResumeAll+0x12c>)
 8004784:	2201      	movs	r2, #1
 8004786:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3b01      	subs	r3, #1
 800478c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1f1      	bne.n	8004778 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004794:	4b12      	ldr	r3, [pc, #72]	; (80047e0 <xTaskResumeAll+0x130>)
 8004796:	2200      	movs	r2, #0
 8004798:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800479a:	4b10      	ldr	r3, [pc, #64]	; (80047dc <xTaskResumeAll+0x12c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d009      	beq.n	80047b6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80047a2:	2301      	movs	r3, #1
 80047a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80047a6:	4b0f      	ldr	r3, [pc, #60]	; (80047e4 <xTaskResumeAll+0x134>)
 80047a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047b6:	f000 fb29 	bl	8004e0c <vPortExitCritical>

	return xAlreadyYielded;
 80047ba:	68bb      	ldr	r3, [r7, #8]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	20000608 	.word	0x20000608
 80047c8:	200005e0 	.word	0x200005e0
 80047cc:	200005a0 	.word	0x200005a0
 80047d0:	200005e8 	.word	0x200005e8
 80047d4:	200004e4 	.word	0x200004e4
 80047d8:	200004e0 	.word	0x200004e0
 80047dc:	200005f4 	.word	0x200005f4
 80047e0:	200005f0 	.word	0x200005f0
 80047e4:	e000ed04 	.word	0xe000ed04

080047e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80047ee:	2300      	movs	r3, #0
 80047f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047f2:	4b51      	ldr	r3, [pc, #324]	; (8004938 <xTaskIncrementTick+0x150>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f040 808d 	bne.w	8004916 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047fc:	4b4f      	ldr	r3, [pc, #316]	; (800493c <xTaskIncrementTick+0x154>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	3301      	adds	r3, #1
 8004802:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004804:	4a4d      	ldr	r2, [pc, #308]	; (800493c <xTaskIncrementTick+0x154>)
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d120      	bne.n	8004852 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004810:	4b4b      	ldr	r3, [pc, #300]	; (8004940 <xTaskIncrementTick+0x158>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <xTaskIncrementTick+0x48>
	__asm volatile
 800481a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481e:	f383 8811 	msr	BASEPRI, r3
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	603b      	str	r3, [r7, #0]
}
 800482c:	bf00      	nop
 800482e:	e7fe      	b.n	800482e <xTaskIncrementTick+0x46>
 8004830:	4b43      	ldr	r3, [pc, #268]	; (8004940 <xTaskIncrementTick+0x158>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	60fb      	str	r3, [r7, #12]
 8004836:	4b43      	ldr	r3, [pc, #268]	; (8004944 <xTaskIncrementTick+0x15c>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a41      	ldr	r2, [pc, #260]	; (8004940 <xTaskIncrementTick+0x158>)
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	4a41      	ldr	r2, [pc, #260]	; (8004944 <xTaskIncrementTick+0x15c>)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6013      	str	r3, [r2, #0]
 8004844:	4b40      	ldr	r3, [pc, #256]	; (8004948 <xTaskIncrementTick+0x160>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	3301      	adds	r3, #1
 800484a:	4a3f      	ldr	r2, [pc, #252]	; (8004948 <xTaskIncrementTick+0x160>)
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	f000 f999 	bl	8004b84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004852:	4b3e      	ldr	r3, [pc, #248]	; (800494c <xTaskIncrementTick+0x164>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	429a      	cmp	r2, r3
 800485a:	d34d      	bcc.n	80048f8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800485c:	4b38      	ldr	r3, [pc, #224]	; (8004940 <xTaskIncrementTick+0x158>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <xTaskIncrementTick+0x82>
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <xTaskIncrementTick+0x84>
 800486a:	2300      	movs	r3, #0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d004      	beq.n	800487a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004870:	4b36      	ldr	r3, [pc, #216]	; (800494c <xTaskIncrementTick+0x164>)
 8004872:	f04f 32ff 	mov.w	r2, #4294967295
 8004876:	601a      	str	r2, [r3, #0]
					break;
 8004878:	e03e      	b.n	80048f8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800487a:	4b31      	ldr	r3, [pc, #196]	; (8004940 <xTaskIncrementTick+0x158>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	429a      	cmp	r2, r3
 8004890:	d203      	bcs.n	800489a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004892:	4a2e      	ldr	r2, [pc, #184]	; (800494c <xTaskIncrementTick+0x164>)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6013      	str	r3, [r2, #0]
						break;
 8004898:	e02e      	b.n	80048f8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	3304      	adds	r3, #4
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff fce4 	bl	800426c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d004      	beq.n	80048b6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	3318      	adds	r3, #24
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff fcdb 	bl	800426c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ba:	2201      	movs	r2, #1
 80048bc:	409a      	lsls	r2, r3
 80048be:	4b24      	ldr	r3, [pc, #144]	; (8004950 <xTaskIncrementTick+0x168>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	4a22      	ldr	r2, [pc, #136]	; (8004950 <xTaskIncrementTick+0x168>)
 80048c6:	6013      	str	r3, [r2, #0]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048cc:	4613      	mov	r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4a1f      	ldr	r2, [pc, #124]	; (8004954 <xTaskIncrementTick+0x16c>)
 80048d6:	441a      	add	r2, r3
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	3304      	adds	r3, #4
 80048dc:	4619      	mov	r1, r3
 80048de:	4610      	mov	r0, r2
 80048e0:	f7ff fca1 	bl	8004226 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e8:	4b1b      	ldr	r3, [pc, #108]	; (8004958 <xTaskIncrementTick+0x170>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d3b4      	bcc.n	800485c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80048f2:	2301      	movs	r3, #1
 80048f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048f6:	e7b1      	b.n	800485c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048f8:	4b17      	ldr	r3, [pc, #92]	; (8004958 <xTaskIncrementTick+0x170>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048fe:	4915      	ldr	r1, [pc, #84]	; (8004954 <xTaskIncrementTick+0x16c>)
 8004900:	4613      	mov	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	440b      	add	r3, r1
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d907      	bls.n	8004920 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004910:	2301      	movs	r3, #1
 8004912:	617b      	str	r3, [r7, #20]
 8004914:	e004      	b.n	8004920 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004916:	4b11      	ldr	r3, [pc, #68]	; (800495c <xTaskIncrementTick+0x174>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3301      	adds	r3, #1
 800491c:	4a0f      	ldr	r2, [pc, #60]	; (800495c <xTaskIncrementTick+0x174>)
 800491e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004920:	4b0f      	ldr	r3, [pc, #60]	; (8004960 <xTaskIncrementTick+0x178>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004928:	2301      	movs	r3, #1
 800492a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800492c:	697b      	ldr	r3, [r7, #20]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3718      	adds	r7, #24
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	20000608 	.word	0x20000608
 800493c:	200005e4 	.word	0x200005e4
 8004940:	20000598 	.word	0x20000598
 8004944:	2000059c 	.word	0x2000059c
 8004948:	200005f8 	.word	0x200005f8
 800494c:	20000600 	.word	0x20000600
 8004950:	200005e8 	.word	0x200005e8
 8004954:	200004e4 	.word	0x200004e4
 8004958:	200004e0 	.word	0x200004e0
 800495c:	200005f0 	.word	0x200005f0
 8004960:	200005f4 	.word	0x200005f4

08004964 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800496a:	4b26      	ldr	r3, [pc, #152]	; (8004a04 <vTaskSwitchContext+0xa0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004972:	4b25      	ldr	r3, [pc, #148]	; (8004a08 <vTaskSwitchContext+0xa4>)
 8004974:	2201      	movs	r2, #1
 8004976:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004978:	e03f      	b.n	80049fa <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800497a:	4b23      	ldr	r3, [pc, #140]	; (8004a08 <vTaskSwitchContext+0xa4>)
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004980:	4b22      	ldr	r3, [pc, #136]	; (8004a0c <vTaskSwitchContext+0xa8>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	fab3 f383 	clz	r3, r3
 800498c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800498e:	7afb      	ldrb	r3, [r7, #11]
 8004990:	f1c3 031f 	rsb	r3, r3, #31
 8004994:	617b      	str	r3, [r7, #20]
 8004996:	491e      	ldr	r1, [pc, #120]	; (8004a10 <vTaskSwitchContext+0xac>)
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	4613      	mov	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	440b      	add	r3, r1
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10a      	bne.n	80049c0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80049aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ae:	f383 8811 	msr	BASEPRI, r3
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	607b      	str	r3, [r7, #4]
}
 80049bc:	bf00      	nop
 80049be:	e7fe      	b.n	80049be <vTaskSwitchContext+0x5a>
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	4613      	mov	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4a11      	ldr	r2, [pc, #68]	; (8004a10 <vTaskSwitchContext+0xac>)
 80049cc:	4413      	add	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	605a      	str	r2, [r3, #4]
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	3308      	adds	r3, #8
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d104      	bne.n	80049f0 <vTaskSwitchContext+0x8c>
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	605a      	str	r2, [r3, #4]
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	4a07      	ldr	r2, [pc, #28]	; (8004a14 <vTaskSwitchContext+0xb0>)
 80049f8:	6013      	str	r3, [r2, #0]
}
 80049fa:	bf00      	nop
 80049fc:	371c      	adds	r7, #28
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bc80      	pop	{r7}
 8004a02:	4770      	bx	lr
 8004a04:	20000608 	.word	0x20000608
 8004a08:	200005f4 	.word	0x200005f4
 8004a0c:	200005e8 	.word	0x200005e8
 8004a10:	200004e4 	.word	0x200004e4
 8004a14:	200004e0 	.word	0x200004e0

08004a18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a20:	f000 f852 	bl	8004ac8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a24:	4b06      	ldr	r3, [pc, #24]	; (8004a40 <prvIdleTask+0x28>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d9f9      	bls.n	8004a20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a2c:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <prvIdleTask+0x2c>)
 8004a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	f3bf 8f4f 	dsb	sy
 8004a38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a3c:	e7f0      	b.n	8004a20 <prvIdleTask+0x8>
 8004a3e:	bf00      	nop
 8004a40:	200004e4 	.word	0x200004e4
 8004a44:	e000ed04 	.word	0xe000ed04

08004a48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a4e:	2300      	movs	r3, #0
 8004a50:	607b      	str	r3, [r7, #4]
 8004a52:	e00c      	b.n	8004a6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	4613      	mov	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4a12      	ldr	r2, [pc, #72]	; (8004aa8 <prvInitialiseTaskLists+0x60>)
 8004a60:	4413      	add	r3, r2
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff fbb4 	bl	80041d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	607b      	str	r3, [r7, #4]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b06      	cmp	r3, #6
 8004a72:	d9ef      	bls.n	8004a54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a74:	480d      	ldr	r0, [pc, #52]	; (8004aac <prvInitialiseTaskLists+0x64>)
 8004a76:	f7ff fbab 	bl	80041d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a7a:	480d      	ldr	r0, [pc, #52]	; (8004ab0 <prvInitialiseTaskLists+0x68>)
 8004a7c:	f7ff fba8 	bl	80041d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a80:	480c      	ldr	r0, [pc, #48]	; (8004ab4 <prvInitialiseTaskLists+0x6c>)
 8004a82:	f7ff fba5 	bl	80041d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a86:	480c      	ldr	r0, [pc, #48]	; (8004ab8 <prvInitialiseTaskLists+0x70>)
 8004a88:	f7ff fba2 	bl	80041d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a8c:	480b      	ldr	r0, [pc, #44]	; (8004abc <prvInitialiseTaskLists+0x74>)
 8004a8e:	f7ff fb9f 	bl	80041d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a92:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <prvInitialiseTaskLists+0x78>)
 8004a94:	4a05      	ldr	r2, [pc, #20]	; (8004aac <prvInitialiseTaskLists+0x64>)
 8004a96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a98:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <prvInitialiseTaskLists+0x7c>)
 8004a9a:	4a05      	ldr	r2, [pc, #20]	; (8004ab0 <prvInitialiseTaskLists+0x68>)
 8004a9c:	601a      	str	r2, [r3, #0]
}
 8004a9e:	bf00      	nop
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	200004e4 	.word	0x200004e4
 8004aac:	20000570 	.word	0x20000570
 8004ab0:	20000584 	.word	0x20000584
 8004ab4:	200005a0 	.word	0x200005a0
 8004ab8:	200005b4 	.word	0x200005b4
 8004abc:	200005cc 	.word	0x200005cc
 8004ac0:	20000598 	.word	0x20000598
 8004ac4:	2000059c 	.word	0x2000059c

08004ac8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ace:	e019      	b.n	8004b04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ad0:	f000 f96c 	bl	8004dac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004ad4:	4b10      	ldr	r3, [pc, #64]	; (8004b18 <prvCheckTasksWaitingTermination+0x50>)
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3304      	adds	r3, #4
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7ff fbc3 	bl	800426c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ae6:	4b0d      	ldr	r3, [pc, #52]	; (8004b1c <prvCheckTasksWaitingTermination+0x54>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	4a0b      	ldr	r2, [pc, #44]	; (8004b1c <prvCheckTasksWaitingTermination+0x54>)
 8004aee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004af0:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <prvCheckTasksWaitingTermination+0x58>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3b01      	subs	r3, #1
 8004af6:	4a0a      	ldr	r2, [pc, #40]	; (8004b20 <prvCheckTasksWaitingTermination+0x58>)
 8004af8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004afa:	f000 f987 	bl	8004e0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f810 	bl	8004b24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b04:	4b06      	ldr	r3, [pc, #24]	; (8004b20 <prvCheckTasksWaitingTermination+0x58>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1e1      	bne.n	8004ad0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b0c:	bf00      	nop
 8004b0e:	bf00      	nop
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	200005b4 	.word	0x200005b4
 8004b1c:	200005e0 	.word	0x200005e0
 8004b20:	200005c8 	.word	0x200005c8

08004b24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d108      	bne.n	8004b48 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 fabc 	bl	80050b8 <vPortFree>
				vPortFree( pxTCB );
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 fab9 	bl	80050b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b46:	e018      	b.n	8004b7a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d103      	bne.n	8004b5a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fab0 	bl	80050b8 <vPortFree>
	}
 8004b58:	e00f      	b.n	8004b7a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d00a      	beq.n	8004b7a <prvDeleteTCB+0x56>
	__asm volatile
 8004b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b68:	f383 8811 	msr	BASEPRI, r3
 8004b6c:	f3bf 8f6f 	isb	sy
 8004b70:	f3bf 8f4f 	dsb	sy
 8004b74:	60fb      	str	r3, [r7, #12]
}
 8004b76:	bf00      	nop
 8004b78:	e7fe      	b.n	8004b78 <prvDeleteTCB+0x54>
	}
 8004b7a:	bf00      	nop
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
	...

08004b84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b8a:	4b0e      	ldr	r3, [pc, #56]	; (8004bc4 <prvResetNextTaskUnblockTime+0x40>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <prvResetNextTaskUnblockTime+0x14>
 8004b94:	2301      	movs	r3, #1
 8004b96:	e000      	b.n	8004b9a <prvResetNextTaskUnblockTime+0x16>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d004      	beq.n	8004ba8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b9e:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <prvResetNextTaskUnblockTime+0x44>)
 8004ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ba6:	e008      	b.n	8004bba <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004ba8:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <prvResetNextTaskUnblockTime+0x40>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	4a04      	ldr	r2, [pc, #16]	; (8004bc8 <prvResetNextTaskUnblockTime+0x44>)
 8004bb8:	6013      	str	r3, [r2, #0]
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr
 8004bc4:	20000598 	.word	0x20000598
 8004bc8:	20000600 	.word	0x20000600

08004bcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	3b04      	subs	r3, #4
 8004bdc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004be4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	3b04      	subs	r3, #4
 8004bea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f023 0201 	bic.w	r2, r3, #1
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	3b04      	subs	r3, #4
 8004bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004bfc:	4a08      	ldr	r2, [pc, #32]	; (8004c20 <pxPortInitialiseStack+0x54>)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	3b14      	subs	r3, #20
 8004c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	3b20      	subs	r3, #32
 8004c12:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c14:	68fb      	ldr	r3, [r7, #12]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr
 8004c20:	08004c25 	.word	0x08004c25

08004c24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c2e:	4b12      	ldr	r3, [pc, #72]	; (8004c78 <prvTaskExitError+0x54>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c36:	d00a      	beq.n	8004c4e <prvTaskExitError+0x2a>
	__asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	60fb      	str	r3, [r7, #12]
}
 8004c4a:	bf00      	nop
 8004c4c:	e7fe      	b.n	8004c4c <prvTaskExitError+0x28>
	__asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	60bb      	str	r3, [r7, #8]
}
 8004c60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c62:	bf00      	nop
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0fc      	beq.n	8004c64 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c6a:	bf00      	nop
 8004c6c:	bf00      	nop
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bc80      	pop	{r7}
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	20000018 	.word	0x20000018
 8004c7c:	00000000 	.word	0x00000000

08004c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c80:	4b07      	ldr	r3, [pc, #28]	; (8004ca0 <pxCurrentTCBConst2>)
 8004c82:	6819      	ldr	r1, [r3, #0]
 8004c84:	6808      	ldr	r0, [r1, #0]
 8004c86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c8a:	f380 8809 	msr	PSP, r0
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	f04f 0000 	mov.w	r0, #0
 8004c96:	f380 8811 	msr	BASEPRI, r0
 8004c9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004c9e:	4770      	bx	lr

08004ca0 <pxCurrentTCBConst2>:
 8004ca0:	200004e0 	.word	0x200004e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ca4:	bf00      	nop
 8004ca6:	bf00      	nop

08004ca8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004ca8:	4806      	ldr	r0, [pc, #24]	; (8004cc4 <prvPortStartFirstTask+0x1c>)
 8004caa:	6800      	ldr	r0, [r0, #0]
 8004cac:	6800      	ldr	r0, [r0, #0]
 8004cae:	f380 8808 	msr	MSP, r0
 8004cb2:	b662      	cpsie	i
 8004cb4:	b661      	cpsie	f
 8004cb6:	f3bf 8f4f 	dsb	sy
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	df00      	svc	0
 8004cc0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004cc2:	bf00      	nop
 8004cc4:	e000ed08 	.word	0xe000ed08

08004cc8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004cce:	4b32      	ldr	r3, [pc, #200]	; (8004d98 <xPortStartScheduler+0xd0>)
 8004cd0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	22ff      	movs	r2, #255	; 0xff
 8004cde:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ce8:	78fb      	ldrb	r3, [r7, #3]
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	4b2a      	ldr	r3, [pc, #168]	; (8004d9c <xPortStartScheduler+0xd4>)
 8004cf4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004cf6:	4b2a      	ldr	r3, [pc, #168]	; (8004da0 <xPortStartScheduler+0xd8>)
 8004cf8:	2207      	movs	r2, #7
 8004cfa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cfc:	e009      	b.n	8004d12 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004cfe:	4b28      	ldr	r3, [pc, #160]	; (8004da0 <xPortStartScheduler+0xd8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	3b01      	subs	r3, #1
 8004d04:	4a26      	ldr	r2, [pc, #152]	; (8004da0 <xPortStartScheduler+0xd8>)
 8004d06:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d08:	78fb      	ldrb	r3, [r7, #3]
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d12:	78fb      	ldrb	r3, [r7, #3]
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1a:	2b80      	cmp	r3, #128	; 0x80
 8004d1c:	d0ef      	beq.n	8004cfe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d1e:	4b20      	ldr	r3, [pc, #128]	; (8004da0 <xPortStartScheduler+0xd8>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f1c3 0307 	rsb	r3, r3, #7
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	d00a      	beq.n	8004d40 <xPortStartScheduler+0x78>
	__asm volatile
 8004d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2e:	f383 8811 	msr	BASEPRI, r3
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	60bb      	str	r3, [r7, #8]
}
 8004d3c:	bf00      	nop
 8004d3e:	e7fe      	b.n	8004d3e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d40:	4b17      	ldr	r3, [pc, #92]	; (8004da0 <xPortStartScheduler+0xd8>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	021b      	lsls	r3, r3, #8
 8004d46:	4a16      	ldr	r2, [pc, #88]	; (8004da0 <xPortStartScheduler+0xd8>)
 8004d48:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d4a:	4b15      	ldr	r3, [pc, #84]	; (8004da0 <xPortStartScheduler+0xd8>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d52:	4a13      	ldr	r2, [pc, #76]	; (8004da0 <xPortStartScheduler+0xd8>)
 8004d54:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d5e:	4b11      	ldr	r3, [pc, #68]	; (8004da4 <xPortStartScheduler+0xdc>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a10      	ldr	r2, [pc, #64]	; (8004da4 <xPortStartScheduler+0xdc>)
 8004d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d6a:	4b0e      	ldr	r3, [pc, #56]	; (8004da4 <xPortStartScheduler+0xdc>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a0d      	ldr	r2, [pc, #52]	; (8004da4 <xPortStartScheduler+0xdc>)
 8004d70:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d74:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d76:	f000 f8b9 	bl	8004eec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d7a:	4b0b      	ldr	r3, [pc, #44]	; (8004da8 <xPortStartScheduler+0xe0>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d80:	f7ff ff92 	bl	8004ca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d84:	f7ff fdee 	bl	8004964 <vTaskSwitchContext>
	prvTaskExitError();
 8004d88:	f7ff ff4c 	bl	8004c24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	e000e400 	.word	0xe000e400
 8004d9c:	2000060c 	.word	0x2000060c
 8004da0:	20000610 	.word	0x20000610
 8004da4:	e000ed20 	.word	0xe000ed20
 8004da8:	20000018 	.word	0x20000018

08004dac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
	__asm volatile
 8004db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	607b      	str	r3, [r7, #4]
}
 8004dc4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004dc6:	4b0f      	ldr	r3, [pc, #60]	; (8004e04 <vPortEnterCritical+0x58>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	4a0d      	ldr	r2, [pc, #52]	; (8004e04 <vPortEnterCritical+0x58>)
 8004dce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004dd0:	4b0c      	ldr	r3, [pc, #48]	; (8004e04 <vPortEnterCritical+0x58>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d10f      	bne.n	8004df8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004dd8:	4b0b      	ldr	r3, [pc, #44]	; (8004e08 <vPortEnterCritical+0x5c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00a      	beq.n	8004df8 <vPortEnterCritical+0x4c>
	__asm volatile
 8004de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	603b      	str	r3, [r7, #0]
}
 8004df4:	bf00      	nop
 8004df6:	e7fe      	b.n	8004df6 <vPortEnterCritical+0x4a>
	}
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bc80      	pop	{r7}
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	20000018 	.word	0x20000018
 8004e08:	e000ed04 	.word	0xe000ed04

08004e0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e12:	4b11      	ldr	r3, [pc, #68]	; (8004e58 <vPortExitCritical+0x4c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10a      	bne.n	8004e30 <vPortExitCritical+0x24>
	__asm volatile
 8004e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	607b      	str	r3, [r7, #4]
}
 8004e2c:	bf00      	nop
 8004e2e:	e7fe      	b.n	8004e2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e30:	4b09      	ldr	r3, [pc, #36]	; (8004e58 <vPortExitCritical+0x4c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	3b01      	subs	r3, #1
 8004e36:	4a08      	ldr	r2, [pc, #32]	; (8004e58 <vPortExitCritical+0x4c>)
 8004e38:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e3a:	4b07      	ldr	r3, [pc, #28]	; (8004e58 <vPortExitCritical+0x4c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d105      	bne.n	8004e4e <vPortExitCritical+0x42>
 8004e42:	2300      	movs	r3, #0
 8004e44:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e4c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bc80      	pop	{r7}
 8004e56:	4770      	bx	lr
 8004e58:	20000018 	.word	0x20000018
 8004e5c:	00000000 	.word	0x00000000

08004e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e60:	f3ef 8009 	mrs	r0, PSP
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	4b0d      	ldr	r3, [pc, #52]	; (8004ea0 <pxCurrentTCBConst>)
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004e70:	6010      	str	r0, [r2, #0]
 8004e72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004e76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e7a:	f380 8811 	msr	BASEPRI, r0
 8004e7e:	f7ff fd71 	bl	8004964 <vTaskSwitchContext>
 8004e82:	f04f 0000 	mov.w	r0, #0
 8004e86:	f380 8811 	msr	BASEPRI, r0
 8004e8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004e8e:	6819      	ldr	r1, [r3, #0]
 8004e90:	6808      	ldr	r0, [r1, #0]
 8004e92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004e96:	f380 8809 	msr	PSP, r0
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	4770      	bx	lr

08004ea0 <pxCurrentTCBConst>:
 8004ea0:	200004e0 	.word	0x200004e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ea4:	bf00      	nop
 8004ea6:	bf00      	nop

08004ea8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
	__asm volatile
 8004eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	607b      	str	r3, [r7, #4]
}
 8004ec0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ec2:	f7ff fc91 	bl	80047e8 <xTaskIncrementTick>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ecc:	4b06      	ldr	r3, [pc, #24]	; (8004ee8 <SysTick_Handler+0x40>)
 8004ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	f383 8811 	msr	BASEPRI, r3
}
 8004ede:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ee0:	bf00      	nop
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	e000ed04 	.word	0xe000ed04

08004eec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ef0:	4b0a      	ldr	r3, [pc, #40]	; (8004f1c <vPortSetupTimerInterrupt+0x30>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ef6:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <vPortSetupTimerInterrupt+0x34>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004efc:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <vPortSetupTimerInterrupt+0x38>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a09      	ldr	r2, [pc, #36]	; (8004f28 <vPortSetupTimerInterrupt+0x3c>)
 8004f02:	fba2 2303 	umull	r2, r3, r2, r3
 8004f06:	099b      	lsrs	r3, r3, #6
 8004f08:	4a08      	ldr	r2, [pc, #32]	; (8004f2c <vPortSetupTimerInterrupt+0x40>)
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f0e:	4b03      	ldr	r3, [pc, #12]	; (8004f1c <vPortSetupTimerInterrupt+0x30>)
 8004f10:	2207      	movs	r2, #7
 8004f12:	601a      	str	r2, [r3, #0]
}
 8004f14:	bf00      	nop
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bc80      	pop	{r7}
 8004f1a:	4770      	bx	lr
 8004f1c:	e000e010 	.word	0xe000e010
 8004f20:	e000e018 	.word	0xe000e018
 8004f24:	2000000c 	.word	0x2000000c
 8004f28:	10624dd3 	.word	0x10624dd3
 8004f2c:	e000e014 	.word	0xe000e014

08004f30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b08a      	sub	sp, #40	; 0x28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f3c:	f7ff fbaa 	bl	8004694 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f40:	4b58      	ldr	r3, [pc, #352]	; (80050a4 <pvPortMalloc+0x174>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f48:	f000 f910 	bl	800516c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f4c:	4b56      	ldr	r3, [pc, #344]	; (80050a8 <pvPortMalloc+0x178>)
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4013      	ands	r3, r2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f040 808e 	bne.w	8005076 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d01d      	beq.n	8004f9c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004f60:	2208      	movs	r2, #8
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4413      	add	r3, r2
 8004f66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d014      	beq.n	8004f9c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f023 0307 	bic.w	r3, r3, #7
 8004f78:	3308      	adds	r3, #8
 8004f7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <pvPortMalloc+0x6c>
	__asm volatile
 8004f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8a:	f383 8811 	msr	BASEPRI, r3
 8004f8e:	f3bf 8f6f 	isb	sy
 8004f92:	f3bf 8f4f 	dsb	sy
 8004f96:	617b      	str	r3, [r7, #20]
}
 8004f98:	bf00      	nop
 8004f9a:	e7fe      	b.n	8004f9a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d069      	beq.n	8005076 <pvPortMalloc+0x146>
 8004fa2:	4b42      	ldr	r3, [pc, #264]	; (80050ac <pvPortMalloc+0x17c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d864      	bhi.n	8005076 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004fac:	4b40      	ldr	r3, [pc, #256]	; (80050b0 <pvPortMalloc+0x180>)
 8004fae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004fb0:	4b3f      	ldr	r3, [pc, #252]	; (80050b0 <pvPortMalloc+0x180>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fb6:	e004      	b.n	8004fc2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d903      	bls.n	8004fd4 <pvPortMalloc+0xa4>
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1f1      	bne.n	8004fb8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004fd4:	4b33      	ldr	r3, [pc, #204]	; (80050a4 <pvPortMalloc+0x174>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d04b      	beq.n	8005076 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2208      	movs	r2, #8
 8004fe4:	4413      	add	r3, r2
 8004fe6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	1ad2      	subs	r2, r2, r3
 8004ff8:	2308      	movs	r3, #8
 8004ffa:	005b      	lsls	r3, r3, #1
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d91f      	bls.n	8005040 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4413      	add	r3, r2
 8005006:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <pvPortMalloc+0xf8>
	__asm volatile
 8005012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005016:	f383 8811 	msr	BASEPRI, r3
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	613b      	str	r3, [r7, #16]
}
 8005024:	bf00      	nop
 8005026:	e7fe      	b.n	8005026 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	1ad2      	subs	r2, r2, r3
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800503a:	69b8      	ldr	r0, [r7, #24]
 800503c:	f000 f8f8 	bl	8005230 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005040:	4b1a      	ldr	r3, [pc, #104]	; (80050ac <pvPortMalloc+0x17c>)
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	4a18      	ldr	r2, [pc, #96]	; (80050ac <pvPortMalloc+0x17c>)
 800504c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800504e:	4b17      	ldr	r3, [pc, #92]	; (80050ac <pvPortMalloc+0x17c>)
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	4b18      	ldr	r3, [pc, #96]	; (80050b4 <pvPortMalloc+0x184>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	429a      	cmp	r2, r3
 8005058:	d203      	bcs.n	8005062 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800505a:	4b14      	ldr	r3, [pc, #80]	; (80050ac <pvPortMalloc+0x17c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a15      	ldr	r2, [pc, #84]	; (80050b4 <pvPortMalloc+0x184>)
 8005060:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	4b10      	ldr	r3, [pc, #64]	; (80050a8 <pvPortMalloc+0x178>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	431a      	orrs	r2, r3
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005076:	f7ff fb1b 	bl	80046b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00a      	beq.n	800509a <pvPortMalloc+0x16a>
	__asm volatile
 8005084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005088:	f383 8811 	msr	BASEPRI, r3
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	60fb      	str	r3, [r7, #12]
}
 8005096:	bf00      	nop
 8005098:	e7fe      	b.n	8005098 <pvPortMalloc+0x168>
	return pvReturn;
 800509a:	69fb      	ldr	r3, [r7, #28]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3728      	adds	r7, #40	; 0x28
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	2000121c 	.word	0x2000121c
 80050a8:	20001228 	.word	0x20001228
 80050ac:	20001220 	.word	0x20001220
 80050b0:	20001214 	.word	0x20001214
 80050b4:	20001224 	.word	0x20001224

080050b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d048      	beq.n	800515c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80050ca:	2308      	movs	r3, #8
 80050cc:	425b      	negs	r3, r3
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	4413      	add	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	4b21      	ldr	r3, [pc, #132]	; (8005164 <vPortFree+0xac>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4013      	ands	r3, r2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10a      	bne.n	80050fc <vPortFree+0x44>
	__asm volatile
 80050e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ea:	f383 8811 	msr	BASEPRI, r3
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f3bf 8f4f 	dsb	sy
 80050f6:	60fb      	str	r3, [r7, #12]
}
 80050f8:	bf00      	nop
 80050fa:	e7fe      	b.n	80050fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00a      	beq.n	800511a <vPortFree+0x62>
	__asm volatile
 8005104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005108:	f383 8811 	msr	BASEPRI, r3
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	60bb      	str	r3, [r7, #8]
}
 8005116:	bf00      	nop
 8005118:	e7fe      	b.n	8005118 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	4b11      	ldr	r3, [pc, #68]	; (8005164 <vPortFree+0xac>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4013      	ands	r3, r2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d019      	beq.n	800515c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d115      	bne.n	800515c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <vPortFree+0xac>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	43db      	mvns	r3, r3
 800513a:	401a      	ands	r2, r3
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005140:	f7ff faa8 	bl	8004694 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	4b07      	ldr	r3, [pc, #28]	; (8005168 <vPortFree+0xb0>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4413      	add	r3, r2
 800514e:	4a06      	ldr	r2, [pc, #24]	; (8005168 <vPortFree+0xb0>)
 8005150:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005152:	6938      	ldr	r0, [r7, #16]
 8005154:	f000 f86c 	bl	8005230 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005158:	f7ff faaa 	bl	80046b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800515c:	bf00      	nop
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	20001228 	.word	0x20001228
 8005168:	20001220 	.word	0x20001220

0800516c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005172:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005176:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005178:	4b27      	ldr	r3, [pc, #156]	; (8005218 <prvHeapInit+0xac>)
 800517a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00c      	beq.n	80051a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	3307      	adds	r3, #7
 800518a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 0307 	bic.w	r3, r3, #7
 8005192:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	4a1f      	ldr	r2, [pc, #124]	; (8005218 <prvHeapInit+0xac>)
 800519c:	4413      	add	r3, r2
 800519e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051a4:	4a1d      	ldr	r2, [pc, #116]	; (800521c <prvHeapInit+0xb0>)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80051aa:	4b1c      	ldr	r3, [pc, #112]	; (800521c <prvHeapInit+0xb0>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	4413      	add	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80051b8:	2208      	movs	r2, #8
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	1a9b      	subs	r3, r3, r2
 80051be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 0307 	bic.w	r3, r3, #7
 80051c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4a15      	ldr	r2, [pc, #84]	; (8005220 <prvHeapInit+0xb4>)
 80051cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80051ce:	4b14      	ldr	r3, [pc, #80]	; (8005220 <prvHeapInit+0xb4>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2200      	movs	r2, #0
 80051d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051d6:	4b12      	ldr	r3, [pc, #72]	; (8005220 <prvHeapInit+0xb4>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2200      	movs	r2, #0
 80051dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	1ad2      	subs	r2, r2, r3
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051ec:	4b0c      	ldr	r3, [pc, #48]	; (8005220 <prvHeapInit+0xb4>)
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	4a0a      	ldr	r2, [pc, #40]	; (8005224 <prvHeapInit+0xb8>)
 80051fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	4a09      	ldr	r2, [pc, #36]	; (8005228 <prvHeapInit+0xbc>)
 8005202:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005204:	4b09      	ldr	r3, [pc, #36]	; (800522c <prvHeapInit+0xc0>)
 8005206:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800520a:	601a      	str	r2, [r3, #0]
}
 800520c:	bf00      	nop
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	bc80      	pop	{r7}
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	20000614 	.word	0x20000614
 800521c:	20001214 	.word	0x20001214
 8005220:	2000121c 	.word	0x2000121c
 8005224:	20001224 	.word	0x20001224
 8005228:	20001220 	.word	0x20001220
 800522c:	20001228 	.word	0x20001228

08005230 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005238:	4b27      	ldr	r3, [pc, #156]	; (80052d8 <prvInsertBlockIntoFreeList+0xa8>)
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	e002      	b.n	8005244 <prvInsertBlockIntoFreeList+0x14>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	429a      	cmp	r2, r3
 800524c:	d8f7      	bhi.n	800523e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	4413      	add	r3, r2
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	429a      	cmp	r2, r3
 800525e:	d108      	bne.n	8005272 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	441a      	add	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	441a      	add	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	429a      	cmp	r2, r3
 8005284:	d118      	bne.n	80052b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	4b14      	ldr	r3, [pc, #80]	; (80052dc <prvInsertBlockIntoFreeList+0xac>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	429a      	cmp	r2, r3
 8005290:	d00d      	beq.n	80052ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	441a      	add	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	e008      	b.n	80052c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052ae:	4b0b      	ldr	r3, [pc, #44]	; (80052dc <prvInsertBlockIntoFreeList+0xac>)
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	e003      	b.n	80052c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d002      	beq.n	80052ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052ce:	bf00      	nop
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bc80      	pop	{r7}
 80052d6:	4770      	bx	lr
 80052d8:	20001214 	.word	0x20001214
 80052dc:	2000121c 	.word	0x2000121c

080052e0 <__errno>:
 80052e0:	4b01      	ldr	r3, [pc, #4]	; (80052e8 <__errno+0x8>)
 80052e2:	6818      	ldr	r0, [r3, #0]
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	2000001c 	.word	0x2000001c

080052ec <__libc_init_array>:
 80052ec:	b570      	push	{r4, r5, r6, lr}
 80052ee:	2600      	movs	r6, #0
 80052f0:	4d0c      	ldr	r5, [pc, #48]	; (8005324 <__libc_init_array+0x38>)
 80052f2:	4c0d      	ldr	r4, [pc, #52]	; (8005328 <__libc_init_array+0x3c>)
 80052f4:	1b64      	subs	r4, r4, r5
 80052f6:	10a4      	asrs	r4, r4, #2
 80052f8:	42a6      	cmp	r6, r4
 80052fa:	d109      	bne.n	8005310 <__libc_init_array+0x24>
 80052fc:	f001 fb7e 	bl	80069fc <_init>
 8005300:	2600      	movs	r6, #0
 8005302:	4d0a      	ldr	r5, [pc, #40]	; (800532c <__libc_init_array+0x40>)
 8005304:	4c0a      	ldr	r4, [pc, #40]	; (8005330 <__libc_init_array+0x44>)
 8005306:	1b64      	subs	r4, r4, r5
 8005308:	10a4      	asrs	r4, r4, #2
 800530a:	42a6      	cmp	r6, r4
 800530c:	d105      	bne.n	800531a <__libc_init_array+0x2e>
 800530e:	bd70      	pop	{r4, r5, r6, pc}
 8005310:	f855 3b04 	ldr.w	r3, [r5], #4
 8005314:	4798      	blx	r3
 8005316:	3601      	adds	r6, #1
 8005318:	e7ee      	b.n	80052f8 <__libc_init_array+0xc>
 800531a:	f855 3b04 	ldr.w	r3, [r5], #4
 800531e:	4798      	blx	r3
 8005320:	3601      	adds	r6, #1
 8005322:	e7f2      	b.n	800530a <__libc_init_array+0x1e>
 8005324:	08006bd0 	.word	0x08006bd0
 8005328:	08006bd0 	.word	0x08006bd0
 800532c:	08006bd0 	.word	0x08006bd0
 8005330:	08006bd4 	.word	0x08006bd4

08005334 <memcpy>:
 8005334:	440a      	add	r2, r1
 8005336:	4291      	cmp	r1, r2
 8005338:	f100 33ff 	add.w	r3, r0, #4294967295
 800533c:	d100      	bne.n	8005340 <memcpy+0xc>
 800533e:	4770      	bx	lr
 8005340:	b510      	push	{r4, lr}
 8005342:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005346:	4291      	cmp	r1, r2
 8005348:	f803 4f01 	strb.w	r4, [r3, #1]!
 800534c:	d1f9      	bne.n	8005342 <memcpy+0xe>
 800534e:	bd10      	pop	{r4, pc}

08005350 <memset>:
 8005350:	4603      	mov	r3, r0
 8005352:	4402      	add	r2, r0
 8005354:	4293      	cmp	r3, r2
 8005356:	d100      	bne.n	800535a <memset+0xa>
 8005358:	4770      	bx	lr
 800535a:	f803 1b01 	strb.w	r1, [r3], #1
 800535e:	e7f9      	b.n	8005354 <memset+0x4>

08005360 <siprintf>:
 8005360:	b40e      	push	{r1, r2, r3}
 8005362:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005366:	b500      	push	{lr}
 8005368:	b09c      	sub	sp, #112	; 0x70
 800536a:	ab1d      	add	r3, sp, #116	; 0x74
 800536c:	9002      	str	r0, [sp, #8]
 800536e:	9006      	str	r0, [sp, #24]
 8005370:	9107      	str	r1, [sp, #28]
 8005372:	9104      	str	r1, [sp, #16]
 8005374:	4808      	ldr	r0, [pc, #32]	; (8005398 <siprintf+0x38>)
 8005376:	4909      	ldr	r1, [pc, #36]	; (800539c <siprintf+0x3c>)
 8005378:	f853 2b04 	ldr.w	r2, [r3], #4
 800537c:	9105      	str	r1, [sp, #20]
 800537e:	6800      	ldr	r0, [r0, #0]
 8005380:	a902      	add	r1, sp, #8
 8005382:	9301      	str	r3, [sp, #4]
 8005384:	f000 f944 	bl	8005610 <_svfiprintf_r>
 8005388:	2200      	movs	r2, #0
 800538a:	9b02      	ldr	r3, [sp, #8]
 800538c:	701a      	strb	r2, [r3, #0]
 800538e:	b01c      	add	sp, #112	; 0x70
 8005390:	f85d eb04 	ldr.w	lr, [sp], #4
 8005394:	b003      	add	sp, #12
 8005396:	4770      	bx	lr
 8005398:	2000001c 	.word	0x2000001c
 800539c:	ffff0208 	.word	0xffff0208

080053a0 <_free_r>:
 80053a0:	b538      	push	{r3, r4, r5, lr}
 80053a2:	4605      	mov	r5, r0
 80053a4:	2900      	cmp	r1, #0
 80053a6:	d040      	beq.n	800542a <_free_r+0x8a>
 80053a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053ac:	1f0c      	subs	r4, r1, #4
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	bfb8      	it	lt
 80053b2:	18e4      	addlt	r4, r4, r3
 80053b4:	f000 fbfc 	bl	8005bb0 <__malloc_lock>
 80053b8:	4a1c      	ldr	r2, [pc, #112]	; (800542c <_free_r+0x8c>)
 80053ba:	6813      	ldr	r3, [r2, #0]
 80053bc:	b933      	cbnz	r3, 80053cc <_free_r+0x2c>
 80053be:	6063      	str	r3, [r4, #4]
 80053c0:	6014      	str	r4, [r2, #0]
 80053c2:	4628      	mov	r0, r5
 80053c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053c8:	f000 bbf8 	b.w	8005bbc <__malloc_unlock>
 80053cc:	42a3      	cmp	r3, r4
 80053ce:	d908      	bls.n	80053e2 <_free_r+0x42>
 80053d0:	6820      	ldr	r0, [r4, #0]
 80053d2:	1821      	adds	r1, r4, r0
 80053d4:	428b      	cmp	r3, r1
 80053d6:	bf01      	itttt	eq
 80053d8:	6819      	ldreq	r1, [r3, #0]
 80053da:	685b      	ldreq	r3, [r3, #4]
 80053dc:	1809      	addeq	r1, r1, r0
 80053de:	6021      	streq	r1, [r4, #0]
 80053e0:	e7ed      	b.n	80053be <_free_r+0x1e>
 80053e2:	461a      	mov	r2, r3
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	b10b      	cbz	r3, 80053ec <_free_r+0x4c>
 80053e8:	42a3      	cmp	r3, r4
 80053ea:	d9fa      	bls.n	80053e2 <_free_r+0x42>
 80053ec:	6811      	ldr	r1, [r2, #0]
 80053ee:	1850      	adds	r0, r2, r1
 80053f0:	42a0      	cmp	r0, r4
 80053f2:	d10b      	bne.n	800540c <_free_r+0x6c>
 80053f4:	6820      	ldr	r0, [r4, #0]
 80053f6:	4401      	add	r1, r0
 80053f8:	1850      	adds	r0, r2, r1
 80053fa:	4283      	cmp	r3, r0
 80053fc:	6011      	str	r1, [r2, #0]
 80053fe:	d1e0      	bne.n	80053c2 <_free_r+0x22>
 8005400:	6818      	ldr	r0, [r3, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	4401      	add	r1, r0
 8005406:	6011      	str	r1, [r2, #0]
 8005408:	6053      	str	r3, [r2, #4]
 800540a:	e7da      	b.n	80053c2 <_free_r+0x22>
 800540c:	d902      	bls.n	8005414 <_free_r+0x74>
 800540e:	230c      	movs	r3, #12
 8005410:	602b      	str	r3, [r5, #0]
 8005412:	e7d6      	b.n	80053c2 <_free_r+0x22>
 8005414:	6820      	ldr	r0, [r4, #0]
 8005416:	1821      	adds	r1, r4, r0
 8005418:	428b      	cmp	r3, r1
 800541a:	bf01      	itttt	eq
 800541c:	6819      	ldreq	r1, [r3, #0]
 800541e:	685b      	ldreq	r3, [r3, #4]
 8005420:	1809      	addeq	r1, r1, r0
 8005422:	6021      	streq	r1, [r4, #0]
 8005424:	6063      	str	r3, [r4, #4]
 8005426:	6054      	str	r4, [r2, #4]
 8005428:	e7cb      	b.n	80053c2 <_free_r+0x22>
 800542a:	bd38      	pop	{r3, r4, r5, pc}
 800542c:	2000122c 	.word	0x2000122c

08005430 <sbrk_aligned>:
 8005430:	b570      	push	{r4, r5, r6, lr}
 8005432:	4e0e      	ldr	r6, [pc, #56]	; (800546c <sbrk_aligned+0x3c>)
 8005434:	460c      	mov	r4, r1
 8005436:	6831      	ldr	r1, [r6, #0]
 8005438:	4605      	mov	r5, r0
 800543a:	b911      	cbnz	r1, 8005442 <sbrk_aligned+0x12>
 800543c:	f000 fb7e 	bl	8005b3c <_sbrk_r>
 8005440:	6030      	str	r0, [r6, #0]
 8005442:	4621      	mov	r1, r4
 8005444:	4628      	mov	r0, r5
 8005446:	f000 fb79 	bl	8005b3c <_sbrk_r>
 800544a:	1c43      	adds	r3, r0, #1
 800544c:	d00a      	beq.n	8005464 <sbrk_aligned+0x34>
 800544e:	1cc4      	adds	r4, r0, #3
 8005450:	f024 0403 	bic.w	r4, r4, #3
 8005454:	42a0      	cmp	r0, r4
 8005456:	d007      	beq.n	8005468 <sbrk_aligned+0x38>
 8005458:	1a21      	subs	r1, r4, r0
 800545a:	4628      	mov	r0, r5
 800545c:	f000 fb6e 	bl	8005b3c <_sbrk_r>
 8005460:	3001      	adds	r0, #1
 8005462:	d101      	bne.n	8005468 <sbrk_aligned+0x38>
 8005464:	f04f 34ff 	mov.w	r4, #4294967295
 8005468:	4620      	mov	r0, r4
 800546a:	bd70      	pop	{r4, r5, r6, pc}
 800546c:	20001230 	.word	0x20001230

08005470 <_malloc_r>:
 8005470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005474:	1ccd      	adds	r5, r1, #3
 8005476:	f025 0503 	bic.w	r5, r5, #3
 800547a:	3508      	adds	r5, #8
 800547c:	2d0c      	cmp	r5, #12
 800547e:	bf38      	it	cc
 8005480:	250c      	movcc	r5, #12
 8005482:	2d00      	cmp	r5, #0
 8005484:	4607      	mov	r7, r0
 8005486:	db01      	blt.n	800548c <_malloc_r+0x1c>
 8005488:	42a9      	cmp	r1, r5
 800548a:	d905      	bls.n	8005498 <_malloc_r+0x28>
 800548c:	230c      	movs	r3, #12
 800548e:	2600      	movs	r6, #0
 8005490:	603b      	str	r3, [r7, #0]
 8005492:	4630      	mov	r0, r6
 8005494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005498:	4e2e      	ldr	r6, [pc, #184]	; (8005554 <_malloc_r+0xe4>)
 800549a:	f000 fb89 	bl	8005bb0 <__malloc_lock>
 800549e:	6833      	ldr	r3, [r6, #0]
 80054a0:	461c      	mov	r4, r3
 80054a2:	bb34      	cbnz	r4, 80054f2 <_malloc_r+0x82>
 80054a4:	4629      	mov	r1, r5
 80054a6:	4638      	mov	r0, r7
 80054a8:	f7ff ffc2 	bl	8005430 <sbrk_aligned>
 80054ac:	1c43      	adds	r3, r0, #1
 80054ae:	4604      	mov	r4, r0
 80054b0:	d14d      	bne.n	800554e <_malloc_r+0xde>
 80054b2:	6834      	ldr	r4, [r6, #0]
 80054b4:	4626      	mov	r6, r4
 80054b6:	2e00      	cmp	r6, #0
 80054b8:	d140      	bne.n	800553c <_malloc_r+0xcc>
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	4631      	mov	r1, r6
 80054be:	4638      	mov	r0, r7
 80054c0:	eb04 0803 	add.w	r8, r4, r3
 80054c4:	f000 fb3a 	bl	8005b3c <_sbrk_r>
 80054c8:	4580      	cmp	r8, r0
 80054ca:	d13a      	bne.n	8005542 <_malloc_r+0xd2>
 80054cc:	6821      	ldr	r1, [r4, #0]
 80054ce:	3503      	adds	r5, #3
 80054d0:	1a6d      	subs	r5, r5, r1
 80054d2:	f025 0503 	bic.w	r5, r5, #3
 80054d6:	3508      	adds	r5, #8
 80054d8:	2d0c      	cmp	r5, #12
 80054da:	bf38      	it	cc
 80054dc:	250c      	movcc	r5, #12
 80054de:	4638      	mov	r0, r7
 80054e0:	4629      	mov	r1, r5
 80054e2:	f7ff ffa5 	bl	8005430 <sbrk_aligned>
 80054e6:	3001      	adds	r0, #1
 80054e8:	d02b      	beq.n	8005542 <_malloc_r+0xd2>
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	442b      	add	r3, r5
 80054ee:	6023      	str	r3, [r4, #0]
 80054f0:	e00e      	b.n	8005510 <_malloc_r+0xa0>
 80054f2:	6822      	ldr	r2, [r4, #0]
 80054f4:	1b52      	subs	r2, r2, r5
 80054f6:	d41e      	bmi.n	8005536 <_malloc_r+0xc6>
 80054f8:	2a0b      	cmp	r2, #11
 80054fa:	d916      	bls.n	800552a <_malloc_r+0xba>
 80054fc:	1961      	adds	r1, r4, r5
 80054fe:	42a3      	cmp	r3, r4
 8005500:	6025      	str	r5, [r4, #0]
 8005502:	bf18      	it	ne
 8005504:	6059      	strne	r1, [r3, #4]
 8005506:	6863      	ldr	r3, [r4, #4]
 8005508:	bf08      	it	eq
 800550a:	6031      	streq	r1, [r6, #0]
 800550c:	5162      	str	r2, [r4, r5]
 800550e:	604b      	str	r3, [r1, #4]
 8005510:	4638      	mov	r0, r7
 8005512:	f104 060b 	add.w	r6, r4, #11
 8005516:	f000 fb51 	bl	8005bbc <__malloc_unlock>
 800551a:	f026 0607 	bic.w	r6, r6, #7
 800551e:	1d23      	adds	r3, r4, #4
 8005520:	1af2      	subs	r2, r6, r3
 8005522:	d0b6      	beq.n	8005492 <_malloc_r+0x22>
 8005524:	1b9b      	subs	r3, r3, r6
 8005526:	50a3      	str	r3, [r4, r2]
 8005528:	e7b3      	b.n	8005492 <_malloc_r+0x22>
 800552a:	6862      	ldr	r2, [r4, #4]
 800552c:	42a3      	cmp	r3, r4
 800552e:	bf0c      	ite	eq
 8005530:	6032      	streq	r2, [r6, #0]
 8005532:	605a      	strne	r2, [r3, #4]
 8005534:	e7ec      	b.n	8005510 <_malloc_r+0xa0>
 8005536:	4623      	mov	r3, r4
 8005538:	6864      	ldr	r4, [r4, #4]
 800553a:	e7b2      	b.n	80054a2 <_malloc_r+0x32>
 800553c:	4634      	mov	r4, r6
 800553e:	6876      	ldr	r6, [r6, #4]
 8005540:	e7b9      	b.n	80054b6 <_malloc_r+0x46>
 8005542:	230c      	movs	r3, #12
 8005544:	4638      	mov	r0, r7
 8005546:	603b      	str	r3, [r7, #0]
 8005548:	f000 fb38 	bl	8005bbc <__malloc_unlock>
 800554c:	e7a1      	b.n	8005492 <_malloc_r+0x22>
 800554e:	6025      	str	r5, [r4, #0]
 8005550:	e7de      	b.n	8005510 <_malloc_r+0xa0>
 8005552:	bf00      	nop
 8005554:	2000122c 	.word	0x2000122c

08005558 <__ssputs_r>:
 8005558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800555c:	688e      	ldr	r6, [r1, #8]
 800555e:	4682      	mov	sl, r0
 8005560:	429e      	cmp	r6, r3
 8005562:	460c      	mov	r4, r1
 8005564:	4690      	mov	r8, r2
 8005566:	461f      	mov	r7, r3
 8005568:	d838      	bhi.n	80055dc <__ssputs_r+0x84>
 800556a:	898a      	ldrh	r2, [r1, #12]
 800556c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005570:	d032      	beq.n	80055d8 <__ssputs_r+0x80>
 8005572:	6825      	ldr	r5, [r4, #0]
 8005574:	6909      	ldr	r1, [r1, #16]
 8005576:	3301      	adds	r3, #1
 8005578:	eba5 0901 	sub.w	r9, r5, r1
 800557c:	6965      	ldr	r5, [r4, #20]
 800557e:	444b      	add	r3, r9
 8005580:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005584:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005588:	106d      	asrs	r5, r5, #1
 800558a:	429d      	cmp	r5, r3
 800558c:	bf38      	it	cc
 800558e:	461d      	movcc	r5, r3
 8005590:	0553      	lsls	r3, r2, #21
 8005592:	d531      	bpl.n	80055f8 <__ssputs_r+0xa0>
 8005594:	4629      	mov	r1, r5
 8005596:	f7ff ff6b 	bl	8005470 <_malloc_r>
 800559a:	4606      	mov	r6, r0
 800559c:	b950      	cbnz	r0, 80055b4 <__ssputs_r+0x5c>
 800559e:	230c      	movs	r3, #12
 80055a0:	f04f 30ff 	mov.w	r0, #4294967295
 80055a4:	f8ca 3000 	str.w	r3, [sl]
 80055a8:	89a3      	ldrh	r3, [r4, #12]
 80055aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055ae:	81a3      	strh	r3, [r4, #12]
 80055b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055b4:	464a      	mov	r2, r9
 80055b6:	6921      	ldr	r1, [r4, #16]
 80055b8:	f7ff febc 	bl	8005334 <memcpy>
 80055bc:	89a3      	ldrh	r3, [r4, #12]
 80055be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80055c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c6:	81a3      	strh	r3, [r4, #12]
 80055c8:	6126      	str	r6, [r4, #16]
 80055ca:	444e      	add	r6, r9
 80055cc:	6026      	str	r6, [r4, #0]
 80055ce:	463e      	mov	r6, r7
 80055d0:	6165      	str	r5, [r4, #20]
 80055d2:	eba5 0509 	sub.w	r5, r5, r9
 80055d6:	60a5      	str	r5, [r4, #8]
 80055d8:	42be      	cmp	r6, r7
 80055da:	d900      	bls.n	80055de <__ssputs_r+0x86>
 80055dc:	463e      	mov	r6, r7
 80055de:	4632      	mov	r2, r6
 80055e0:	4641      	mov	r1, r8
 80055e2:	6820      	ldr	r0, [r4, #0]
 80055e4:	f000 faca 	bl	8005b7c <memmove>
 80055e8:	68a3      	ldr	r3, [r4, #8]
 80055ea:	2000      	movs	r0, #0
 80055ec:	1b9b      	subs	r3, r3, r6
 80055ee:	60a3      	str	r3, [r4, #8]
 80055f0:	6823      	ldr	r3, [r4, #0]
 80055f2:	4433      	add	r3, r6
 80055f4:	6023      	str	r3, [r4, #0]
 80055f6:	e7db      	b.n	80055b0 <__ssputs_r+0x58>
 80055f8:	462a      	mov	r2, r5
 80055fa:	f000 fae5 	bl	8005bc8 <_realloc_r>
 80055fe:	4606      	mov	r6, r0
 8005600:	2800      	cmp	r0, #0
 8005602:	d1e1      	bne.n	80055c8 <__ssputs_r+0x70>
 8005604:	4650      	mov	r0, sl
 8005606:	6921      	ldr	r1, [r4, #16]
 8005608:	f7ff feca 	bl	80053a0 <_free_r>
 800560c:	e7c7      	b.n	800559e <__ssputs_r+0x46>
	...

08005610 <_svfiprintf_r>:
 8005610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005614:	4698      	mov	r8, r3
 8005616:	898b      	ldrh	r3, [r1, #12]
 8005618:	4607      	mov	r7, r0
 800561a:	061b      	lsls	r3, r3, #24
 800561c:	460d      	mov	r5, r1
 800561e:	4614      	mov	r4, r2
 8005620:	b09d      	sub	sp, #116	; 0x74
 8005622:	d50e      	bpl.n	8005642 <_svfiprintf_r+0x32>
 8005624:	690b      	ldr	r3, [r1, #16]
 8005626:	b963      	cbnz	r3, 8005642 <_svfiprintf_r+0x32>
 8005628:	2140      	movs	r1, #64	; 0x40
 800562a:	f7ff ff21 	bl	8005470 <_malloc_r>
 800562e:	6028      	str	r0, [r5, #0]
 8005630:	6128      	str	r0, [r5, #16]
 8005632:	b920      	cbnz	r0, 800563e <_svfiprintf_r+0x2e>
 8005634:	230c      	movs	r3, #12
 8005636:	603b      	str	r3, [r7, #0]
 8005638:	f04f 30ff 	mov.w	r0, #4294967295
 800563c:	e0d1      	b.n	80057e2 <_svfiprintf_r+0x1d2>
 800563e:	2340      	movs	r3, #64	; 0x40
 8005640:	616b      	str	r3, [r5, #20]
 8005642:	2300      	movs	r3, #0
 8005644:	9309      	str	r3, [sp, #36]	; 0x24
 8005646:	2320      	movs	r3, #32
 8005648:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800564c:	2330      	movs	r3, #48	; 0x30
 800564e:	f04f 0901 	mov.w	r9, #1
 8005652:	f8cd 800c 	str.w	r8, [sp, #12]
 8005656:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80057fc <_svfiprintf_r+0x1ec>
 800565a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800565e:	4623      	mov	r3, r4
 8005660:	469a      	mov	sl, r3
 8005662:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005666:	b10a      	cbz	r2, 800566c <_svfiprintf_r+0x5c>
 8005668:	2a25      	cmp	r2, #37	; 0x25
 800566a:	d1f9      	bne.n	8005660 <_svfiprintf_r+0x50>
 800566c:	ebba 0b04 	subs.w	fp, sl, r4
 8005670:	d00b      	beq.n	800568a <_svfiprintf_r+0x7a>
 8005672:	465b      	mov	r3, fp
 8005674:	4622      	mov	r2, r4
 8005676:	4629      	mov	r1, r5
 8005678:	4638      	mov	r0, r7
 800567a:	f7ff ff6d 	bl	8005558 <__ssputs_r>
 800567e:	3001      	adds	r0, #1
 8005680:	f000 80aa 	beq.w	80057d8 <_svfiprintf_r+0x1c8>
 8005684:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005686:	445a      	add	r2, fp
 8005688:	9209      	str	r2, [sp, #36]	; 0x24
 800568a:	f89a 3000 	ldrb.w	r3, [sl]
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 80a2 	beq.w	80057d8 <_svfiprintf_r+0x1c8>
 8005694:	2300      	movs	r3, #0
 8005696:	f04f 32ff 	mov.w	r2, #4294967295
 800569a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800569e:	f10a 0a01 	add.w	sl, sl, #1
 80056a2:	9304      	str	r3, [sp, #16]
 80056a4:	9307      	str	r3, [sp, #28]
 80056a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056aa:	931a      	str	r3, [sp, #104]	; 0x68
 80056ac:	4654      	mov	r4, sl
 80056ae:	2205      	movs	r2, #5
 80056b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056b4:	4851      	ldr	r0, [pc, #324]	; (80057fc <_svfiprintf_r+0x1ec>)
 80056b6:	f000 fa53 	bl	8005b60 <memchr>
 80056ba:	9a04      	ldr	r2, [sp, #16]
 80056bc:	b9d8      	cbnz	r0, 80056f6 <_svfiprintf_r+0xe6>
 80056be:	06d0      	lsls	r0, r2, #27
 80056c0:	bf44      	itt	mi
 80056c2:	2320      	movmi	r3, #32
 80056c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056c8:	0711      	lsls	r1, r2, #28
 80056ca:	bf44      	itt	mi
 80056cc:	232b      	movmi	r3, #43	; 0x2b
 80056ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056d2:	f89a 3000 	ldrb.w	r3, [sl]
 80056d6:	2b2a      	cmp	r3, #42	; 0x2a
 80056d8:	d015      	beq.n	8005706 <_svfiprintf_r+0xf6>
 80056da:	4654      	mov	r4, sl
 80056dc:	2000      	movs	r0, #0
 80056de:	f04f 0c0a 	mov.w	ip, #10
 80056e2:	9a07      	ldr	r2, [sp, #28]
 80056e4:	4621      	mov	r1, r4
 80056e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056ea:	3b30      	subs	r3, #48	; 0x30
 80056ec:	2b09      	cmp	r3, #9
 80056ee:	d94e      	bls.n	800578e <_svfiprintf_r+0x17e>
 80056f0:	b1b0      	cbz	r0, 8005720 <_svfiprintf_r+0x110>
 80056f2:	9207      	str	r2, [sp, #28]
 80056f4:	e014      	b.n	8005720 <_svfiprintf_r+0x110>
 80056f6:	eba0 0308 	sub.w	r3, r0, r8
 80056fa:	fa09 f303 	lsl.w	r3, r9, r3
 80056fe:	4313      	orrs	r3, r2
 8005700:	46a2      	mov	sl, r4
 8005702:	9304      	str	r3, [sp, #16]
 8005704:	e7d2      	b.n	80056ac <_svfiprintf_r+0x9c>
 8005706:	9b03      	ldr	r3, [sp, #12]
 8005708:	1d19      	adds	r1, r3, #4
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	9103      	str	r1, [sp, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	bfbb      	ittet	lt
 8005712:	425b      	neglt	r3, r3
 8005714:	f042 0202 	orrlt.w	r2, r2, #2
 8005718:	9307      	strge	r3, [sp, #28]
 800571a:	9307      	strlt	r3, [sp, #28]
 800571c:	bfb8      	it	lt
 800571e:	9204      	strlt	r2, [sp, #16]
 8005720:	7823      	ldrb	r3, [r4, #0]
 8005722:	2b2e      	cmp	r3, #46	; 0x2e
 8005724:	d10c      	bne.n	8005740 <_svfiprintf_r+0x130>
 8005726:	7863      	ldrb	r3, [r4, #1]
 8005728:	2b2a      	cmp	r3, #42	; 0x2a
 800572a:	d135      	bne.n	8005798 <_svfiprintf_r+0x188>
 800572c:	9b03      	ldr	r3, [sp, #12]
 800572e:	3402      	adds	r4, #2
 8005730:	1d1a      	adds	r2, r3, #4
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	9203      	str	r2, [sp, #12]
 8005736:	2b00      	cmp	r3, #0
 8005738:	bfb8      	it	lt
 800573a:	f04f 33ff 	movlt.w	r3, #4294967295
 800573e:	9305      	str	r3, [sp, #20]
 8005740:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005800 <_svfiprintf_r+0x1f0>
 8005744:	2203      	movs	r2, #3
 8005746:	4650      	mov	r0, sl
 8005748:	7821      	ldrb	r1, [r4, #0]
 800574a:	f000 fa09 	bl	8005b60 <memchr>
 800574e:	b140      	cbz	r0, 8005762 <_svfiprintf_r+0x152>
 8005750:	2340      	movs	r3, #64	; 0x40
 8005752:	eba0 000a 	sub.w	r0, r0, sl
 8005756:	fa03 f000 	lsl.w	r0, r3, r0
 800575a:	9b04      	ldr	r3, [sp, #16]
 800575c:	3401      	adds	r4, #1
 800575e:	4303      	orrs	r3, r0
 8005760:	9304      	str	r3, [sp, #16]
 8005762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005766:	2206      	movs	r2, #6
 8005768:	4826      	ldr	r0, [pc, #152]	; (8005804 <_svfiprintf_r+0x1f4>)
 800576a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800576e:	f000 f9f7 	bl	8005b60 <memchr>
 8005772:	2800      	cmp	r0, #0
 8005774:	d038      	beq.n	80057e8 <_svfiprintf_r+0x1d8>
 8005776:	4b24      	ldr	r3, [pc, #144]	; (8005808 <_svfiprintf_r+0x1f8>)
 8005778:	bb1b      	cbnz	r3, 80057c2 <_svfiprintf_r+0x1b2>
 800577a:	9b03      	ldr	r3, [sp, #12]
 800577c:	3307      	adds	r3, #7
 800577e:	f023 0307 	bic.w	r3, r3, #7
 8005782:	3308      	adds	r3, #8
 8005784:	9303      	str	r3, [sp, #12]
 8005786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005788:	4433      	add	r3, r6
 800578a:	9309      	str	r3, [sp, #36]	; 0x24
 800578c:	e767      	b.n	800565e <_svfiprintf_r+0x4e>
 800578e:	460c      	mov	r4, r1
 8005790:	2001      	movs	r0, #1
 8005792:	fb0c 3202 	mla	r2, ip, r2, r3
 8005796:	e7a5      	b.n	80056e4 <_svfiprintf_r+0xd4>
 8005798:	2300      	movs	r3, #0
 800579a:	f04f 0c0a 	mov.w	ip, #10
 800579e:	4619      	mov	r1, r3
 80057a0:	3401      	adds	r4, #1
 80057a2:	9305      	str	r3, [sp, #20]
 80057a4:	4620      	mov	r0, r4
 80057a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057aa:	3a30      	subs	r2, #48	; 0x30
 80057ac:	2a09      	cmp	r2, #9
 80057ae:	d903      	bls.n	80057b8 <_svfiprintf_r+0x1a8>
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0c5      	beq.n	8005740 <_svfiprintf_r+0x130>
 80057b4:	9105      	str	r1, [sp, #20]
 80057b6:	e7c3      	b.n	8005740 <_svfiprintf_r+0x130>
 80057b8:	4604      	mov	r4, r0
 80057ba:	2301      	movs	r3, #1
 80057bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80057c0:	e7f0      	b.n	80057a4 <_svfiprintf_r+0x194>
 80057c2:	ab03      	add	r3, sp, #12
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	462a      	mov	r2, r5
 80057c8:	4638      	mov	r0, r7
 80057ca:	4b10      	ldr	r3, [pc, #64]	; (800580c <_svfiprintf_r+0x1fc>)
 80057cc:	a904      	add	r1, sp, #16
 80057ce:	f3af 8000 	nop.w
 80057d2:	1c42      	adds	r2, r0, #1
 80057d4:	4606      	mov	r6, r0
 80057d6:	d1d6      	bne.n	8005786 <_svfiprintf_r+0x176>
 80057d8:	89ab      	ldrh	r3, [r5, #12]
 80057da:	065b      	lsls	r3, r3, #25
 80057dc:	f53f af2c 	bmi.w	8005638 <_svfiprintf_r+0x28>
 80057e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057e2:	b01d      	add	sp, #116	; 0x74
 80057e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057e8:	ab03      	add	r3, sp, #12
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	462a      	mov	r2, r5
 80057ee:	4638      	mov	r0, r7
 80057f0:	4b06      	ldr	r3, [pc, #24]	; (800580c <_svfiprintf_r+0x1fc>)
 80057f2:	a904      	add	r1, sp, #16
 80057f4:	f000 f87c 	bl	80058f0 <_printf_i>
 80057f8:	e7eb      	b.n	80057d2 <_svfiprintf_r+0x1c2>
 80057fa:	bf00      	nop
 80057fc:	08006b0a 	.word	0x08006b0a
 8005800:	08006b10 	.word	0x08006b10
 8005804:	08006b14 	.word	0x08006b14
 8005808:	00000000 	.word	0x00000000
 800580c:	08005559 	.word	0x08005559

08005810 <_printf_common>:
 8005810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005814:	4616      	mov	r6, r2
 8005816:	4699      	mov	r9, r3
 8005818:	688a      	ldr	r2, [r1, #8]
 800581a:	690b      	ldr	r3, [r1, #16]
 800581c:	4607      	mov	r7, r0
 800581e:	4293      	cmp	r3, r2
 8005820:	bfb8      	it	lt
 8005822:	4613      	movlt	r3, r2
 8005824:	6033      	str	r3, [r6, #0]
 8005826:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800582a:	460c      	mov	r4, r1
 800582c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005830:	b10a      	cbz	r2, 8005836 <_printf_common+0x26>
 8005832:	3301      	adds	r3, #1
 8005834:	6033      	str	r3, [r6, #0]
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	0699      	lsls	r1, r3, #26
 800583a:	bf42      	ittt	mi
 800583c:	6833      	ldrmi	r3, [r6, #0]
 800583e:	3302      	addmi	r3, #2
 8005840:	6033      	strmi	r3, [r6, #0]
 8005842:	6825      	ldr	r5, [r4, #0]
 8005844:	f015 0506 	ands.w	r5, r5, #6
 8005848:	d106      	bne.n	8005858 <_printf_common+0x48>
 800584a:	f104 0a19 	add.w	sl, r4, #25
 800584e:	68e3      	ldr	r3, [r4, #12]
 8005850:	6832      	ldr	r2, [r6, #0]
 8005852:	1a9b      	subs	r3, r3, r2
 8005854:	42ab      	cmp	r3, r5
 8005856:	dc28      	bgt.n	80058aa <_printf_common+0x9a>
 8005858:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800585c:	1e13      	subs	r3, r2, #0
 800585e:	6822      	ldr	r2, [r4, #0]
 8005860:	bf18      	it	ne
 8005862:	2301      	movne	r3, #1
 8005864:	0692      	lsls	r2, r2, #26
 8005866:	d42d      	bmi.n	80058c4 <_printf_common+0xb4>
 8005868:	4649      	mov	r1, r9
 800586a:	4638      	mov	r0, r7
 800586c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005870:	47c0      	blx	r8
 8005872:	3001      	adds	r0, #1
 8005874:	d020      	beq.n	80058b8 <_printf_common+0xa8>
 8005876:	6823      	ldr	r3, [r4, #0]
 8005878:	68e5      	ldr	r5, [r4, #12]
 800587a:	f003 0306 	and.w	r3, r3, #6
 800587e:	2b04      	cmp	r3, #4
 8005880:	bf18      	it	ne
 8005882:	2500      	movne	r5, #0
 8005884:	6832      	ldr	r2, [r6, #0]
 8005886:	f04f 0600 	mov.w	r6, #0
 800588a:	68a3      	ldr	r3, [r4, #8]
 800588c:	bf08      	it	eq
 800588e:	1aad      	subeq	r5, r5, r2
 8005890:	6922      	ldr	r2, [r4, #16]
 8005892:	bf08      	it	eq
 8005894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005898:	4293      	cmp	r3, r2
 800589a:	bfc4      	itt	gt
 800589c:	1a9b      	subgt	r3, r3, r2
 800589e:	18ed      	addgt	r5, r5, r3
 80058a0:	341a      	adds	r4, #26
 80058a2:	42b5      	cmp	r5, r6
 80058a4:	d11a      	bne.n	80058dc <_printf_common+0xcc>
 80058a6:	2000      	movs	r0, #0
 80058a8:	e008      	b.n	80058bc <_printf_common+0xac>
 80058aa:	2301      	movs	r3, #1
 80058ac:	4652      	mov	r2, sl
 80058ae:	4649      	mov	r1, r9
 80058b0:	4638      	mov	r0, r7
 80058b2:	47c0      	blx	r8
 80058b4:	3001      	adds	r0, #1
 80058b6:	d103      	bne.n	80058c0 <_printf_common+0xb0>
 80058b8:	f04f 30ff 	mov.w	r0, #4294967295
 80058bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058c0:	3501      	adds	r5, #1
 80058c2:	e7c4      	b.n	800584e <_printf_common+0x3e>
 80058c4:	2030      	movs	r0, #48	; 0x30
 80058c6:	18e1      	adds	r1, r4, r3
 80058c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058d2:	4422      	add	r2, r4
 80058d4:	3302      	adds	r3, #2
 80058d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058da:	e7c5      	b.n	8005868 <_printf_common+0x58>
 80058dc:	2301      	movs	r3, #1
 80058de:	4622      	mov	r2, r4
 80058e0:	4649      	mov	r1, r9
 80058e2:	4638      	mov	r0, r7
 80058e4:	47c0      	blx	r8
 80058e6:	3001      	adds	r0, #1
 80058e8:	d0e6      	beq.n	80058b8 <_printf_common+0xa8>
 80058ea:	3601      	adds	r6, #1
 80058ec:	e7d9      	b.n	80058a2 <_printf_common+0x92>
	...

080058f0 <_printf_i>:
 80058f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058f4:	7e0f      	ldrb	r7, [r1, #24]
 80058f6:	4691      	mov	r9, r2
 80058f8:	2f78      	cmp	r7, #120	; 0x78
 80058fa:	4680      	mov	r8, r0
 80058fc:	460c      	mov	r4, r1
 80058fe:	469a      	mov	sl, r3
 8005900:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005902:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005906:	d807      	bhi.n	8005918 <_printf_i+0x28>
 8005908:	2f62      	cmp	r7, #98	; 0x62
 800590a:	d80a      	bhi.n	8005922 <_printf_i+0x32>
 800590c:	2f00      	cmp	r7, #0
 800590e:	f000 80d9 	beq.w	8005ac4 <_printf_i+0x1d4>
 8005912:	2f58      	cmp	r7, #88	; 0x58
 8005914:	f000 80a4 	beq.w	8005a60 <_printf_i+0x170>
 8005918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800591c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005920:	e03a      	b.n	8005998 <_printf_i+0xa8>
 8005922:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005926:	2b15      	cmp	r3, #21
 8005928:	d8f6      	bhi.n	8005918 <_printf_i+0x28>
 800592a:	a101      	add	r1, pc, #4	; (adr r1, 8005930 <_printf_i+0x40>)
 800592c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005930:	08005989 	.word	0x08005989
 8005934:	0800599d 	.word	0x0800599d
 8005938:	08005919 	.word	0x08005919
 800593c:	08005919 	.word	0x08005919
 8005940:	08005919 	.word	0x08005919
 8005944:	08005919 	.word	0x08005919
 8005948:	0800599d 	.word	0x0800599d
 800594c:	08005919 	.word	0x08005919
 8005950:	08005919 	.word	0x08005919
 8005954:	08005919 	.word	0x08005919
 8005958:	08005919 	.word	0x08005919
 800595c:	08005aab 	.word	0x08005aab
 8005960:	080059cd 	.word	0x080059cd
 8005964:	08005a8d 	.word	0x08005a8d
 8005968:	08005919 	.word	0x08005919
 800596c:	08005919 	.word	0x08005919
 8005970:	08005acd 	.word	0x08005acd
 8005974:	08005919 	.word	0x08005919
 8005978:	080059cd 	.word	0x080059cd
 800597c:	08005919 	.word	0x08005919
 8005980:	08005919 	.word	0x08005919
 8005984:	08005a95 	.word	0x08005a95
 8005988:	682b      	ldr	r3, [r5, #0]
 800598a:	1d1a      	adds	r2, r3, #4
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	602a      	str	r2, [r5, #0]
 8005990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005994:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005998:	2301      	movs	r3, #1
 800599a:	e0a4      	b.n	8005ae6 <_printf_i+0x1f6>
 800599c:	6820      	ldr	r0, [r4, #0]
 800599e:	6829      	ldr	r1, [r5, #0]
 80059a0:	0606      	lsls	r6, r0, #24
 80059a2:	f101 0304 	add.w	r3, r1, #4
 80059a6:	d50a      	bpl.n	80059be <_printf_i+0xce>
 80059a8:	680e      	ldr	r6, [r1, #0]
 80059aa:	602b      	str	r3, [r5, #0]
 80059ac:	2e00      	cmp	r6, #0
 80059ae:	da03      	bge.n	80059b8 <_printf_i+0xc8>
 80059b0:	232d      	movs	r3, #45	; 0x2d
 80059b2:	4276      	negs	r6, r6
 80059b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059b8:	230a      	movs	r3, #10
 80059ba:	485e      	ldr	r0, [pc, #376]	; (8005b34 <_printf_i+0x244>)
 80059bc:	e019      	b.n	80059f2 <_printf_i+0x102>
 80059be:	680e      	ldr	r6, [r1, #0]
 80059c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059c4:	602b      	str	r3, [r5, #0]
 80059c6:	bf18      	it	ne
 80059c8:	b236      	sxthne	r6, r6
 80059ca:	e7ef      	b.n	80059ac <_printf_i+0xbc>
 80059cc:	682b      	ldr	r3, [r5, #0]
 80059ce:	6820      	ldr	r0, [r4, #0]
 80059d0:	1d19      	adds	r1, r3, #4
 80059d2:	6029      	str	r1, [r5, #0]
 80059d4:	0601      	lsls	r1, r0, #24
 80059d6:	d501      	bpl.n	80059dc <_printf_i+0xec>
 80059d8:	681e      	ldr	r6, [r3, #0]
 80059da:	e002      	b.n	80059e2 <_printf_i+0xf2>
 80059dc:	0646      	lsls	r6, r0, #25
 80059de:	d5fb      	bpl.n	80059d8 <_printf_i+0xe8>
 80059e0:	881e      	ldrh	r6, [r3, #0]
 80059e2:	2f6f      	cmp	r7, #111	; 0x6f
 80059e4:	bf0c      	ite	eq
 80059e6:	2308      	moveq	r3, #8
 80059e8:	230a      	movne	r3, #10
 80059ea:	4852      	ldr	r0, [pc, #328]	; (8005b34 <_printf_i+0x244>)
 80059ec:	2100      	movs	r1, #0
 80059ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059f2:	6865      	ldr	r5, [r4, #4]
 80059f4:	2d00      	cmp	r5, #0
 80059f6:	bfa8      	it	ge
 80059f8:	6821      	ldrge	r1, [r4, #0]
 80059fa:	60a5      	str	r5, [r4, #8]
 80059fc:	bfa4      	itt	ge
 80059fe:	f021 0104 	bicge.w	r1, r1, #4
 8005a02:	6021      	strge	r1, [r4, #0]
 8005a04:	b90e      	cbnz	r6, 8005a0a <_printf_i+0x11a>
 8005a06:	2d00      	cmp	r5, #0
 8005a08:	d04d      	beq.n	8005aa6 <_printf_i+0x1b6>
 8005a0a:	4615      	mov	r5, r2
 8005a0c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a10:	fb03 6711 	mls	r7, r3, r1, r6
 8005a14:	5dc7      	ldrb	r7, [r0, r7]
 8005a16:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a1a:	4637      	mov	r7, r6
 8005a1c:	42bb      	cmp	r3, r7
 8005a1e:	460e      	mov	r6, r1
 8005a20:	d9f4      	bls.n	8005a0c <_printf_i+0x11c>
 8005a22:	2b08      	cmp	r3, #8
 8005a24:	d10b      	bne.n	8005a3e <_printf_i+0x14e>
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	07de      	lsls	r6, r3, #31
 8005a2a:	d508      	bpl.n	8005a3e <_printf_i+0x14e>
 8005a2c:	6923      	ldr	r3, [r4, #16]
 8005a2e:	6861      	ldr	r1, [r4, #4]
 8005a30:	4299      	cmp	r1, r3
 8005a32:	bfde      	ittt	le
 8005a34:	2330      	movle	r3, #48	; 0x30
 8005a36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a3e:	1b52      	subs	r2, r2, r5
 8005a40:	6122      	str	r2, [r4, #16]
 8005a42:	464b      	mov	r3, r9
 8005a44:	4621      	mov	r1, r4
 8005a46:	4640      	mov	r0, r8
 8005a48:	f8cd a000 	str.w	sl, [sp]
 8005a4c:	aa03      	add	r2, sp, #12
 8005a4e:	f7ff fedf 	bl	8005810 <_printf_common>
 8005a52:	3001      	adds	r0, #1
 8005a54:	d14c      	bne.n	8005af0 <_printf_i+0x200>
 8005a56:	f04f 30ff 	mov.w	r0, #4294967295
 8005a5a:	b004      	add	sp, #16
 8005a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a60:	4834      	ldr	r0, [pc, #208]	; (8005b34 <_printf_i+0x244>)
 8005a62:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a66:	6829      	ldr	r1, [r5, #0]
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a6e:	6029      	str	r1, [r5, #0]
 8005a70:	061d      	lsls	r5, r3, #24
 8005a72:	d514      	bpl.n	8005a9e <_printf_i+0x1ae>
 8005a74:	07df      	lsls	r7, r3, #31
 8005a76:	bf44      	itt	mi
 8005a78:	f043 0320 	orrmi.w	r3, r3, #32
 8005a7c:	6023      	strmi	r3, [r4, #0]
 8005a7e:	b91e      	cbnz	r6, 8005a88 <_printf_i+0x198>
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	f023 0320 	bic.w	r3, r3, #32
 8005a86:	6023      	str	r3, [r4, #0]
 8005a88:	2310      	movs	r3, #16
 8005a8a:	e7af      	b.n	80059ec <_printf_i+0xfc>
 8005a8c:	6823      	ldr	r3, [r4, #0]
 8005a8e:	f043 0320 	orr.w	r3, r3, #32
 8005a92:	6023      	str	r3, [r4, #0]
 8005a94:	2378      	movs	r3, #120	; 0x78
 8005a96:	4828      	ldr	r0, [pc, #160]	; (8005b38 <_printf_i+0x248>)
 8005a98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a9c:	e7e3      	b.n	8005a66 <_printf_i+0x176>
 8005a9e:	0659      	lsls	r1, r3, #25
 8005aa0:	bf48      	it	mi
 8005aa2:	b2b6      	uxthmi	r6, r6
 8005aa4:	e7e6      	b.n	8005a74 <_printf_i+0x184>
 8005aa6:	4615      	mov	r5, r2
 8005aa8:	e7bb      	b.n	8005a22 <_printf_i+0x132>
 8005aaa:	682b      	ldr	r3, [r5, #0]
 8005aac:	6826      	ldr	r6, [r4, #0]
 8005aae:	1d18      	adds	r0, r3, #4
 8005ab0:	6961      	ldr	r1, [r4, #20]
 8005ab2:	6028      	str	r0, [r5, #0]
 8005ab4:	0635      	lsls	r5, r6, #24
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	d501      	bpl.n	8005abe <_printf_i+0x1ce>
 8005aba:	6019      	str	r1, [r3, #0]
 8005abc:	e002      	b.n	8005ac4 <_printf_i+0x1d4>
 8005abe:	0670      	lsls	r0, r6, #25
 8005ac0:	d5fb      	bpl.n	8005aba <_printf_i+0x1ca>
 8005ac2:	8019      	strh	r1, [r3, #0]
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	4615      	mov	r5, r2
 8005ac8:	6123      	str	r3, [r4, #16]
 8005aca:	e7ba      	b.n	8005a42 <_printf_i+0x152>
 8005acc:	682b      	ldr	r3, [r5, #0]
 8005ace:	2100      	movs	r1, #0
 8005ad0:	1d1a      	adds	r2, r3, #4
 8005ad2:	602a      	str	r2, [r5, #0]
 8005ad4:	681d      	ldr	r5, [r3, #0]
 8005ad6:	6862      	ldr	r2, [r4, #4]
 8005ad8:	4628      	mov	r0, r5
 8005ada:	f000 f841 	bl	8005b60 <memchr>
 8005ade:	b108      	cbz	r0, 8005ae4 <_printf_i+0x1f4>
 8005ae0:	1b40      	subs	r0, r0, r5
 8005ae2:	6060      	str	r0, [r4, #4]
 8005ae4:	6863      	ldr	r3, [r4, #4]
 8005ae6:	6123      	str	r3, [r4, #16]
 8005ae8:	2300      	movs	r3, #0
 8005aea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aee:	e7a8      	b.n	8005a42 <_printf_i+0x152>
 8005af0:	462a      	mov	r2, r5
 8005af2:	4649      	mov	r1, r9
 8005af4:	4640      	mov	r0, r8
 8005af6:	6923      	ldr	r3, [r4, #16]
 8005af8:	47d0      	blx	sl
 8005afa:	3001      	adds	r0, #1
 8005afc:	d0ab      	beq.n	8005a56 <_printf_i+0x166>
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	079b      	lsls	r3, r3, #30
 8005b02:	d413      	bmi.n	8005b2c <_printf_i+0x23c>
 8005b04:	68e0      	ldr	r0, [r4, #12]
 8005b06:	9b03      	ldr	r3, [sp, #12]
 8005b08:	4298      	cmp	r0, r3
 8005b0a:	bfb8      	it	lt
 8005b0c:	4618      	movlt	r0, r3
 8005b0e:	e7a4      	b.n	8005a5a <_printf_i+0x16a>
 8005b10:	2301      	movs	r3, #1
 8005b12:	4632      	mov	r2, r6
 8005b14:	4649      	mov	r1, r9
 8005b16:	4640      	mov	r0, r8
 8005b18:	47d0      	blx	sl
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	d09b      	beq.n	8005a56 <_printf_i+0x166>
 8005b1e:	3501      	adds	r5, #1
 8005b20:	68e3      	ldr	r3, [r4, #12]
 8005b22:	9903      	ldr	r1, [sp, #12]
 8005b24:	1a5b      	subs	r3, r3, r1
 8005b26:	42ab      	cmp	r3, r5
 8005b28:	dcf2      	bgt.n	8005b10 <_printf_i+0x220>
 8005b2a:	e7eb      	b.n	8005b04 <_printf_i+0x214>
 8005b2c:	2500      	movs	r5, #0
 8005b2e:	f104 0619 	add.w	r6, r4, #25
 8005b32:	e7f5      	b.n	8005b20 <_printf_i+0x230>
 8005b34:	08006b1b 	.word	0x08006b1b
 8005b38:	08006b2c 	.word	0x08006b2c

08005b3c <_sbrk_r>:
 8005b3c:	b538      	push	{r3, r4, r5, lr}
 8005b3e:	2300      	movs	r3, #0
 8005b40:	4d05      	ldr	r5, [pc, #20]	; (8005b58 <_sbrk_r+0x1c>)
 8005b42:	4604      	mov	r4, r0
 8005b44:	4608      	mov	r0, r1
 8005b46:	602b      	str	r3, [r5, #0]
 8005b48:	f7fb ff1c 	bl	8001984 <_sbrk>
 8005b4c:	1c43      	adds	r3, r0, #1
 8005b4e:	d102      	bne.n	8005b56 <_sbrk_r+0x1a>
 8005b50:	682b      	ldr	r3, [r5, #0]
 8005b52:	b103      	cbz	r3, 8005b56 <_sbrk_r+0x1a>
 8005b54:	6023      	str	r3, [r4, #0]
 8005b56:	bd38      	pop	{r3, r4, r5, pc}
 8005b58:	20001234 	.word	0x20001234

08005b5c <__retarget_lock_acquire_recursive>:
 8005b5c:	4770      	bx	lr

08005b5e <__retarget_lock_release_recursive>:
 8005b5e:	4770      	bx	lr

08005b60 <memchr>:
 8005b60:	4603      	mov	r3, r0
 8005b62:	b510      	push	{r4, lr}
 8005b64:	b2c9      	uxtb	r1, r1
 8005b66:	4402      	add	r2, r0
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	d101      	bne.n	8005b72 <memchr+0x12>
 8005b6e:	2000      	movs	r0, #0
 8005b70:	e003      	b.n	8005b7a <memchr+0x1a>
 8005b72:	7804      	ldrb	r4, [r0, #0]
 8005b74:	3301      	adds	r3, #1
 8005b76:	428c      	cmp	r4, r1
 8005b78:	d1f6      	bne.n	8005b68 <memchr+0x8>
 8005b7a:	bd10      	pop	{r4, pc}

08005b7c <memmove>:
 8005b7c:	4288      	cmp	r0, r1
 8005b7e:	b510      	push	{r4, lr}
 8005b80:	eb01 0402 	add.w	r4, r1, r2
 8005b84:	d902      	bls.n	8005b8c <memmove+0x10>
 8005b86:	4284      	cmp	r4, r0
 8005b88:	4623      	mov	r3, r4
 8005b8a:	d807      	bhi.n	8005b9c <memmove+0x20>
 8005b8c:	1e43      	subs	r3, r0, #1
 8005b8e:	42a1      	cmp	r1, r4
 8005b90:	d008      	beq.n	8005ba4 <memmove+0x28>
 8005b92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b9a:	e7f8      	b.n	8005b8e <memmove+0x12>
 8005b9c:	4601      	mov	r1, r0
 8005b9e:	4402      	add	r2, r0
 8005ba0:	428a      	cmp	r2, r1
 8005ba2:	d100      	bne.n	8005ba6 <memmove+0x2a>
 8005ba4:	bd10      	pop	{r4, pc}
 8005ba6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005baa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005bae:	e7f7      	b.n	8005ba0 <memmove+0x24>

08005bb0 <__malloc_lock>:
 8005bb0:	4801      	ldr	r0, [pc, #4]	; (8005bb8 <__malloc_lock+0x8>)
 8005bb2:	f7ff bfd3 	b.w	8005b5c <__retarget_lock_acquire_recursive>
 8005bb6:	bf00      	nop
 8005bb8:	20001238 	.word	0x20001238

08005bbc <__malloc_unlock>:
 8005bbc:	4801      	ldr	r0, [pc, #4]	; (8005bc4 <__malloc_unlock+0x8>)
 8005bbe:	f7ff bfce 	b.w	8005b5e <__retarget_lock_release_recursive>
 8005bc2:	bf00      	nop
 8005bc4:	20001238 	.word	0x20001238

08005bc8 <_realloc_r>:
 8005bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bcc:	4680      	mov	r8, r0
 8005bce:	4614      	mov	r4, r2
 8005bd0:	460e      	mov	r6, r1
 8005bd2:	b921      	cbnz	r1, 8005bde <_realloc_r+0x16>
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bda:	f7ff bc49 	b.w	8005470 <_malloc_r>
 8005bde:	b92a      	cbnz	r2, 8005bec <_realloc_r+0x24>
 8005be0:	f7ff fbde 	bl	80053a0 <_free_r>
 8005be4:	4625      	mov	r5, r4
 8005be6:	4628      	mov	r0, r5
 8005be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bec:	f000 f81b 	bl	8005c26 <_malloc_usable_size_r>
 8005bf0:	4284      	cmp	r4, r0
 8005bf2:	4607      	mov	r7, r0
 8005bf4:	d802      	bhi.n	8005bfc <_realloc_r+0x34>
 8005bf6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005bfa:	d812      	bhi.n	8005c22 <_realloc_r+0x5a>
 8005bfc:	4621      	mov	r1, r4
 8005bfe:	4640      	mov	r0, r8
 8005c00:	f7ff fc36 	bl	8005470 <_malloc_r>
 8005c04:	4605      	mov	r5, r0
 8005c06:	2800      	cmp	r0, #0
 8005c08:	d0ed      	beq.n	8005be6 <_realloc_r+0x1e>
 8005c0a:	42bc      	cmp	r4, r7
 8005c0c:	4622      	mov	r2, r4
 8005c0e:	4631      	mov	r1, r6
 8005c10:	bf28      	it	cs
 8005c12:	463a      	movcs	r2, r7
 8005c14:	f7ff fb8e 	bl	8005334 <memcpy>
 8005c18:	4631      	mov	r1, r6
 8005c1a:	4640      	mov	r0, r8
 8005c1c:	f7ff fbc0 	bl	80053a0 <_free_r>
 8005c20:	e7e1      	b.n	8005be6 <_realloc_r+0x1e>
 8005c22:	4635      	mov	r5, r6
 8005c24:	e7df      	b.n	8005be6 <_realloc_r+0x1e>

08005c26 <_malloc_usable_size_r>:
 8005c26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c2a:	1f18      	subs	r0, r3, #4
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	bfbc      	itt	lt
 8005c30:	580b      	ldrlt	r3, [r1, r0]
 8005c32:	18c0      	addlt	r0, r0, r3
 8005c34:	4770      	bx	lr
	...

08005c38 <pow>:
 8005c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c3c:	4614      	mov	r4, r2
 8005c3e:	461d      	mov	r5, r3
 8005c40:	4680      	mov	r8, r0
 8005c42:	4689      	mov	r9, r1
 8005c44:	f000 f860 	bl	8005d08 <__ieee754_pow>
 8005c48:	4622      	mov	r2, r4
 8005c4a:	4606      	mov	r6, r0
 8005c4c:	460f      	mov	r7, r1
 8005c4e:	462b      	mov	r3, r5
 8005c50:	4620      	mov	r0, r4
 8005c52:	4629      	mov	r1, r5
 8005c54:	f7fa feda 	bl	8000a0c <__aeabi_dcmpun>
 8005c58:	bbc8      	cbnz	r0, 8005cce <pow+0x96>
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	4640      	mov	r0, r8
 8005c60:	4649      	mov	r1, r9
 8005c62:	f7fa fea1 	bl	80009a8 <__aeabi_dcmpeq>
 8005c66:	b1b8      	cbz	r0, 8005c98 <pow+0x60>
 8005c68:	2200      	movs	r2, #0
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	4629      	mov	r1, r5
 8005c70:	f7fa fe9a 	bl	80009a8 <__aeabi_dcmpeq>
 8005c74:	2800      	cmp	r0, #0
 8005c76:	d141      	bne.n	8005cfc <pow+0xc4>
 8005c78:	4620      	mov	r0, r4
 8005c7a:	4629      	mov	r1, r5
 8005c7c:	f000 fe39 	bl	80068f2 <finite>
 8005c80:	b328      	cbz	r0, 8005cce <pow+0x96>
 8005c82:	2200      	movs	r2, #0
 8005c84:	2300      	movs	r3, #0
 8005c86:	4620      	mov	r0, r4
 8005c88:	4629      	mov	r1, r5
 8005c8a:	f7fa fe97 	bl	80009bc <__aeabi_dcmplt>
 8005c8e:	b1f0      	cbz	r0, 8005cce <pow+0x96>
 8005c90:	f7ff fb26 	bl	80052e0 <__errno>
 8005c94:	2322      	movs	r3, #34	; 0x22
 8005c96:	e019      	b.n	8005ccc <pow+0x94>
 8005c98:	4630      	mov	r0, r6
 8005c9a:	4639      	mov	r1, r7
 8005c9c:	f000 fe29 	bl	80068f2 <finite>
 8005ca0:	b9c8      	cbnz	r0, 8005cd6 <pow+0x9e>
 8005ca2:	4640      	mov	r0, r8
 8005ca4:	4649      	mov	r1, r9
 8005ca6:	f000 fe24 	bl	80068f2 <finite>
 8005caa:	b1a0      	cbz	r0, 8005cd6 <pow+0x9e>
 8005cac:	4620      	mov	r0, r4
 8005cae:	4629      	mov	r1, r5
 8005cb0:	f000 fe1f 	bl	80068f2 <finite>
 8005cb4:	b178      	cbz	r0, 8005cd6 <pow+0x9e>
 8005cb6:	4632      	mov	r2, r6
 8005cb8:	463b      	mov	r3, r7
 8005cba:	4630      	mov	r0, r6
 8005cbc:	4639      	mov	r1, r7
 8005cbe:	f7fa fea5 	bl	8000a0c <__aeabi_dcmpun>
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	d0e4      	beq.n	8005c90 <pow+0x58>
 8005cc6:	f7ff fb0b 	bl	80052e0 <__errno>
 8005cca:	2321      	movs	r3, #33	; 0x21
 8005ccc:	6003      	str	r3, [r0, #0]
 8005cce:	4630      	mov	r0, r6
 8005cd0:	4639      	mov	r1, r7
 8005cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	2300      	movs	r3, #0
 8005cda:	4630      	mov	r0, r6
 8005cdc:	4639      	mov	r1, r7
 8005cde:	f7fa fe63 	bl	80009a8 <__aeabi_dcmpeq>
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	d0f3      	beq.n	8005cce <pow+0x96>
 8005ce6:	4640      	mov	r0, r8
 8005ce8:	4649      	mov	r1, r9
 8005cea:	f000 fe02 	bl	80068f2 <finite>
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	d0ed      	beq.n	8005cce <pow+0x96>
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	4629      	mov	r1, r5
 8005cf6:	f000 fdfc 	bl	80068f2 <finite>
 8005cfa:	e7c8      	b.n	8005c8e <pow+0x56>
 8005cfc:	2600      	movs	r6, #0
 8005cfe:	4f01      	ldr	r7, [pc, #4]	; (8005d04 <pow+0xcc>)
 8005d00:	e7e5      	b.n	8005cce <pow+0x96>
 8005d02:	bf00      	nop
 8005d04:	3ff00000 	.word	0x3ff00000

08005d08 <__ieee754_pow>:
 8005d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d0c:	b093      	sub	sp, #76	; 0x4c
 8005d0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d12:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8005d16:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8005d1a:	4689      	mov	r9, r1
 8005d1c:	ea56 0102 	orrs.w	r1, r6, r2
 8005d20:	4680      	mov	r8, r0
 8005d22:	d111      	bne.n	8005d48 <__ieee754_pow+0x40>
 8005d24:	1803      	adds	r3, r0, r0
 8005d26:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8005d2a:	4152      	adcs	r2, r2
 8005d2c:	4299      	cmp	r1, r3
 8005d2e:	4b82      	ldr	r3, [pc, #520]	; (8005f38 <__ieee754_pow+0x230>)
 8005d30:	4193      	sbcs	r3, r2
 8005d32:	f080 84b9 	bcs.w	80066a8 <__ieee754_pow+0x9a0>
 8005d36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d3a:	4640      	mov	r0, r8
 8005d3c:	4649      	mov	r1, r9
 8005d3e:	f7fa fa15 	bl	800016c <__adddf3>
 8005d42:	4683      	mov	fp, r0
 8005d44:	468c      	mov	ip, r1
 8005d46:	e06f      	b.n	8005e28 <__ieee754_pow+0x120>
 8005d48:	4b7c      	ldr	r3, [pc, #496]	; (8005f3c <__ieee754_pow+0x234>)
 8005d4a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8005d4e:	429c      	cmp	r4, r3
 8005d50:	464d      	mov	r5, r9
 8005d52:	4682      	mov	sl, r0
 8005d54:	dc06      	bgt.n	8005d64 <__ieee754_pow+0x5c>
 8005d56:	d101      	bne.n	8005d5c <__ieee754_pow+0x54>
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	d1ec      	bne.n	8005d36 <__ieee754_pow+0x2e>
 8005d5c:	429e      	cmp	r6, r3
 8005d5e:	dc01      	bgt.n	8005d64 <__ieee754_pow+0x5c>
 8005d60:	d10f      	bne.n	8005d82 <__ieee754_pow+0x7a>
 8005d62:	b172      	cbz	r2, 8005d82 <__ieee754_pow+0x7a>
 8005d64:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005d68:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005d6c:	ea55 050a 	orrs.w	r5, r5, sl
 8005d70:	d1e1      	bne.n	8005d36 <__ieee754_pow+0x2e>
 8005d72:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005d76:	18db      	adds	r3, r3, r3
 8005d78:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005d7c:	4152      	adcs	r2, r2
 8005d7e:	429d      	cmp	r5, r3
 8005d80:	e7d5      	b.n	8005d2e <__ieee754_pow+0x26>
 8005d82:	2d00      	cmp	r5, #0
 8005d84:	da39      	bge.n	8005dfa <__ieee754_pow+0xf2>
 8005d86:	4b6e      	ldr	r3, [pc, #440]	; (8005f40 <__ieee754_pow+0x238>)
 8005d88:	429e      	cmp	r6, r3
 8005d8a:	dc52      	bgt.n	8005e32 <__ieee754_pow+0x12a>
 8005d8c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005d90:	429e      	cmp	r6, r3
 8005d92:	f340 849c 	ble.w	80066ce <__ieee754_pow+0x9c6>
 8005d96:	1533      	asrs	r3, r6, #20
 8005d98:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005d9c:	2b14      	cmp	r3, #20
 8005d9e:	dd0f      	ble.n	8005dc0 <__ieee754_pow+0xb8>
 8005da0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005da4:	fa22 f103 	lsr.w	r1, r2, r3
 8005da8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dac:	4293      	cmp	r3, r2
 8005dae:	f040 848e 	bne.w	80066ce <__ieee754_pow+0x9c6>
 8005db2:	f001 0101 	and.w	r1, r1, #1
 8005db6:	f1c1 0302 	rsb	r3, r1, #2
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	b182      	cbz	r2, 8005de0 <__ieee754_pow+0xd8>
 8005dbe:	e05d      	b.n	8005e7c <__ieee754_pow+0x174>
 8005dc0:	2a00      	cmp	r2, #0
 8005dc2:	d159      	bne.n	8005e78 <__ieee754_pow+0x170>
 8005dc4:	f1c3 0314 	rsb	r3, r3, #20
 8005dc8:	fa46 f103 	asr.w	r1, r6, r3
 8005dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd0:	42b3      	cmp	r3, r6
 8005dd2:	f040 8479 	bne.w	80066c8 <__ieee754_pow+0x9c0>
 8005dd6:	f001 0101 	and.w	r1, r1, #1
 8005dda:	f1c1 0302 	rsb	r3, r1, #2
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	4b58      	ldr	r3, [pc, #352]	; (8005f44 <__ieee754_pow+0x23c>)
 8005de2:	429e      	cmp	r6, r3
 8005de4:	d132      	bne.n	8005e4c <__ieee754_pow+0x144>
 8005de6:	2f00      	cmp	r7, #0
 8005de8:	f280 846a 	bge.w	80066c0 <__ieee754_pow+0x9b8>
 8005dec:	4642      	mov	r2, r8
 8005dee:	464b      	mov	r3, r9
 8005df0:	2000      	movs	r0, #0
 8005df2:	4954      	ldr	r1, [pc, #336]	; (8005f44 <__ieee754_pow+0x23c>)
 8005df4:	f7fa fc9a 	bl	800072c <__aeabi_ddiv>
 8005df8:	e7a3      	b.n	8005d42 <__ieee754_pow+0x3a>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	2a00      	cmp	r2, #0
 8005e00:	d13c      	bne.n	8005e7c <__ieee754_pow+0x174>
 8005e02:	4b4e      	ldr	r3, [pc, #312]	; (8005f3c <__ieee754_pow+0x234>)
 8005e04:	429e      	cmp	r6, r3
 8005e06:	d1eb      	bne.n	8005de0 <__ieee754_pow+0xd8>
 8005e08:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005e0c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005e10:	ea53 030a 	orrs.w	r3, r3, sl
 8005e14:	f000 8448 	beq.w	80066a8 <__ieee754_pow+0x9a0>
 8005e18:	4b4b      	ldr	r3, [pc, #300]	; (8005f48 <__ieee754_pow+0x240>)
 8005e1a:	429c      	cmp	r4, r3
 8005e1c:	dd0b      	ble.n	8005e36 <__ieee754_pow+0x12e>
 8005e1e:	2f00      	cmp	r7, #0
 8005e20:	f2c0 8448 	blt.w	80066b4 <__ieee754_pow+0x9ac>
 8005e24:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8005e28:	4658      	mov	r0, fp
 8005e2a:	4661      	mov	r1, ip
 8005e2c:	b013      	add	sp, #76	; 0x4c
 8005e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e32:	2302      	movs	r3, #2
 8005e34:	e7e2      	b.n	8005dfc <__ieee754_pow+0xf4>
 8005e36:	2f00      	cmp	r7, #0
 8005e38:	f04f 0b00 	mov.w	fp, #0
 8005e3c:	f04f 0c00 	mov.w	ip, #0
 8005e40:	daf2      	bge.n	8005e28 <__ieee754_pow+0x120>
 8005e42:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8005e46:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8005e4a:	e7ed      	b.n	8005e28 <__ieee754_pow+0x120>
 8005e4c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8005e50:	d106      	bne.n	8005e60 <__ieee754_pow+0x158>
 8005e52:	4642      	mov	r2, r8
 8005e54:	464b      	mov	r3, r9
 8005e56:	4640      	mov	r0, r8
 8005e58:	4649      	mov	r1, r9
 8005e5a:	f7fa fb3d 	bl	80004d8 <__aeabi_dmul>
 8005e5e:	e770      	b.n	8005d42 <__ieee754_pow+0x3a>
 8005e60:	4b3a      	ldr	r3, [pc, #232]	; (8005f4c <__ieee754_pow+0x244>)
 8005e62:	429f      	cmp	r7, r3
 8005e64:	d10a      	bne.n	8005e7c <__ieee754_pow+0x174>
 8005e66:	2d00      	cmp	r5, #0
 8005e68:	db08      	blt.n	8005e7c <__ieee754_pow+0x174>
 8005e6a:	4640      	mov	r0, r8
 8005e6c:	4649      	mov	r1, r9
 8005e6e:	b013      	add	sp, #76	; 0x4c
 8005e70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e74:	f000 bc5e 	b.w	8006734 <__ieee754_sqrt>
 8005e78:	2300      	movs	r3, #0
 8005e7a:	9300      	str	r3, [sp, #0]
 8005e7c:	4640      	mov	r0, r8
 8005e7e:	4649      	mov	r1, r9
 8005e80:	f000 fd34 	bl	80068ec <fabs>
 8005e84:	4683      	mov	fp, r0
 8005e86:	468c      	mov	ip, r1
 8005e88:	f1ba 0f00 	cmp.w	sl, #0
 8005e8c:	d128      	bne.n	8005ee0 <__ieee754_pow+0x1d8>
 8005e8e:	b124      	cbz	r4, 8005e9a <__ieee754_pow+0x192>
 8005e90:	4b2c      	ldr	r3, [pc, #176]	; (8005f44 <__ieee754_pow+0x23c>)
 8005e92:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d122      	bne.n	8005ee0 <__ieee754_pow+0x1d8>
 8005e9a:	2f00      	cmp	r7, #0
 8005e9c:	da07      	bge.n	8005eae <__ieee754_pow+0x1a6>
 8005e9e:	465a      	mov	r2, fp
 8005ea0:	4663      	mov	r3, ip
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	4927      	ldr	r1, [pc, #156]	; (8005f44 <__ieee754_pow+0x23c>)
 8005ea6:	f7fa fc41 	bl	800072c <__aeabi_ddiv>
 8005eaa:	4683      	mov	fp, r0
 8005eac:	468c      	mov	ip, r1
 8005eae:	2d00      	cmp	r5, #0
 8005eb0:	daba      	bge.n	8005e28 <__ieee754_pow+0x120>
 8005eb2:	9b00      	ldr	r3, [sp, #0]
 8005eb4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005eb8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005ebc:	4323      	orrs	r3, r4
 8005ebe:	d108      	bne.n	8005ed2 <__ieee754_pow+0x1ca>
 8005ec0:	465a      	mov	r2, fp
 8005ec2:	4663      	mov	r3, ip
 8005ec4:	4658      	mov	r0, fp
 8005ec6:	4661      	mov	r1, ip
 8005ec8:	f7fa f94e 	bl	8000168 <__aeabi_dsub>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	460b      	mov	r3, r1
 8005ed0:	e790      	b.n	8005df4 <__ieee754_pow+0xec>
 8005ed2:	9b00      	ldr	r3, [sp, #0]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d1a7      	bne.n	8005e28 <__ieee754_pow+0x120>
 8005ed8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8005edc:	469c      	mov	ip, r3
 8005ede:	e7a3      	b.n	8005e28 <__ieee754_pow+0x120>
 8005ee0:	0feb      	lsrs	r3, r5, #31
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	930c      	str	r3, [sp, #48]	; 0x30
 8005ee6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ee8:	9b00      	ldr	r3, [sp, #0]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	d104      	bne.n	8005ef8 <__ieee754_pow+0x1f0>
 8005eee:	4642      	mov	r2, r8
 8005ef0:	464b      	mov	r3, r9
 8005ef2:	4640      	mov	r0, r8
 8005ef4:	4649      	mov	r1, r9
 8005ef6:	e7e7      	b.n	8005ec8 <__ieee754_pow+0x1c0>
 8005ef8:	4b15      	ldr	r3, [pc, #84]	; (8005f50 <__ieee754_pow+0x248>)
 8005efa:	429e      	cmp	r6, r3
 8005efc:	f340 80f6 	ble.w	80060ec <__ieee754_pow+0x3e4>
 8005f00:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005f04:	429e      	cmp	r6, r3
 8005f06:	4b10      	ldr	r3, [pc, #64]	; (8005f48 <__ieee754_pow+0x240>)
 8005f08:	dd09      	ble.n	8005f1e <__ieee754_pow+0x216>
 8005f0a:	429c      	cmp	r4, r3
 8005f0c:	dc0c      	bgt.n	8005f28 <__ieee754_pow+0x220>
 8005f0e:	2f00      	cmp	r7, #0
 8005f10:	da0c      	bge.n	8005f2c <__ieee754_pow+0x224>
 8005f12:	2000      	movs	r0, #0
 8005f14:	b013      	add	sp, #76	; 0x4c
 8005f16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f1a:	f000 bce2 	b.w	80068e2 <__math_oflow>
 8005f1e:	429c      	cmp	r4, r3
 8005f20:	dbf5      	blt.n	8005f0e <__ieee754_pow+0x206>
 8005f22:	4b08      	ldr	r3, [pc, #32]	; (8005f44 <__ieee754_pow+0x23c>)
 8005f24:	429c      	cmp	r4, r3
 8005f26:	dd15      	ble.n	8005f54 <__ieee754_pow+0x24c>
 8005f28:	2f00      	cmp	r7, #0
 8005f2a:	dcf2      	bgt.n	8005f12 <__ieee754_pow+0x20a>
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	b013      	add	sp, #76	; 0x4c
 8005f30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f34:	f000 bcd0 	b.w	80068d8 <__math_uflow>
 8005f38:	fff00000 	.word	0xfff00000
 8005f3c:	7ff00000 	.word	0x7ff00000
 8005f40:	433fffff 	.word	0x433fffff
 8005f44:	3ff00000 	.word	0x3ff00000
 8005f48:	3fefffff 	.word	0x3fefffff
 8005f4c:	3fe00000 	.word	0x3fe00000
 8005f50:	41e00000 	.word	0x41e00000
 8005f54:	4661      	mov	r1, ip
 8005f56:	2200      	movs	r2, #0
 8005f58:	4658      	mov	r0, fp
 8005f5a:	4b5f      	ldr	r3, [pc, #380]	; (80060d8 <__ieee754_pow+0x3d0>)
 8005f5c:	f7fa f904 	bl	8000168 <__aeabi_dsub>
 8005f60:	a355      	add	r3, pc, #340	; (adr r3, 80060b8 <__ieee754_pow+0x3b0>)
 8005f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f66:	4604      	mov	r4, r0
 8005f68:	460d      	mov	r5, r1
 8005f6a:	f7fa fab5 	bl	80004d8 <__aeabi_dmul>
 8005f6e:	a354      	add	r3, pc, #336	; (adr r3, 80060c0 <__ieee754_pow+0x3b8>)
 8005f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f74:	4606      	mov	r6, r0
 8005f76:	460f      	mov	r7, r1
 8005f78:	4620      	mov	r0, r4
 8005f7a:	4629      	mov	r1, r5
 8005f7c:	f7fa faac 	bl	80004d8 <__aeabi_dmul>
 8005f80:	2200      	movs	r2, #0
 8005f82:	4682      	mov	sl, r0
 8005f84:	468b      	mov	fp, r1
 8005f86:	4620      	mov	r0, r4
 8005f88:	4629      	mov	r1, r5
 8005f8a:	4b54      	ldr	r3, [pc, #336]	; (80060dc <__ieee754_pow+0x3d4>)
 8005f8c:	f7fa faa4 	bl	80004d8 <__aeabi_dmul>
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	a14c      	add	r1, pc, #304	; (adr r1, 80060c8 <__ieee754_pow+0x3c0>)
 8005f96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f9a:	f7fa f8e5 	bl	8000168 <__aeabi_dsub>
 8005f9e:	4622      	mov	r2, r4
 8005fa0:	462b      	mov	r3, r5
 8005fa2:	f7fa fa99 	bl	80004d8 <__aeabi_dmul>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	2000      	movs	r0, #0
 8005fac:	494c      	ldr	r1, [pc, #304]	; (80060e0 <__ieee754_pow+0x3d8>)
 8005fae:	f7fa f8db 	bl	8000168 <__aeabi_dsub>
 8005fb2:	4622      	mov	r2, r4
 8005fb4:	462b      	mov	r3, r5
 8005fb6:	4680      	mov	r8, r0
 8005fb8:	4689      	mov	r9, r1
 8005fba:	4620      	mov	r0, r4
 8005fbc:	4629      	mov	r1, r5
 8005fbe:	f7fa fa8b 	bl	80004d8 <__aeabi_dmul>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	4640      	mov	r0, r8
 8005fc8:	4649      	mov	r1, r9
 8005fca:	f7fa fa85 	bl	80004d8 <__aeabi_dmul>
 8005fce:	a340      	add	r3, pc, #256	; (adr r3, 80060d0 <__ieee754_pow+0x3c8>)
 8005fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd4:	f7fa fa80 	bl	80004d8 <__aeabi_dmul>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4650      	mov	r0, sl
 8005fde:	4659      	mov	r1, fp
 8005fe0:	f7fa f8c2 	bl	8000168 <__aeabi_dsub>
 8005fe4:	f04f 0a00 	mov.w	sl, #0
 8005fe8:	4602      	mov	r2, r0
 8005fea:	460b      	mov	r3, r1
 8005fec:	4604      	mov	r4, r0
 8005fee:	460d      	mov	r5, r1
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	4639      	mov	r1, r7
 8005ff4:	f7fa f8ba 	bl	800016c <__adddf3>
 8005ff8:	4632      	mov	r2, r6
 8005ffa:	463b      	mov	r3, r7
 8005ffc:	4650      	mov	r0, sl
 8005ffe:	468b      	mov	fp, r1
 8006000:	f7fa f8b2 	bl	8000168 <__aeabi_dsub>
 8006004:	4602      	mov	r2, r0
 8006006:	460b      	mov	r3, r1
 8006008:	4620      	mov	r0, r4
 800600a:	4629      	mov	r1, r5
 800600c:	f7fa f8ac 	bl	8000168 <__aeabi_dsub>
 8006010:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006014:	9b00      	ldr	r3, [sp, #0]
 8006016:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006018:	3b01      	subs	r3, #1
 800601a:	4313      	orrs	r3, r2
 800601c:	f04f 0600 	mov.w	r6, #0
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	bf0c      	ite	eq
 8006026:	4b2f      	ldreq	r3, [pc, #188]	; (80060e4 <__ieee754_pow+0x3dc>)
 8006028:	4b2b      	ldrne	r3, [pc, #172]	; (80060d8 <__ieee754_pow+0x3d0>)
 800602a:	4604      	mov	r4, r0
 800602c:	460d      	mov	r5, r1
 800602e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006032:	e9cd 2300 	strd	r2, r3, [sp]
 8006036:	4632      	mov	r2, r6
 8006038:	463b      	mov	r3, r7
 800603a:	f7fa f895 	bl	8000168 <__aeabi_dsub>
 800603e:	4652      	mov	r2, sl
 8006040:	465b      	mov	r3, fp
 8006042:	f7fa fa49 	bl	80004d8 <__aeabi_dmul>
 8006046:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800604a:	4680      	mov	r8, r0
 800604c:	4689      	mov	r9, r1
 800604e:	4620      	mov	r0, r4
 8006050:	4629      	mov	r1, r5
 8006052:	f7fa fa41 	bl	80004d8 <__aeabi_dmul>
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	4640      	mov	r0, r8
 800605c:	4649      	mov	r1, r9
 800605e:	f7fa f885 	bl	800016c <__adddf3>
 8006062:	4632      	mov	r2, r6
 8006064:	463b      	mov	r3, r7
 8006066:	4680      	mov	r8, r0
 8006068:	4689      	mov	r9, r1
 800606a:	4650      	mov	r0, sl
 800606c:	4659      	mov	r1, fp
 800606e:	f7fa fa33 	bl	80004d8 <__aeabi_dmul>
 8006072:	4604      	mov	r4, r0
 8006074:	460d      	mov	r5, r1
 8006076:	460b      	mov	r3, r1
 8006078:	4602      	mov	r2, r0
 800607a:	4649      	mov	r1, r9
 800607c:	4640      	mov	r0, r8
 800607e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006082:	f7fa f873 	bl	800016c <__adddf3>
 8006086:	4b18      	ldr	r3, [pc, #96]	; (80060e8 <__ieee754_pow+0x3e0>)
 8006088:	4682      	mov	sl, r0
 800608a:	4299      	cmp	r1, r3
 800608c:	460f      	mov	r7, r1
 800608e:	460e      	mov	r6, r1
 8006090:	f340 82e5 	ble.w	800665e <__ieee754_pow+0x956>
 8006094:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006098:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800609c:	4303      	orrs	r3, r0
 800609e:	f000 81df 	beq.w	8006460 <__ieee754_pow+0x758>
 80060a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060a6:	2200      	movs	r2, #0
 80060a8:	2300      	movs	r3, #0
 80060aa:	f7fa fc87 	bl	80009bc <__aeabi_dcmplt>
 80060ae:	3800      	subs	r0, #0
 80060b0:	bf18      	it	ne
 80060b2:	2001      	movne	r0, #1
 80060b4:	e72e      	b.n	8005f14 <__ieee754_pow+0x20c>
 80060b6:	bf00      	nop
 80060b8:	60000000 	.word	0x60000000
 80060bc:	3ff71547 	.word	0x3ff71547
 80060c0:	f85ddf44 	.word	0xf85ddf44
 80060c4:	3e54ae0b 	.word	0x3e54ae0b
 80060c8:	55555555 	.word	0x55555555
 80060cc:	3fd55555 	.word	0x3fd55555
 80060d0:	652b82fe 	.word	0x652b82fe
 80060d4:	3ff71547 	.word	0x3ff71547
 80060d8:	3ff00000 	.word	0x3ff00000
 80060dc:	3fd00000 	.word	0x3fd00000
 80060e0:	3fe00000 	.word	0x3fe00000
 80060e4:	bff00000 	.word	0xbff00000
 80060e8:	408fffff 	.word	0x408fffff
 80060ec:	4bd2      	ldr	r3, [pc, #840]	; (8006438 <__ieee754_pow+0x730>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	402b      	ands	r3, r5
 80060f2:	b943      	cbnz	r3, 8006106 <__ieee754_pow+0x3fe>
 80060f4:	4658      	mov	r0, fp
 80060f6:	4661      	mov	r1, ip
 80060f8:	4bd0      	ldr	r3, [pc, #832]	; (800643c <__ieee754_pow+0x734>)
 80060fa:	f7fa f9ed 	bl	80004d8 <__aeabi_dmul>
 80060fe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006102:	4683      	mov	fp, r0
 8006104:	460c      	mov	r4, r1
 8006106:	1523      	asrs	r3, r4, #20
 8006108:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800610c:	4413      	add	r3, r2
 800610e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006110:	4bcb      	ldr	r3, [pc, #812]	; (8006440 <__ieee754_pow+0x738>)
 8006112:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006116:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800611a:	429c      	cmp	r4, r3
 800611c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006120:	dd08      	ble.n	8006134 <__ieee754_pow+0x42c>
 8006122:	4bc8      	ldr	r3, [pc, #800]	; (8006444 <__ieee754_pow+0x73c>)
 8006124:	429c      	cmp	r4, r3
 8006126:	f340 8199 	ble.w	800645c <__ieee754_pow+0x754>
 800612a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800612c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006130:	3301      	adds	r3, #1
 8006132:	930b      	str	r3, [sp, #44]	; 0x2c
 8006134:	2600      	movs	r6, #0
 8006136:	00f3      	lsls	r3, r6, #3
 8006138:	930d      	str	r3, [sp, #52]	; 0x34
 800613a:	4bc3      	ldr	r3, [pc, #780]	; (8006448 <__ieee754_pow+0x740>)
 800613c:	4658      	mov	r0, fp
 800613e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006142:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006146:	4629      	mov	r1, r5
 8006148:	461a      	mov	r2, r3
 800614a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800614e:	4623      	mov	r3, r4
 8006150:	f7fa f80a 	bl	8000168 <__aeabi_dsub>
 8006154:	46da      	mov	sl, fp
 8006156:	462b      	mov	r3, r5
 8006158:	4652      	mov	r2, sl
 800615a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800615e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006162:	f7fa f803 	bl	800016c <__adddf3>
 8006166:	4602      	mov	r2, r0
 8006168:	460b      	mov	r3, r1
 800616a:	2000      	movs	r0, #0
 800616c:	49b7      	ldr	r1, [pc, #732]	; (800644c <__ieee754_pow+0x744>)
 800616e:	f7fa fadd 	bl	800072c <__aeabi_ddiv>
 8006172:	4602      	mov	r2, r0
 8006174:	460b      	mov	r3, r1
 8006176:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800617a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800617e:	f7fa f9ab 	bl	80004d8 <__aeabi_dmul>
 8006182:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006186:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800618a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800618e:	2300      	movs	r3, #0
 8006190:	2200      	movs	r2, #0
 8006192:	46ab      	mov	fp, r5
 8006194:	106d      	asrs	r5, r5, #1
 8006196:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800619a:	9304      	str	r3, [sp, #16]
 800619c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80061a0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80061a4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80061a8:	4640      	mov	r0, r8
 80061aa:	4649      	mov	r1, r9
 80061ac:	4614      	mov	r4, r2
 80061ae:	461d      	mov	r5, r3
 80061b0:	f7fa f992 	bl	80004d8 <__aeabi_dmul>
 80061b4:	4602      	mov	r2, r0
 80061b6:	460b      	mov	r3, r1
 80061b8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80061bc:	f7f9 ffd4 	bl	8000168 <__aeabi_dsub>
 80061c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80061c4:	4606      	mov	r6, r0
 80061c6:	460f      	mov	r7, r1
 80061c8:	4620      	mov	r0, r4
 80061ca:	4629      	mov	r1, r5
 80061cc:	f7f9 ffcc 	bl	8000168 <__aeabi_dsub>
 80061d0:	4602      	mov	r2, r0
 80061d2:	460b      	mov	r3, r1
 80061d4:	4650      	mov	r0, sl
 80061d6:	4659      	mov	r1, fp
 80061d8:	f7f9 ffc6 	bl	8000168 <__aeabi_dsub>
 80061dc:	4642      	mov	r2, r8
 80061de:	464b      	mov	r3, r9
 80061e0:	f7fa f97a 	bl	80004d8 <__aeabi_dmul>
 80061e4:	4602      	mov	r2, r0
 80061e6:	460b      	mov	r3, r1
 80061e8:	4630      	mov	r0, r6
 80061ea:	4639      	mov	r1, r7
 80061ec:	f7f9 ffbc 	bl	8000168 <__aeabi_dsub>
 80061f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80061f4:	f7fa f970 	bl	80004d8 <__aeabi_dmul>
 80061f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80061fc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006200:	4610      	mov	r0, r2
 8006202:	4619      	mov	r1, r3
 8006204:	f7fa f968 	bl	80004d8 <__aeabi_dmul>
 8006208:	a379      	add	r3, pc, #484	; (adr r3, 80063f0 <__ieee754_pow+0x6e8>)
 800620a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620e:	4604      	mov	r4, r0
 8006210:	460d      	mov	r5, r1
 8006212:	f7fa f961 	bl	80004d8 <__aeabi_dmul>
 8006216:	a378      	add	r3, pc, #480	; (adr r3, 80063f8 <__ieee754_pow+0x6f0>)
 8006218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621c:	f7f9 ffa6 	bl	800016c <__adddf3>
 8006220:	4622      	mov	r2, r4
 8006222:	462b      	mov	r3, r5
 8006224:	f7fa f958 	bl	80004d8 <__aeabi_dmul>
 8006228:	a375      	add	r3, pc, #468	; (adr r3, 8006400 <__ieee754_pow+0x6f8>)
 800622a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622e:	f7f9 ff9d 	bl	800016c <__adddf3>
 8006232:	4622      	mov	r2, r4
 8006234:	462b      	mov	r3, r5
 8006236:	f7fa f94f 	bl	80004d8 <__aeabi_dmul>
 800623a:	a373      	add	r3, pc, #460	; (adr r3, 8006408 <__ieee754_pow+0x700>)
 800623c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006240:	f7f9 ff94 	bl	800016c <__adddf3>
 8006244:	4622      	mov	r2, r4
 8006246:	462b      	mov	r3, r5
 8006248:	f7fa f946 	bl	80004d8 <__aeabi_dmul>
 800624c:	a370      	add	r3, pc, #448	; (adr r3, 8006410 <__ieee754_pow+0x708>)
 800624e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006252:	f7f9 ff8b 	bl	800016c <__adddf3>
 8006256:	4622      	mov	r2, r4
 8006258:	462b      	mov	r3, r5
 800625a:	f7fa f93d 	bl	80004d8 <__aeabi_dmul>
 800625e:	a36e      	add	r3, pc, #440	; (adr r3, 8006418 <__ieee754_pow+0x710>)
 8006260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006264:	f7f9 ff82 	bl	800016c <__adddf3>
 8006268:	4622      	mov	r2, r4
 800626a:	4606      	mov	r6, r0
 800626c:	460f      	mov	r7, r1
 800626e:	462b      	mov	r3, r5
 8006270:	4620      	mov	r0, r4
 8006272:	4629      	mov	r1, r5
 8006274:	f7fa f930 	bl	80004d8 <__aeabi_dmul>
 8006278:	4602      	mov	r2, r0
 800627a:	460b      	mov	r3, r1
 800627c:	4630      	mov	r0, r6
 800627e:	4639      	mov	r1, r7
 8006280:	f7fa f92a 	bl	80004d8 <__aeabi_dmul>
 8006284:	4604      	mov	r4, r0
 8006286:	460d      	mov	r5, r1
 8006288:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800628c:	4642      	mov	r2, r8
 800628e:	464b      	mov	r3, r9
 8006290:	f7f9 ff6c 	bl	800016c <__adddf3>
 8006294:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006298:	f7fa f91e 	bl	80004d8 <__aeabi_dmul>
 800629c:	4622      	mov	r2, r4
 800629e:	462b      	mov	r3, r5
 80062a0:	f7f9 ff64 	bl	800016c <__adddf3>
 80062a4:	4642      	mov	r2, r8
 80062a6:	4606      	mov	r6, r0
 80062a8:	460f      	mov	r7, r1
 80062aa:	464b      	mov	r3, r9
 80062ac:	4640      	mov	r0, r8
 80062ae:	4649      	mov	r1, r9
 80062b0:	f7fa f912 	bl	80004d8 <__aeabi_dmul>
 80062b4:	2200      	movs	r2, #0
 80062b6:	4b66      	ldr	r3, [pc, #408]	; (8006450 <__ieee754_pow+0x748>)
 80062b8:	4682      	mov	sl, r0
 80062ba:	468b      	mov	fp, r1
 80062bc:	f7f9 ff56 	bl	800016c <__adddf3>
 80062c0:	4632      	mov	r2, r6
 80062c2:	463b      	mov	r3, r7
 80062c4:	f7f9 ff52 	bl	800016c <__adddf3>
 80062c8:	2400      	movs	r4, #0
 80062ca:	460d      	mov	r5, r1
 80062cc:	4622      	mov	r2, r4
 80062ce:	460b      	mov	r3, r1
 80062d0:	4640      	mov	r0, r8
 80062d2:	4649      	mov	r1, r9
 80062d4:	f7fa f900 	bl	80004d8 <__aeabi_dmul>
 80062d8:	2200      	movs	r2, #0
 80062da:	4680      	mov	r8, r0
 80062dc:	4689      	mov	r9, r1
 80062de:	4620      	mov	r0, r4
 80062e0:	4629      	mov	r1, r5
 80062e2:	4b5b      	ldr	r3, [pc, #364]	; (8006450 <__ieee754_pow+0x748>)
 80062e4:	f7f9 ff40 	bl	8000168 <__aeabi_dsub>
 80062e8:	4652      	mov	r2, sl
 80062ea:	465b      	mov	r3, fp
 80062ec:	f7f9 ff3c 	bl	8000168 <__aeabi_dsub>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	4630      	mov	r0, r6
 80062f6:	4639      	mov	r1, r7
 80062f8:	f7f9 ff36 	bl	8000168 <__aeabi_dsub>
 80062fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006300:	f7fa f8ea 	bl	80004d8 <__aeabi_dmul>
 8006304:	4622      	mov	r2, r4
 8006306:	4606      	mov	r6, r0
 8006308:	460f      	mov	r7, r1
 800630a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800630e:	462b      	mov	r3, r5
 8006310:	f7fa f8e2 	bl	80004d8 <__aeabi_dmul>
 8006314:	4602      	mov	r2, r0
 8006316:	460b      	mov	r3, r1
 8006318:	4630      	mov	r0, r6
 800631a:	4639      	mov	r1, r7
 800631c:	f7f9 ff26 	bl	800016c <__adddf3>
 8006320:	2400      	movs	r4, #0
 8006322:	4606      	mov	r6, r0
 8006324:	460f      	mov	r7, r1
 8006326:	4602      	mov	r2, r0
 8006328:	460b      	mov	r3, r1
 800632a:	4640      	mov	r0, r8
 800632c:	4649      	mov	r1, r9
 800632e:	f7f9 ff1d 	bl	800016c <__adddf3>
 8006332:	a33b      	add	r3, pc, #236	; (adr r3, 8006420 <__ieee754_pow+0x718>)
 8006334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006338:	4620      	mov	r0, r4
 800633a:	460d      	mov	r5, r1
 800633c:	f7fa f8cc 	bl	80004d8 <__aeabi_dmul>
 8006340:	4642      	mov	r2, r8
 8006342:	464b      	mov	r3, r9
 8006344:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006348:	4620      	mov	r0, r4
 800634a:	4629      	mov	r1, r5
 800634c:	f7f9 ff0c 	bl	8000168 <__aeabi_dsub>
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	4630      	mov	r0, r6
 8006356:	4639      	mov	r1, r7
 8006358:	f7f9 ff06 	bl	8000168 <__aeabi_dsub>
 800635c:	a332      	add	r3, pc, #200	; (adr r3, 8006428 <__ieee754_pow+0x720>)
 800635e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006362:	f7fa f8b9 	bl	80004d8 <__aeabi_dmul>
 8006366:	a332      	add	r3, pc, #200	; (adr r3, 8006430 <__ieee754_pow+0x728>)
 8006368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636c:	4606      	mov	r6, r0
 800636e:	460f      	mov	r7, r1
 8006370:	4620      	mov	r0, r4
 8006372:	4629      	mov	r1, r5
 8006374:	f7fa f8b0 	bl	80004d8 <__aeabi_dmul>
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	4630      	mov	r0, r6
 800637e:	4639      	mov	r1, r7
 8006380:	f7f9 fef4 	bl	800016c <__adddf3>
 8006384:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006386:	4b33      	ldr	r3, [pc, #204]	; (8006454 <__ieee754_pow+0x74c>)
 8006388:	f04f 0a00 	mov.w	sl, #0
 800638c:	4413      	add	r3, r2
 800638e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006392:	f7f9 feeb 	bl	800016c <__adddf3>
 8006396:	4680      	mov	r8, r0
 8006398:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800639a:	4689      	mov	r9, r1
 800639c:	f7fa f832 	bl	8000404 <__aeabi_i2d>
 80063a0:	4604      	mov	r4, r0
 80063a2:	460d      	mov	r5, r1
 80063a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80063a6:	4b2c      	ldr	r3, [pc, #176]	; (8006458 <__ieee754_pow+0x750>)
 80063a8:	4413      	add	r3, r2
 80063aa:	e9d3 6700 	ldrd	r6, r7, [r3]
 80063ae:	4642      	mov	r2, r8
 80063b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063b4:	464b      	mov	r3, r9
 80063b6:	f7f9 fed9 	bl	800016c <__adddf3>
 80063ba:	4632      	mov	r2, r6
 80063bc:	463b      	mov	r3, r7
 80063be:	f7f9 fed5 	bl	800016c <__adddf3>
 80063c2:	4622      	mov	r2, r4
 80063c4:	462b      	mov	r3, r5
 80063c6:	f7f9 fed1 	bl	800016c <__adddf3>
 80063ca:	4622      	mov	r2, r4
 80063cc:	462b      	mov	r3, r5
 80063ce:	4650      	mov	r0, sl
 80063d0:	468b      	mov	fp, r1
 80063d2:	f7f9 fec9 	bl	8000168 <__aeabi_dsub>
 80063d6:	4632      	mov	r2, r6
 80063d8:	463b      	mov	r3, r7
 80063da:	f7f9 fec5 	bl	8000168 <__aeabi_dsub>
 80063de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063e2:	f7f9 fec1 	bl	8000168 <__aeabi_dsub>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	4640      	mov	r0, r8
 80063ec:	4649      	mov	r1, r9
 80063ee:	e60d      	b.n	800600c <__ieee754_pow+0x304>
 80063f0:	4a454eef 	.word	0x4a454eef
 80063f4:	3fca7e28 	.word	0x3fca7e28
 80063f8:	93c9db65 	.word	0x93c9db65
 80063fc:	3fcd864a 	.word	0x3fcd864a
 8006400:	a91d4101 	.word	0xa91d4101
 8006404:	3fd17460 	.word	0x3fd17460
 8006408:	518f264d 	.word	0x518f264d
 800640c:	3fd55555 	.word	0x3fd55555
 8006410:	db6fabff 	.word	0xdb6fabff
 8006414:	3fdb6db6 	.word	0x3fdb6db6
 8006418:	33333303 	.word	0x33333303
 800641c:	3fe33333 	.word	0x3fe33333
 8006420:	e0000000 	.word	0xe0000000
 8006424:	3feec709 	.word	0x3feec709
 8006428:	dc3a03fd 	.word	0xdc3a03fd
 800642c:	3feec709 	.word	0x3feec709
 8006430:	145b01f5 	.word	0x145b01f5
 8006434:	be3e2fe0 	.word	0xbe3e2fe0
 8006438:	7ff00000 	.word	0x7ff00000
 800643c:	43400000 	.word	0x43400000
 8006440:	0003988e 	.word	0x0003988e
 8006444:	000bb679 	.word	0x000bb679
 8006448:	08006ba0 	.word	0x08006ba0
 800644c:	3ff00000 	.word	0x3ff00000
 8006450:	40080000 	.word	0x40080000
 8006454:	08006bc0 	.word	0x08006bc0
 8006458:	08006bb0 	.word	0x08006bb0
 800645c:	2601      	movs	r6, #1
 800645e:	e66a      	b.n	8006136 <__ieee754_pow+0x42e>
 8006460:	a39d      	add	r3, pc, #628	; (adr r3, 80066d8 <__ieee754_pow+0x9d0>)
 8006462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006466:	4640      	mov	r0, r8
 8006468:	4649      	mov	r1, r9
 800646a:	f7f9 fe7f 	bl	800016c <__adddf3>
 800646e:	4622      	mov	r2, r4
 8006470:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006474:	462b      	mov	r3, r5
 8006476:	4650      	mov	r0, sl
 8006478:	4639      	mov	r1, r7
 800647a:	f7f9 fe75 	bl	8000168 <__aeabi_dsub>
 800647e:	4602      	mov	r2, r0
 8006480:	460b      	mov	r3, r1
 8006482:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006486:	f7fa fab7 	bl	80009f8 <__aeabi_dcmpgt>
 800648a:	2800      	cmp	r0, #0
 800648c:	f47f ae09 	bne.w	80060a2 <__ieee754_pow+0x39a>
 8006490:	4aa3      	ldr	r2, [pc, #652]	; (8006720 <__ieee754_pow+0xa18>)
 8006492:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8006496:	4293      	cmp	r3, r2
 8006498:	f340 8101 	ble.w	800669e <__ieee754_pow+0x996>
 800649c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80064a0:	2000      	movs	r0, #0
 80064a2:	151b      	asrs	r3, r3, #20
 80064a4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80064a8:	fa4a f303 	asr.w	r3, sl, r3
 80064ac:	4433      	add	r3, r6
 80064ae:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80064b2:	4f9c      	ldr	r7, [pc, #624]	; (8006724 <__ieee754_pow+0xa1c>)
 80064b4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80064b8:	4117      	asrs	r7, r2
 80064ba:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80064be:	ea23 0107 	bic.w	r1, r3, r7
 80064c2:	f1c2 0214 	rsb	r2, r2, #20
 80064c6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80064ca:	460b      	mov	r3, r1
 80064cc:	fa4a fa02 	asr.w	sl, sl, r2
 80064d0:	2e00      	cmp	r6, #0
 80064d2:	4602      	mov	r2, r0
 80064d4:	4629      	mov	r1, r5
 80064d6:	4620      	mov	r0, r4
 80064d8:	bfb8      	it	lt
 80064da:	f1ca 0a00 	rsblt	sl, sl, #0
 80064de:	f7f9 fe43 	bl	8000168 <__aeabi_dsub>
 80064e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064ea:	2400      	movs	r4, #0
 80064ec:	4642      	mov	r2, r8
 80064ee:	464b      	mov	r3, r9
 80064f0:	f7f9 fe3c 	bl	800016c <__adddf3>
 80064f4:	a37a      	add	r3, pc, #488	; (adr r3, 80066e0 <__ieee754_pow+0x9d8>)
 80064f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fa:	4620      	mov	r0, r4
 80064fc:	460d      	mov	r5, r1
 80064fe:	f7f9 ffeb 	bl	80004d8 <__aeabi_dmul>
 8006502:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006506:	4606      	mov	r6, r0
 8006508:	460f      	mov	r7, r1
 800650a:	4620      	mov	r0, r4
 800650c:	4629      	mov	r1, r5
 800650e:	f7f9 fe2b 	bl	8000168 <__aeabi_dsub>
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	4640      	mov	r0, r8
 8006518:	4649      	mov	r1, r9
 800651a:	f7f9 fe25 	bl	8000168 <__aeabi_dsub>
 800651e:	a372      	add	r3, pc, #456	; (adr r3, 80066e8 <__ieee754_pow+0x9e0>)
 8006520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006524:	f7f9 ffd8 	bl	80004d8 <__aeabi_dmul>
 8006528:	a371      	add	r3, pc, #452	; (adr r3, 80066f0 <__ieee754_pow+0x9e8>)
 800652a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652e:	4680      	mov	r8, r0
 8006530:	4689      	mov	r9, r1
 8006532:	4620      	mov	r0, r4
 8006534:	4629      	mov	r1, r5
 8006536:	f7f9 ffcf 	bl	80004d8 <__aeabi_dmul>
 800653a:	4602      	mov	r2, r0
 800653c:	460b      	mov	r3, r1
 800653e:	4640      	mov	r0, r8
 8006540:	4649      	mov	r1, r9
 8006542:	f7f9 fe13 	bl	800016c <__adddf3>
 8006546:	4604      	mov	r4, r0
 8006548:	460d      	mov	r5, r1
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	4630      	mov	r0, r6
 8006550:	4639      	mov	r1, r7
 8006552:	f7f9 fe0b 	bl	800016c <__adddf3>
 8006556:	4632      	mov	r2, r6
 8006558:	463b      	mov	r3, r7
 800655a:	4680      	mov	r8, r0
 800655c:	4689      	mov	r9, r1
 800655e:	f7f9 fe03 	bl	8000168 <__aeabi_dsub>
 8006562:	4602      	mov	r2, r0
 8006564:	460b      	mov	r3, r1
 8006566:	4620      	mov	r0, r4
 8006568:	4629      	mov	r1, r5
 800656a:	f7f9 fdfd 	bl	8000168 <__aeabi_dsub>
 800656e:	4642      	mov	r2, r8
 8006570:	4606      	mov	r6, r0
 8006572:	460f      	mov	r7, r1
 8006574:	464b      	mov	r3, r9
 8006576:	4640      	mov	r0, r8
 8006578:	4649      	mov	r1, r9
 800657a:	f7f9 ffad 	bl	80004d8 <__aeabi_dmul>
 800657e:	a35e      	add	r3, pc, #376	; (adr r3, 80066f8 <__ieee754_pow+0x9f0>)
 8006580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006584:	4604      	mov	r4, r0
 8006586:	460d      	mov	r5, r1
 8006588:	f7f9 ffa6 	bl	80004d8 <__aeabi_dmul>
 800658c:	a35c      	add	r3, pc, #368	; (adr r3, 8006700 <__ieee754_pow+0x9f8>)
 800658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006592:	f7f9 fde9 	bl	8000168 <__aeabi_dsub>
 8006596:	4622      	mov	r2, r4
 8006598:	462b      	mov	r3, r5
 800659a:	f7f9 ff9d 	bl	80004d8 <__aeabi_dmul>
 800659e:	a35a      	add	r3, pc, #360	; (adr r3, 8006708 <__ieee754_pow+0xa00>)
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	f7f9 fde2 	bl	800016c <__adddf3>
 80065a8:	4622      	mov	r2, r4
 80065aa:	462b      	mov	r3, r5
 80065ac:	f7f9 ff94 	bl	80004d8 <__aeabi_dmul>
 80065b0:	a357      	add	r3, pc, #348	; (adr r3, 8006710 <__ieee754_pow+0xa08>)
 80065b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b6:	f7f9 fdd7 	bl	8000168 <__aeabi_dsub>
 80065ba:	4622      	mov	r2, r4
 80065bc:	462b      	mov	r3, r5
 80065be:	f7f9 ff8b 	bl	80004d8 <__aeabi_dmul>
 80065c2:	a355      	add	r3, pc, #340	; (adr r3, 8006718 <__ieee754_pow+0xa10>)
 80065c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c8:	f7f9 fdd0 	bl	800016c <__adddf3>
 80065cc:	4622      	mov	r2, r4
 80065ce:	462b      	mov	r3, r5
 80065d0:	f7f9 ff82 	bl	80004d8 <__aeabi_dmul>
 80065d4:	4602      	mov	r2, r0
 80065d6:	460b      	mov	r3, r1
 80065d8:	4640      	mov	r0, r8
 80065da:	4649      	mov	r1, r9
 80065dc:	f7f9 fdc4 	bl	8000168 <__aeabi_dsub>
 80065e0:	4604      	mov	r4, r0
 80065e2:	460d      	mov	r5, r1
 80065e4:	4602      	mov	r2, r0
 80065e6:	460b      	mov	r3, r1
 80065e8:	4640      	mov	r0, r8
 80065ea:	4649      	mov	r1, r9
 80065ec:	f7f9 ff74 	bl	80004d8 <__aeabi_dmul>
 80065f0:	2200      	movs	r2, #0
 80065f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80065fa:	4620      	mov	r0, r4
 80065fc:	4629      	mov	r1, r5
 80065fe:	f7f9 fdb3 	bl	8000168 <__aeabi_dsub>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800660a:	f7fa f88f 	bl	800072c <__aeabi_ddiv>
 800660e:	4632      	mov	r2, r6
 8006610:	4604      	mov	r4, r0
 8006612:	460d      	mov	r5, r1
 8006614:	463b      	mov	r3, r7
 8006616:	4640      	mov	r0, r8
 8006618:	4649      	mov	r1, r9
 800661a:	f7f9 ff5d 	bl	80004d8 <__aeabi_dmul>
 800661e:	4632      	mov	r2, r6
 8006620:	463b      	mov	r3, r7
 8006622:	f7f9 fda3 	bl	800016c <__adddf3>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	4620      	mov	r0, r4
 800662c:	4629      	mov	r1, r5
 800662e:	f7f9 fd9b 	bl	8000168 <__aeabi_dsub>
 8006632:	4642      	mov	r2, r8
 8006634:	464b      	mov	r3, r9
 8006636:	f7f9 fd97 	bl	8000168 <__aeabi_dsub>
 800663a:	4602      	mov	r2, r0
 800663c:	460b      	mov	r3, r1
 800663e:	2000      	movs	r0, #0
 8006640:	4939      	ldr	r1, [pc, #228]	; (8006728 <__ieee754_pow+0xa20>)
 8006642:	f7f9 fd91 	bl	8000168 <__aeabi_dsub>
 8006646:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800664a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800664e:	da29      	bge.n	80066a4 <__ieee754_pow+0x99c>
 8006650:	4652      	mov	r2, sl
 8006652:	f000 f955 	bl	8006900 <scalbn>
 8006656:	e9dd 2300 	ldrd	r2, r3, [sp]
 800665a:	f7ff bbfe 	b.w	8005e5a <__ieee754_pow+0x152>
 800665e:	4b33      	ldr	r3, [pc, #204]	; (800672c <__ieee754_pow+0xa24>)
 8006660:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006664:	429f      	cmp	r7, r3
 8006666:	f77f af13 	ble.w	8006490 <__ieee754_pow+0x788>
 800666a:	4b31      	ldr	r3, [pc, #196]	; (8006730 <__ieee754_pow+0xa28>)
 800666c:	440b      	add	r3, r1
 800666e:	4303      	orrs	r3, r0
 8006670:	d009      	beq.n	8006686 <__ieee754_pow+0x97e>
 8006672:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006676:	2200      	movs	r2, #0
 8006678:	2300      	movs	r3, #0
 800667a:	f7fa f99f 	bl	80009bc <__aeabi_dcmplt>
 800667e:	3800      	subs	r0, #0
 8006680:	bf18      	it	ne
 8006682:	2001      	movne	r0, #1
 8006684:	e453      	b.n	8005f2e <__ieee754_pow+0x226>
 8006686:	4622      	mov	r2, r4
 8006688:	462b      	mov	r3, r5
 800668a:	f7f9 fd6d 	bl	8000168 <__aeabi_dsub>
 800668e:	4642      	mov	r2, r8
 8006690:	464b      	mov	r3, r9
 8006692:	f7fa f9a7 	bl	80009e4 <__aeabi_dcmpge>
 8006696:	2800      	cmp	r0, #0
 8006698:	f43f aefa 	beq.w	8006490 <__ieee754_pow+0x788>
 800669c:	e7e9      	b.n	8006672 <__ieee754_pow+0x96a>
 800669e:	f04f 0a00 	mov.w	sl, #0
 80066a2:	e720      	b.n	80064e6 <__ieee754_pow+0x7de>
 80066a4:	4621      	mov	r1, r4
 80066a6:	e7d6      	b.n	8006656 <__ieee754_pow+0x94e>
 80066a8:	f04f 0b00 	mov.w	fp, #0
 80066ac:	f8df c078 	ldr.w	ip, [pc, #120]	; 8006728 <__ieee754_pow+0xa20>
 80066b0:	f7ff bbba 	b.w	8005e28 <__ieee754_pow+0x120>
 80066b4:	f04f 0b00 	mov.w	fp, #0
 80066b8:	f04f 0c00 	mov.w	ip, #0
 80066bc:	f7ff bbb4 	b.w	8005e28 <__ieee754_pow+0x120>
 80066c0:	4640      	mov	r0, r8
 80066c2:	4649      	mov	r1, r9
 80066c4:	f7ff bb3d 	b.w	8005d42 <__ieee754_pow+0x3a>
 80066c8:	9200      	str	r2, [sp, #0]
 80066ca:	f7ff bb89 	b.w	8005de0 <__ieee754_pow+0xd8>
 80066ce:	2300      	movs	r3, #0
 80066d0:	f7ff bb73 	b.w	8005dba <__ieee754_pow+0xb2>
 80066d4:	f3af 8000 	nop.w
 80066d8:	652b82fe 	.word	0x652b82fe
 80066dc:	3c971547 	.word	0x3c971547
 80066e0:	00000000 	.word	0x00000000
 80066e4:	3fe62e43 	.word	0x3fe62e43
 80066e8:	fefa39ef 	.word	0xfefa39ef
 80066ec:	3fe62e42 	.word	0x3fe62e42
 80066f0:	0ca86c39 	.word	0x0ca86c39
 80066f4:	be205c61 	.word	0xbe205c61
 80066f8:	72bea4d0 	.word	0x72bea4d0
 80066fc:	3e663769 	.word	0x3e663769
 8006700:	c5d26bf1 	.word	0xc5d26bf1
 8006704:	3ebbbd41 	.word	0x3ebbbd41
 8006708:	af25de2c 	.word	0xaf25de2c
 800670c:	3f11566a 	.word	0x3f11566a
 8006710:	16bebd93 	.word	0x16bebd93
 8006714:	3f66c16c 	.word	0x3f66c16c
 8006718:	5555553e 	.word	0x5555553e
 800671c:	3fc55555 	.word	0x3fc55555
 8006720:	3fe00000 	.word	0x3fe00000
 8006724:	000fffff 	.word	0x000fffff
 8006728:	3ff00000 	.word	0x3ff00000
 800672c:	4090cbff 	.word	0x4090cbff
 8006730:	3f6f3400 	.word	0x3f6f3400

08006734 <__ieee754_sqrt>:
 8006734:	f8df c158 	ldr.w	ip, [pc, #344]	; 8006890 <__ieee754_sqrt+0x15c>
 8006738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800673c:	ea3c 0c01 	bics.w	ip, ip, r1
 8006740:	4606      	mov	r6, r0
 8006742:	460d      	mov	r5, r1
 8006744:	460c      	mov	r4, r1
 8006746:	460a      	mov	r2, r1
 8006748:	4607      	mov	r7, r0
 800674a:	4603      	mov	r3, r0
 800674c:	d10f      	bne.n	800676e <__ieee754_sqrt+0x3a>
 800674e:	4602      	mov	r2, r0
 8006750:	460b      	mov	r3, r1
 8006752:	f7f9 fec1 	bl	80004d8 <__aeabi_dmul>
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	4630      	mov	r0, r6
 800675c:	4629      	mov	r1, r5
 800675e:	f7f9 fd05 	bl	800016c <__adddf3>
 8006762:	4606      	mov	r6, r0
 8006764:	460d      	mov	r5, r1
 8006766:	4630      	mov	r0, r6
 8006768:	4629      	mov	r1, r5
 800676a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800676e:	2900      	cmp	r1, #0
 8006770:	dc0e      	bgt.n	8006790 <__ieee754_sqrt+0x5c>
 8006772:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006776:	ea5c 0707 	orrs.w	r7, ip, r7
 800677a:	d0f4      	beq.n	8006766 <__ieee754_sqrt+0x32>
 800677c:	b141      	cbz	r1, 8006790 <__ieee754_sqrt+0x5c>
 800677e:	4602      	mov	r2, r0
 8006780:	460b      	mov	r3, r1
 8006782:	f7f9 fcf1 	bl	8000168 <__aeabi_dsub>
 8006786:	4602      	mov	r2, r0
 8006788:	460b      	mov	r3, r1
 800678a:	f7f9 ffcf 	bl	800072c <__aeabi_ddiv>
 800678e:	e7e8      	b.n	8006762 <__ieee754_sqrt+0x2e>
 8006790:	1521      	asrs	r1, r4, #20
 8006792:	d075      	beq.n	8006880 <__ieee754_sqrt+0x14c>
 8006794:	07cc      	lsls	r4, r1, #31
 8006796:	f04f 0400 	mov.w	r4, #0
 800679a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800679e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80067a2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80067a6:	bf5e      	ittt	pl
 80067a8:	0fd9      	lsrpl	r1, r3, #31
 80067aa:	005b      	lslpl	r3, r3, #1
 80067ac:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80067b0:	0fd9      	lsrs	r1, r3, #31
 80067b2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80067b6:	2516      	movs	r5, #22
 80067b8:	4620      	mov	r0, r4
 80067ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067be:	107f      	asrs	r7, r7, #1
 80067c0:	005b      	lsls	r3, r3, #1
 80067c2:	1846      	adds	r6, r0, r1
 80067c4:	4296      	cmp	r6, r2
 80067c6:	bfde      	ittt	le
 80067c8:	1b92      	suble	r2, r2, r6
 80067ca:	1870      	addle	r0, r6, r1
 80067cc:	1864      	addle	r4, r4, r1
 80067ce:	0052      	lsls	r2, r2, #1
 80067d0:	3d01      	subs	r5, #1
 80067d2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80067d6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80067da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80067de:	d1f0      	bne.n	80067c2 <__ieee754_sqrt+0x8e>
 80067e0:	4629      	mov	r1, r5
 80067e2:	f04f 0e20 	mov.w	lr, #32
 80067e6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80067ea:	4282      	cmp	r2, r0
 80067ec:	eb06 0c05 	add.w	ip, r6, r5
 80067f0:	dc02      	bgt.n	80067f8 <__ieee754_sqrt+0xc4>
 80067f2:	d113      	bne.n	800681c <__ieee754_sqrt+0xe8>
 80067f4:	459c      	cmp	ip, r3
 80067f6:	d811      	bhi.n	800681c <__ieee754_sqrt+0xe8>
 80067f8:	f1bc 0f00 	cmp.w	ip, #0
 80067fc:	eb0c 0506 	add.w	r5, ip, r6
 8006800:	da43      	bge.n	800688a <__ieee754_sqrt+0x156>
 8006802:	2d00      	cmp	r5, #0
 8006804:	db41      	blt.n	800688a <__ieee754_sqrt+0x156>
 8006806:	f100 0801 	add.w	r8, r0, #1
 800680a:	1a12      	subs	r2, r2, r0
 800680c:	4640      	mov	r0, r8
 800680e:	459c      	cmp	ip, r3
 8006810:	bf88      	it	hi
 8006812:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006816:	eba3 030c 	sub.w	r3, r3, ip
 800681a:	4431      	add	r1, r6
 800681c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006820:	f1be 0e01 	subs.w	lr, lr, #1
 8006824:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8006828:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800682c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006830:	d1db      	bne.n	80067ea <__ieee754_sqrt+0xb6>
 8006832:	4313      	orrs	r3, r2
 8006834:	d006      	beq.n	8006844 <__ieee754_sqrt+0x110>
 8006836:	1c48      	adds	r0, r1, #1
 8006838:	bf0b      	itete	eq
 800683a:	4671      	moveq	r1, lr
 800683c:	3101      	addne	r1, #1
 800683e:	3401      	addeq	r4, #1
 8006840:	f021 0101 	bicne.w	r1, r1, #1
 8006844:	1063      	asrs	r3, r4, #1
 8006846:	0849      	lsrs	r1, r1, #1
 8006848:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800684c:	07e2      	lsls	r2, r4, #31
 800684e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006852:	bf48      	it	mi
 8006854:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8006858:	460e      	mov	r6, r1
 800685a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800685e:	e782      	b.n	8006766 <__ieee754_sqrt+0x32>
 8006860:	0ada      	lsrs	r2, r3, #11
 8006862:	3815      	subs	r0, #21
 8006864:	055b      	lsls	r3, r3, #21
 8006866:	2a00      	cmp	r2, #0
 8006868:	d0fa      	beq.n	8006860 <__ieee754_sqrt+0x12c>
 800686a:	02d5      	lsls	r5, r2, #11
 800686c:	d50a      	bpl.n	8006884 <__ieee754_sqrt+0x150>
 800686e:	f1c1 0420 	rsb	r4, r1, #32
 8006872:	fa23 f404 	lsr.w	r4, r3, r4
 8006876:	1e4d      	subs	r5, r1, #1
 8006878:	408b      	lsls	r3, r1
 800687a:	4322      	orrs	r2, r4
 800687c:	1b41      	subs	r1, r0, r5
 800687e:	e789      	b.n	8006794 <__ieee754_sqrt+0x60>
 8006880:	4608      	mov	r0, r1
 8006882:	e7f0      	b.n	8006866 <__ieee754_sqrt+0x132>
 8006884:	0052      	lsls	r2, r2, #1
 8006886:	3101      	adds	r1, #1
 8006888:	e7ef      	b.n	800686a <__ieee754_sqrt+0x136>
 800688a:	4680      	mov	r8, r0
 800688c:	e7bd      	b.n	800680a <__ieee754_sqrt+0xd6>
 800688e:	bf00      	nop
 8006890:	7ff00000 	.word	0x7ff00000

08006894 <with_errno>:
 8006894:	b570      	push	{r4, r5, r6, lr}
 8006896:	4604      	mov	r4, r0
 8006898:	460d      	mov	r5, r1
 800689a:	4616      	mov	r6, r2
 800689c:	f7fe fd20 	bl	80052e0 <__errno>
 80068a0:	4629      	mov	r1, r5
 80068a2:	6006      	str	r6, [r0, #0]
 80068a4:	4620      	mov	r0, r4
 80068a6:	bd70      	pop	{r4, r5, r6, pc}

080068a8 <xflow>:
 80068a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068aa:	4615      	mov	r5, r2
 80068ac:	461c      	mov	r4, r3
 80068ae:	b180      	cbz	r0, 80068d2 <xflow+0x2a>
 80068b0:	4610      	mov	r0, r2
 80068b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80068b6:	e9cd 0100 	strd	r0, r1, [sp]
 80068ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068be:	4628      	mov	r0, r5
 80068c0:	4621      	mov	r1, r4
 80068c2:	f7f9 fe09 	bl	80004d8 <__aeabi_dmul>
 80068c6:	2222      	movs	r2, #34	; 0x22
 80068c8:	b003      	add	sp, #12
 80068ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068ce:	f7ff bfe1 	b.w	8006894 <with_errno>
 80068d2:	4610      	mov	r0, r2
 80068d4:	4619      	mov	r1, r3
 80068d6:	e7ee      	b.n	80068b6 <xflow+0xe>

080068d8 <__math_uflow>:
 80068d8:	2200      	movs	r2, #0
 80068da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80068de:	f7ff bfe3 	b.w	80068a8 <xflow>

080068e2 <__math_oflow>:
 80068e2:	2200      	movs	r2, #0
 80068e4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80068e8:	f7ff bfde 	b.w	80068a8 <xflow>

080068ec <fabs>:
 80068ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80068f0:	4770      	bx	lr

080068f2 <finite>:
 80068f2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80068f6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80068fa:	0fc0      	lsrs	r0, r0, #31
 80068fc:	4770      	bx	lr
	...

08006900 <scalbn>:
 8006900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006902:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8006906:	4604      	mov	r4, r0
 8006908:	460d      	mov	r5, r1
 800690a:	4617      	mov	r7, r2
 800690c:	460b      	mov	r3, r1
 800690e:	b996      	cbnz	r6, 8006936 <scalbn+0x36>
 8006910:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006914:	4303      	orrs	r3, r0
 8006916:	d039      	beq.n	800698c <scalbn+0x8c>
 8006918:	4b33      	ldr	r3, [pc, #204]	; (80069e8 <scalbn+0xe8>)
 800691a:	2200      	movs	r2, #0
 800691c:	f7f9 fddc 	bl	80004d8 <__aeabi_dmul>
 8006920:	4b32      	ldr	r3, [pc, #200]	; (80069ec <scalbn+0xec>)
 8006922:	4604      	mov	r4, r0
 8006924:	429f      	cmp	r7, r3
 8006926:	460d      	mov	r5, r1
 8006928:	da0f      	bge.n	800694a <scalbn+0x4a>
 800692a:	a32b      	add	r3, pc, #172	; (adr r3, 80069d8 <scalbn+0xd8>)
 800692c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006930:	f7f9 fdd2 	bl	80004d8 <__aeabi_dmul>
 8006934:	e006      	b.n	8006944 <scalbn+0x44>
 8006936:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800693a:	4296      	cmp	r6, r2
 800693c:	d10a      	bne.n	8006954 <scalbn+0x54>
 800693e:	4602      	mov	r2, r0
 8006940:	f7f9 fc14 	bl	800016c <__adddf3>
 8006944:	4604      	mov	r4, r0
 8006946:	460d      	mov	r5, r1
 8006948:	e020      	b.n	800698c <scalbn+0x8c>
 800694a:	460b      	mov	r3, r1
 800694c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006950:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8006954:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006958:	19b9      	adds	r1, r7, r6
 800695a:	4291      	cmp	r1, r2
 800695c:	dd0e      	ble.n	800697c <scalbn+0x7c>
 800695e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006962:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8006966:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800696a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800696e:	4820      	ldr	r0, [pc, #128]	; (80069f0 <scalbn+0xf0>)
 8006970:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8006974:	a31a      	add	r3, pc, #104	; (adr r3, 80069e0 <scalbn+0xe0>)
 8006976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697a:	e7d9      	b.n	8006930 <scalbn+0x30>
 800697c:	2900      	cmp	r1, #0
 800697e:	dd08      	ble.n	8006992 <scalbn+0x92>
 8006980:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006984:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006988:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800698c:	4620      	mov	r0, r4
 800698e:	4629      	mov	r1, r5
 8006990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006992:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8006996:	da12      	bge.n	80069be <scalbn+0xbe>
 8006998:	f24c 3350 	movw	r3, #50000	; 0xc350
 800699c:	429f      	cmp	r7, r3
 800699e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80069a2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 80069a6:	dcdc      	bgt.n	8006962 <scalbn+0x62>
 80069a8:	a30b      	add	r3, pc, #44	; (adr r3, 80069d8 <scalbn+0xd8>)
 80069aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ae:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80069b2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80069b6:	480f      	ldr	r0, [pc, #60]	; (80069f4 <scalbn+0xf4>)
 80069b8:	f041 011f 	orr.w	r1, r1, #31
 80069bc:	e7b8      	b.n	8006930 <scalbn+0x30>
 80069be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80069c2:	3136      	adds	r1, #54	; 0x36
 80069c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80069c8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80069cc:	4620      	mov	r0, r4
 80069ce:	4629      	mov	r1, r5
 80069d0:	2200      	movs	r2, #0
 80069d2:	4b09      	ldr	r3, [pc, #36]	; (80069f8 <scalbn+0xf8>)
 80069d4:	e7ac      	b.n	8006930 <scalbn+0x30>
 80069d6:	bf00      	nop
 80069d8:	c2f8f359 	.word	0xc2f8f359
 80069dc:	01a56e1f 	.word	0x01a56e1f
 80069e0:	8800759c 	.word	0x8800759c
 80069e4:	7e37e43c 	.word	0x7e37e43c
 80069e8:	43500000 	.word	0x43500000
 80069ec:	ffff3cb0 	.word	0xffff3cb0
 80069f0:	8800759c 	.word	0x8800759c
 80069f4:	c2f8f359 	.word	0xc2f8f359
 80069f8:	3c900000 	.word	0x3c900000

080069fc <_init>:
 80069fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069fe:	bf00      	nop
 8006a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a02:	bc08      	pop	{r3}
 8006a04:	469e      	mov	lr, r3
 8006a06:	4770      	bx	lr

08006a08 <_fini>:
 8006a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0a:	bf00      	nop
 8006a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a0e:	bc08      	pop	{r3}
 8006a10:	469e      	mov	lr, r3
 8006a12:	4770      	bx	lr
