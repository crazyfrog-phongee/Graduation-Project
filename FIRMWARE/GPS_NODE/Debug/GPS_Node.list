
GPS_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065a4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  080066b8  080066b8  000166b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067e8  080067e8  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080067e8  080067e8  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067e8  080067e8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067e8  080067e8  000167e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067ec  080067ec  000167ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080067f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000115c  20000080  08006870  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011dc  08006870  000211dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d69  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003604  00000000  00000000  00033e12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  00037418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001108  00000000  00000000  000386a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b4f6  00000000  00000000  000397b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000167df  00000000  00000000  00054ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009885d  00000000  00000000  0006b485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103ce2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005414  00000000  00000000  00103d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	0800669c 	.word	0x0800669c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	0800669c 	.word	0x0800669c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d94:	4b20      	ldr	r3, [pc, #128]	; (8000e18 <MX_ADC1_Init+0x94>)
 8000d96:	4a21      	ldr	r2, [pc, #132]	; (8000e1c <MX_ADC1_Init+0x98>)
 8000d98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d9a:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <MX_ADC1_Init+0x94>)
 8000d9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000da0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000da2:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <MX_ADC1_Init+0x94>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <MX_ADC1_Init+0x94>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dae:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <MX_ADC1_Init+0x94>)
 8000db0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000db4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <MX_ADC1_Init+0x94>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000dbc:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <MX_ADC1_Init+0x94>)
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dc2:	4815      	ldr	r0, [pc, #84]	; (8000e18 <MX_ADC1_Init+0x94>)
 8000dc4:	f000 fe00 	bl	80019c8 <HAL_ADC_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000dce:	f000 fbf3 	bl	80015b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000dda:	2307      	movs	r3, #7
 8000ddc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	4619      	mov	r1, r3
 8000de2:	480d      	ldr	r0, [pc, #52]	; (8000e18 <MX_ADC1_Init+0x94>)
 8000de4:	f001 f80e 	bl	8001e04 <HAL_ADC_ConfigChannel>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000dee:	f000 fbe3 	bl	80015b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000df2:	2311      	movs	r3, #17
 8000df4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000df6:	2302      	movs	r3, #2
 8000df8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4806      	ldr	r0, [pc, #24]	; (8000e18 <MX_ADC1_Init+0x94>)
 8000e00:	f001 f800 	bl	8001e04 <HAL_ADC_ConfigChannel>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000e0a:	f000 fbd5 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	2000009c 	.word	0x2000009c
 8000e1c:	40012400 	.word	0x40012400

08000e20 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a28      	ldr	r2, [pc, #160]	; (8000edc <HAL_ADC_MspInit+0xbc>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d149      	bne.n	8000ed4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e40:	4b27      	ldr	r3, [pc, #156]	; (8000ee0 <HAL_ADC_MspInit+0xc0>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a26      	ldr	r2, [pc, #152]	; (8000ee0 <HAL_ADC_MspInit+0xc0>)
 8000e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e4a:	6193      	str	r3, [r2, #24]
 8000e4c:	4b24      	ldr	r3, [pc, #144]	; (8000ee0 <HAL_ADC_MspInit+0xc0>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e58:	4b21      	ldr	r3, [pc, #132]	; (8000ee0 <HAL_ADC_MspInit+0xc0>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	4a20      	ldr	r2, [pc, #128]	; (8000ee0 <HAL_ADC_MspInit+0xc0>)
 8000e5e:	f043 0304 	orr.w	r3, r3, #4
 8000e62:	6193      	str	r3, [r2, #24]
 8000e64:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <HAL_ADC_MspInit+0xc0>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	f003 0304 	and.w	r3, r3, #4
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e70:	2302      	movs	r3, #2
 8000e72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e74:	2303      	movs	r3, #3
 8000e76:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	f107 0310 	add.w	r3, r7, #16
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4819      	ldr	r0, [pc, #100]	; (8000ee4 <HAL_ADC_MspInit+0xc4>)
 8000e80:	f001 fcc4 	bl	800280c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e84:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <HAL_ADC_MspInit+0xc8>)
 8000e86:	4a19      	ldr	r2, [pc, #100]	; (8000eec <HAL_ADC_MspInit+0xcc>)
 8000e88:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e8a:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <HAL_ADC_MspInit+0xc8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e90:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <HAL_ADC_MspInit+0xc8>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e96:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <HAL_ADC_MspInit+0xc8>)
 8000e98:	2280      	movs	r2, #128	; 0x80
 8000e9a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_ADC_MspInit+0xc8>)
 8000e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ea2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ea4:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <HAL_ADC_MspInit+0xc8>)
 8000ea6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000eaa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000eac:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <HAL_ADC_MspInit+0xc8>)
 8000eae:	2220      	movs	r2, #32
 8000eb0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <HAL_ADC_MspInit+0xc8>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000eb8:	480b      	ldr	r0, [pc, #44]	; (8000ee8 <HAL_ADC_MspInit+0xc8>)
 8000eba:	f001 fa7d 	bl	80023b8 <HAL_DMA_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000ec4:	f000 fb78 	bl	80015b8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <HAL_ADC_MspInit+0xc8>)
 8000ecc:	621a      	str	r2, [r3, #32]
 8000ece:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <HAL_ADC_MspInit+0xc8>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	3720      	adds	r7, #32
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40012400 	.word	0x40012400
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40010800 	.word	0x40010800
 8000ee8:	200000cc 	.word	0x200000cc
 8000eec:	40020008 	.word	0x40020008

08000ef0 <LOG>:
#include "common.h"

extern UART_HandleTypeDef huart1;

void LOG(const char *TAG, char *data)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b09c      	sub	sp, #112	; 0x70
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
	char data_log[100] = {0};
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	f107 0310 	add.w	r3, r7, #16
 8000f02:	2260      	movs	r2, #96	; 0x60
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f004 f872 	bl	8004ff0 <memset>
	sprintf(data_log, "%s: %s\r\n", TAG, data);
 8000f0c:	f107 000c 	add.w	r0, r7, #12
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	490a      	ldr	r1, [pc, #40]	; (8000f40 <LOG+0x50>)
 8000f16:	f004 f873 	bl	8005000 <siprintf>
	HAL_UART_Transmit(&huart1, data_log, strlen(data_log), 1000);
 8000f1a:	f107 030c 	add.w	r3, r7, #12
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff f916 	bl	8000150 <strlen>
 8000f24:	4603      	mov	r3, r0
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	f107 010c 	add.w	r1, r7, #12
 8000f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f30:	4804      	ldr	r0, [pc, #16]	; (8000f44 <LOG+0x54>)
 8000f32:	f002 fdb1 	bl	8003a98 <HAL_UART_Transmit>
}
 8000f36:	bf00      	nop
 8000f38:	3770      	adds	r7, #112	; 0x70
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	080066b8 	.word	0x080066b8
 8000f44:	20000434 	.word	0x20000434

08000f48 <reverse>:

void reverse(char *str, int len)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b087      	sub	sp, #28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	613b      	str	r3, [r7, #16]
    while (i < j)
 8000f5c:	e018      	b.n	8000f90 <reverse+0x48>
    {
        temp = str[i];
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	4413      	add	r3, r2
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	441a      	add	r2, r3
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	440b      	add	r3, r1
 8000f74:	7812      	ldrb	r2, [r2, #0]
 8000f76:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	701a      	strb	r2, [r3, #0]
        i++;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	3301      	adds	r3, #1
 8000f88:	617b      	str	r3, [r7, #20]
        j--;
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	613b      	str	r3, [r7, #16]
    while (i < j)
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	dbe2      	blt.n	8000f5e <reverse+0x16>
    }
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	371c      	adds	r7, #28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <intToStr>:

int intToStr(int x, char str[], int d)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
    int i = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
    if(x == 0)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d126      	bne.n	8001008 <intToStr+0x64>
        str[i++] = '0';
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	1c5a      	adds	r2, r3, #1
 8000fbe:	617a      	str	r2, [r7, #20]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	2230      	movs	r2, #48	; 0x30
 8000fc8:	701a      	strb	r2, [r3, #0]

    while (x)
 8000fca:	e01d      	b.n	8001008 <intToStr+0x64>
    {
        str[i++] = (x % 10) + '0';
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <intToStr+0xa0>)
 8000fd0:	fb83 1302 	smull	r1, r3, r3, r2
 8000fd4:	1099      	asrs	r1, r3, #2
 8000fd6:	17d3      	asrs	r3, r2, #31
 8000fd8:	1ac9      	subs	r1, r1, r3
 8000fda:	460b      	mov	r3, r1
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	440b      	add	r3, r1
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	1ad1      	subs	r1, r2, r3
 8000fe4:	b2ca      	uxtb	r2, r1
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	1c59      	adds	r1, r3, #1
 8000fea:	6179      	str	r1, [r7, #20]
 8000fec:	4619      	mov	r1, r3
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	440b      	add	r3, r1
 8000ff2:	3230      	adds	r2, #48	; 0x30
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4a12      	ldr	r2, [pc, #72]	; (8001044 <intToStr+0xa0>)
 8000ffc:	fb82 1203 	smull	r1, r2, r2, r3
 8001000:	1092      	asrs	r2, r2, #2
 8001002:	17db      	asrs	r3, r3, #31
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	60fb      	str	r3, [r7, #12]
    while (x)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1de      	bne.n	8000fcc <intToStr+0x28>
    }

    while (i < d)
 800100e:	e007      	b.n	8001020 <intToStr+0x7c>
        str[i++] = '0';
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	1c5a      	adds	r2, r3, #1
 8001014:	617a      	str	r2, [r7, #20]
 8001016:	461a      	mov	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	4413      	add	r3, r2
 800101c:	2230      	movs	r2, #48	; 0x30
 800101e:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	429a      	cmp	r2, r3
 8001026:	dbf3      	blt.n	8001010 <intToStr+0x6c>

    reverse(str, i);
 8001028:	6979      	ldr	r1, [r7, #20]
 800102a:	68b8      	ldr	r0, [r7, #8]
 800102c:	f7ff ff8c 	bl	8000f48 <reverse>
    str[i] = '\0';
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	4413      	add	r3, r2
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
    return i;
 800103a:	697b      	ldr	r3, [r7, #20]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	66666667 	.word	0x66666667

08001048 <ftoa>:

void ftoa(double n, char* res, int afterpoint)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	; 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	603b      	str	r3, [r7, #0]
    int ipart = (int)n;
 8001056:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800105a:	f7ff fced 	bl	8000a38 <__aeabi_d2iz>
 800105e:	4603      	mov	r3, r0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
    double fpart = n - (double)ipart;
 8001062:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001064:	f7ff f9ce 	bl	8000404 <__aeabi_i2d>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001070:	f7ff f87a 	bl	8000168 <__aeabi_dsub>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int i = intToStr(ipart, res, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001082:	f7ff ff8f 	bl	8000fa4 <intToStr>
 8001086:	6178      	str	r0, [r7, #20]
    if (afterpoint != 0)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d024      	beq.n	80010d8 <ftoa+0x90>
    {
        res[i] = '.';
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	4413      	add	r3, r2
 8001094:	222e      	movs	r2, #46	; 0x2e
 8001096:	701a      	strb	r2, [r3, #0]
        fpart = fpart * pow(10, afterpoint);
 8001098:	6838      	ldr	r0, [r7, #0]
 800109a:	f7ff f9b3 	bl	8000404 <__aeabi_i2d>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	f04f 0000 	mov.w	r0, #0
 80010a6:	490e      	ldr	r1, [pc, #56]	; (80010e0 <ftoa+0x98>)
 80010a8:	f004 fc16 	bl	80058d8 <pow>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010b4:	f7ff fa10 	bl	80004d8 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
        intToStr((int)fpart, res + i + 1, afterpoint);
 80010c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010c4:	f7ff fcb8 	bl	8000a38 <__aeabi_d2iz>
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	3301      	adds	r3, #1
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	4413      	add	r3, r2
 80010d0:	683a      	ldr	r2, [r7, #0]
 80010d2:	4619      	mov	r1, r3
 80010d4:	f7ff ff66 	bl	8000fa4 <intToStr>
    }
}
 80010d8:	bf00      	nop
 80010da:	3728      	adds	r7, #40	; 0x28
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40240000 	.word	0x40240000

080010e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <MX_DMA_Init+0x38>)
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <MX_DMA_Init+0x38>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6153      	str	r3, [r2, #20]
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_DMA_Init+0x38>)
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2105      	movs	r1, #5
 8001106:	200b      	movs	r0, #11
 8001108:	f001 f92b 	bl	8002362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800110c:	200b      	movs	r0, #11
 800110e:	f001 f944 	bl	800239a <HAL_NVIC_EnableIRQ>

}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000

08001120 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4a06      	ldr	r2, [pc, #24]	; (8001148 <vApplicationGetIdleTaskMemory+0x28>)
 8001130:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	4a05      	ldr	r2, [pc, #20]	; (800114c <vApplicationGetIdleTaskMemory+0x2c>)
 8001136:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2280      	movs	r2, #128	; 0x80
 800113c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	20000114 	.word	0x20000114
 800114c:	20000168 	.word	0x20000168

08001150 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001150:	b5b0      	push	{r4, r5, r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af02      	add	r7, sp, #8
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <MX_FREERTOS_Init+0x48>)
 8001158:	1d3c      	adds	r4, r7, #4
 800115a:	461d      	mov	r5, r3
 800115c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800115e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001160:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001164:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f002 fe31 	bl	8003dd4 <osThreadCreate>
 8001172:	4603      	mov	r3, r0
 8001174:	4a09      	ldr	r2, [pc, #36]	; (800119c <MX_FREERTOS_Init+0x4c>)
 8001176:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate((TaskFunction_t)(&peripheral_task), "PERIPHERAL", 256, NULL, 10, NULL);
 8001178:	2300      	movs	r3, #0
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	230a      	movs	r3, #10
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2300      	movs	r3, #0
 8001182:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001186:	4906      	ldr	r1, [pc, #24]	; (80011a0 <MX_FREERTOS_Init+0x50>)
 8001188:	4806      	ldr	r0, [pc, #24]	; (80011a4 <MX_FREERTOS_Init+0x54>)
 800118a:	f002 ff42 	bl	8004012 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

}
 800118e:	bf00      	nop
 8001190:	3720      	adds	r7, #32
 8001192:	46bd      	mov	sp, r7
 8001194:	bdb0      	pop	{r4, r5, r7, pc}
 8001196:	bf00      	nop
 8001198:	080066e8 	.word	0x080066e8
 800119c:	20000110 	.word	0x20000110
 80011a0:	080066dc 	.word	0x080066dc
 80011a4:	080011e1 	.word	0x080011e1

080011a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  char data_log[20];
  sprintf(data_log, "Default task");
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	4908      	ldr	r1, [pc, #32]	; (80011d8 <StartDefaultTask+0x30>)
 80011b6:	4618      	mov	r0, r3
 80011b8:	f003 ff22 	bl	8005000 <siprintf>

  /* Infinite loop */
  for(;;)
  {
	  LOG(TAG, data_log);
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <StartDefaultTask+0x34>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f107 020c 	add.w	r2, r7, #12
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fe92 	bl	8000ef0 <LOG>
	  HAL_Delay(1000);
 80011cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011d0:	f000 fbd6 	bl	8001980 <HAL_Delay>
	  LOG(TAG, data_log);
 80011d4:	e7f2      	b.n	80011bc <StartDefaultTask+0x14>
 80011d6:	bf00      	nop
 80011d8:	08006704 	.word	0x08006704
 80011dc:	20000000 	.word	0x20000000

080011e0 <peripheral_task>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void peripheral_task(void const *arg)
{
 80011e0:	b5b0      	push	{r4, r5, r7, lr}
 80011e2:	b08e      	sub	sp, #56	; 0x38
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  static uint32_t adc_val[22] = {0};
  static uint16_t ADC_VREF_mV = 3300;
  static float battery = 0;
  char data_log[40];

  memset(data_log, 0, 40 * sizeof(char));
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	2228      	movs	r2, #40	; 0x28
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f003 fefd 	bl	8004ff0 <memset>
  sprintf(data_log, "Peripheral task");
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	4971      	ldr	r1, [pc, #452]	; (80013c0 <peripheral_task+0x1e0>)
 80011fc:	4618      	mov	r0, r3
 80011fe:	f003 feff 	bl	8005000 <siprintf>
  LOG(TAG, data_log);
 8001202:	4b70      	ldr	r3, [pc, #448]	; (80013c4 <peripheral_task+0x1e4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f107 020c 	add.w	r2, r7, #12
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fe6f 	bl	8000ef0 <LOG>

  volatile uint32_t time_keeper_1 = HAL_GetTick();
 8001212:	f000 fbab 	bl	800196c <HAL_GetTick>
 8001216:	4603      	mov	r3, r0
 8001218:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start_DMA(&hadc1, adc_val, 20);
 800121a:	2214      	movs	r2, #20
 800121c:	496a      	ldr	r1, [pc, #424]	; (80013c8 <peripheral_task+0x1e8>)
 800121e:	486b      	ldr	r0, [pc, #428]	; (80013cc <peripheral_task+0x1ec>)
 8001220:	f000 fcaa 	bl	8001b78 <HAL_ADC_Start_DMA>
	  time_keeper_1 = HAL_GetTick();
 8001224:	f000 fba2 	bl	800196c <HAL_GetTick>
 8001228:	4603      	mov	r3, r0
 800122a:	60bb      	str	r3, [r7, #8]
	  while ((HAL_GetTick() - time_keeper_1) <= 3000)
 800122c:	e0a5      	b.n	800137a <peripheral_task+0x19a>
	  {
		  adc_val[20] = 0;
 800122e:	4b66      	ldr	r3, [pc, #408]	; (80013c8 <peripheral_task+0x1e8>)
 8001230:	2200      	movs	r2, #0
 8001232:	651a      	str	r2, [r3, #80]	; 0x50
		  adc_val[21] = 0;
 8001234:	4b64      	ldr	r3, [pc, #400]	; (80013c8 <peripheral_task+0x1e8>)
 8001236:	2200      	movs	r2, #0
 8001238:	655a      	str	r2, [r3, #84]	; 0x54
		  for (uint8_t i = 0; i < 20; i+=2)
 800123a:	2300      	movs	r3, #0
 800123c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001240:	e019      	b.n	8001276 <peripheral_task+0x96>
		  {
			  adc_val[20] += adc_val[i];
 8001242:	4b61      	ldr	r3, [pc, #388]	; (80013c8 <peripheral_task+0x1e8>)
 8001244:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001246:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800124a:	495f      	ldr	r1, [pc, #380]	; (80013c8 <peripheral_task+0x1e8>)
 800124c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001250:	4413      	add	r3, r2
 8001252:	4a5d      	ldr	r2, [pc, #372]	; (80013c8 <peripheral_task+0x1e8>)
 8001254:	6513      	str	r3, [r2, #80]	; 0x50
			  adc_val[21] += adc_val[i+1];
 8001256:	4b5c      	ldr	r3, [pc, #368]	; (80013c8 <peripheral_task+0x1e8>)
 8001258:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800125a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800125e:	3301      	adds	r3, #1
 8001260:	4959      	ldr	r1, [pc, #356]	; (80013c8 <peripheral_task+0x1e8>)
 8001262:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001266:	4413      	add	r3, r2
 8001268:	4a57      	ldr	r2, [pc, #348]	; (80013c8 <peripheral_task+0x1e8>)
 800126a:	6553      	str	r3, [r2, #84]	; 0x54
		  for (uint8_t i = 0; i < 20; i+=2)
 800126c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001270:	3302      	adds	r3, #2
 8001272:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001276:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800127a:	2b13      	cmp	r3, #19
 800127c:	d9e1      	bls.n	8001242 <peripheral_task+0x62>
		  }
		  adc_val[20] /= 10;
 800127e:	4b52      	ldr	r3, [pc, #328]	; (80013c8 <peripheral_task+0x1e8>)
 8001280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001282:	4a53      	ldr	r2, [pc, #332]	; (80013d0 <peripheral_task+0x1f0>)
 8001284:	fba2 2303 	umull	r2, r3, r2, r3
 8001288:	08db      	lsrs	r3, r3, #3
 800128a:	4a4f      	ldr	r2, [pc, #316]	; (80013c8 <peripheral_task+0x1e8>)
 800128c:	6513      	str	r3, [r2, #80]	; 0x50
		  adc_val[21] /= 10;
 800128e:	4b4e      	ldr	r3, [pc, #312]	; (80013c8 <peripheral_task+0x1e8>)
 8001290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001292:	4a4f      	ldr	r2, [pc, #316]	; (80013d0 <peripheral_task+0x1f0>)
 8001294:	fba2 2303 	umull	r2, r3, r2, r3
 8001298:	08db      	lsrs	r3, r3, #3
 800129a:	4a4b      	ldr	r2, [pc, #300]	; (80013c8 <peripheral_task+0x1e8>)
 800129c:	6553      	str	r3, [r2, #84]	; 0x54

	      ADC_VREF_mV = (uint16_t)(VREFINT * ADC_RESOLUTION * 1000 / adc_val[21]) - 130;
 800129e:	4b4a      	ldr	r3, [pc, #296]	; (80013c8 <peripheral_task+0x1e8>)
 80012a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff f89e 	bl	80003e4 <__aeabi_ui2d>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	a13e      	add	r1, pc, #248	; (adr r1, 80013a8 <peripheral_task+0x1c8>)
 80012ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012b2:	f7ff fa3b 	bl	800072c <__aeabi_ddiv>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4610      	mov	r0, r2
 80012bc:	4619      	mov	r1, r3
 80012be:	f7ff fbe3 	bl	8000a88 <__aeabi_d2uiz>
 80012c2:	4603      	mov	r3, r0
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	3b82      	subs	r3, #130	; 0x82
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	4b42      	ldr	r3, [pc, #264]	; (80013d4 <peripheral_task+0x1f4>)
 80012cc:	801a      	strh	r2, [r3, #0]
	      battery = (float)(((float)adc_val[20] * RATIO * ADC_VREF_mV / ADC_RESOLUTION) / 1000);
 80012ce:	4b3e      	ldr	r3, [pc, #248]	; (80013c8 <peripheral_task+0x1e8>)
 80012d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fcfe 	bl	8000cd4 <__aeabi_ui2f>
 80012d8:	4603      	mov	r3, r0
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f8a4 	bl	8000428 <__aeabi_f2d>
 80012e0:	a333      	add	r3, pc, #204	; (adr r3, 80013b0 <peripheral_task+0x1d0>)
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	f7ff f8f7 	bl	80004d8 <__aeabi_dmul>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4614      	mov	r4, r2
 80012f0:	461d      	mov	r5, r3
 80012f2:	4b38      	ldr	r3, [pc, #224]	; (80013d4 <peripheral_task+0x1f4>)
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f884 	bl	8000404 <__aeabi_i2d>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4620      	mov	r0, r4
 8001302:	4629      	mov	r1, r5
 8001304:	f7ff f8e8 	bl	80004d8 <__aeabi_dmul>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	a329      	add	r3, pc, #164	; (adr r3, 80013b8 <peripheral_task+0x1d8>)
 8001312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001316:	f7ff fa09 	bl	800072c <__aeabi_ddiv>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	4b2c      	ldr	r3, [pc, #176]	; (80013d8 <peripheral_task+0x1f8>)
 8001328:	f7ff fa00 	bl	800072c <__aeabi_ddiv>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fbc8 	bl	8000ac8 <__aeabi_d2f>
 8001338:	4603      	mov	r3, r0
 800133a:	4a28      	ldr	r2, [pc, #160]	; (80013dc <peripheral_task+0x1fc>)
 800133c:	6013      	str	r3, [r2, #0]
	      ftoa(battery, sx1278_node.battery, 2);
 800133e:	4b27      	ldr	r3, [pc, #156]	; (80013dc <peripheral_task+0x1fc>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f870 	bl	8000428 <__aeabi_f2d>
 8001348:	2302      	movs	r3, #2
 800134a:	4a25      	ldr	r2, [pc, #148]	; (80013e0 <peripheral_task+0x200>)
 800134c:	f7ff fe7c 	bl	8001048 <ftoa>

	      /* Logging data */
	      sprintf(data_log, "Vref: %d, Vbat: %s", ADC_VREF_mV, sx1278_node.battery);
 8001350:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <peripheral_task+0x1f4>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	f107 000c 	add.w	r0, r7, #12
 800135a:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <peripheral_task+0x200>)
 800135c:	4921      	ldr	r1, [pc, #132]	; (80013e4 <peripheral_task+0x204>)
 800135e:	f003 fe4f 	bl	8005000 <siprintf>
	      LOG(TAG, data_log);
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <peripheral_task+0x1e4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f107 020c 	add.w	r2, r7, #12
 800136a:	4611      	mov	r1, r2
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fdbf 	bl	8000ef0 <LOG>
	      HAL_Delay(1000);
 8001372:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001376:	f000 fb03 	bl	8001980 <HAL_Delay>
	  while ((HAL_GetTick() - time_keeper_1) <= 3000)
 800137a:	f000 faf7 	bl	800196c <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001388:	4293      	cmp	r3, r2
 800138a:	f67f af50 	bls.w	800122e <peripheral_task+0x4e>
	  }

	  HAL_ADC_Stop_DMA(&hadc1);
 800138e:	480f      	ldr	r0, [pc, #60]	; (80013cc <peripheral_task+0x1ec>)
 8001390:	f000 fcd0 	bl	8001d34 <HAL_ADC_Stop_DMA>
	  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8001394:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001398:	4813      	ldr	r0, [pc, #76]	; (80013e8 <peripheral_task+0x208>)
 800139a:	f001 fbd3 	bl	8002b44 <HAL_GPIO_TogglePin>
	  HAL_Delay(2000);
 800139e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013a2:	f000 faed 	bl	8001980 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, adc_val, 20);
 80013a6:	e738      	b.n	800121a <peripheral_task+0x3a>
 80013a8:	80000000 	.word	0x80000000
 80013ac:	4152e6d1 	.word	0x4152e6d1
 80013b0:	cccccccd 	.word	0xcccccccd
 80013b4:	3ff4cccc 	.word	0x3ff4cccc
 80013b8:	00000000 	.word	0x00000000
 80013bc:	40affe00 	.word	0x40affe00
 80013c0:	08006714 	.word	0x08006714
 80013c4:	20000000 	.word	0x20000000
 80013c8:	20000368 	.word	0x20000368
 80013cc:	2000009c 	.word	0x2000009c
 80013d0:	cccccccd 	.word	0xcccccccd
 80013d4:	20000004 	.word	0x20000004
 80013d8:	408f4000 	.word	0x408f4000
 80013dc:	200003c0 	.word	0x200003c0
 80013e0:	200003cc 	.word	0x200003cc
 80013e4:	08006724 	.word	0x08006724
 80013e8:	40011000 	.word	0x40011000

080013ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f2:	f107 0310 	add.w	r3, r7, #16
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001400:	4b1e      	ldr	r3, [pc, #120]	; (800147c <MX_GPIO_Init+0x90>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a1d      	ldr	r2, [pc, #116]	; (800147c <MX_GPIO_Init+0x90>)
 8001406:	f043 0310 	orr.w	r3, r3, #16
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b1b      	ldr	r3, [pc, #108]	; (800147c <MX_GPIO_Init+0x90>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f003 0310 	and.w	r3, r3, #16
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001418:	4b18      	ldr	r3, [pc, #96]	; (800147c <MX_GPIO_Init+0x90>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a17      	ldr	r2, [pc, #92]	; (800147c <MX_GPIO_Init+0x90>)
 800141e:	f043 0320 	orr.w	r3, r3, #32
 8001422:	6193      	str	r3, [r2, #24]
 8001424:	4b15      	ldr	r3, [pc, #84]	; (800147c <MX_GPIO_Init+0x90>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f003 0320 	and.w	r3, r3, #32
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <MX_GPIO_Init+0x90>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a11      	ldr	r2, [pc, #68]	; (800147c <MX_GPIO_Init+0x90>)
 8001436:	f043 0304 	orr.w	r3, r3, #4
 800143a:	6193      	str	r3, [r2, #24]
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <MX_GPIO_Init+0x90>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED0_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800144e:	480c      	ldr	r0, [pc, #48]	; (8001480 <MX_GPIO_Init+0x94>)
 8001450:	f001 fb60 	bl	8002b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin;
 8001454:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001458:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145a:	2301      	movs	r3, #1
 800145c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800145e:	2301      	movs	r3, #1
 8001460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2302      	movs	r3, #2
 8001464:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001466:	f107 0310 	add.w	r3, r7, #16
 800146a:	4619      	mov	r1, r3
 800146c:	4804      	ldr	r0, [pc, #16]	; (8001480 <MX_GPIO_Init+0x94>)
 800146e:	f001 f9cd 	bl	800280c <HAL_GPIO_Init>

}
 8001472:	bf00      	nop
 8001474:	3720      	adds	r7, #32
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40021000 	.word	0x40021000
 8001480:	40011000 	.word	0x40011000

08001484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800148a:	f000 fa47 	bl	800191c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800148e:	f000 f825 	bl	80014dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001492:	f7ff ffab 	bl	80013ec <MX_GPIO_Init>
  MX_DMA_Init();
 8001496:	f7ff fe25 	bl	80010e4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800149a:	f000 f9a3 	bl	80017e4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800149e:	f7ff fc71 	bl	8000d84 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  char data_log[20];
  sx1278_node.node_id = 10;
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <main+0x4c>)
 80014a4:	220a      	movs	r2, #10
 80014a6:	601a      	str	r2, [r3, #0]
  sprintf(data_log, "node_id: %d", sx1278_node.node_id);
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <main+0x4c>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	4909      	ldr	r1, [pc, #36]	; (80014d4 <main+0x50>)
 80014b0:	4618      	mov	r0, r3
 80014b2:	f003 fda5 	bl	8005000 <siprintf>
  LOG(TAG, data_log);
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <main+0x54>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	1d3a      	adds	r2, r7, #4
 80014bc:	4611      	mov	r1, r2
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fd16 	bl	8000ef0 <LOG>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80014c4:	f7ff fe44 	bl	8001150 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80014c8:	f002 fc7d 	bl	8003dc6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <main+0x48>
 80014ce:	bf00      	nop
 80014d0:	200003c4 	.word	0x200003c4
 80014d4:	08006740 	.word	0x08006740
 80014d8:	20000008 	.word	0x20000008

080014dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b094      	sub	sp, #80	; 0x50
 80014e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014e6:	2228      	movs	r2, #40	; 0x28
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f003 fd80 	bl	8004ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800150c:	2301      	movs	r3, #1
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001510:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800151a:	2301      	movs	r3, #1
 800151c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800151e:	2302      	movs	r3, #2
 8001520:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001522:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001526:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001528:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800152c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800152e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001532:	4618      	mov	r0, r3
 8001534:	f001 fb20 	bl	8002b78 <HAL_RCC_OscConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800153e:	f000 f83b 	bl	80015b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001542:	230f      	movs	r3, #15
 8001544:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001546:	2302      	movs	r3, #2
 8001548:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800154e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001552:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001554:	2300      	movs	r3, #0
 8001556:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2102      	movs	r1, #2
 800155e:	4618      	mov	r0, r3
 8001560:	f001 fd8c 	bl	800307c <HAL_RCC_ClockConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800156a:	f000 f825 	bl	80015b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800156e:	2302      	movs	r3, #2
 8001570:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001576:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	4618      	mov	r0, r3
 800157c:	f001 ff3c 	bl	80033f8 <HAL_RCCEx_PeriphCLKConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001586:	f000 f817 	bl	80015b8 <Error_Handler>
  }
}
 800158a:	bf00      	nop
 800158c:	3750      	adds	r7, #80	; 0x50
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a04      	ldr	r2, [pc, #16]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d101      	bne.n	80015aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015a6:	f000 f9cf 	bl	8001948 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40012c00 	.word	0x40012c00

080015b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015bc:	b672      	cpsid	i
}
 80015be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <Error_Handler+0x8>
	...

080015c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015ca:	4b18      	ldr	r3, [pc, #96]	; (800162c <HAL_MspInit+0x68>)
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	4a17      	ldr	r2, [pc, #92]	; (800162c <HAL_MspInit+0x68>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6193      	str	r3, [r2, #24]
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <HAL_MspInit+0x68>)
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_MspInit+0x68>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	4a11      	ldr	r2, [pc, #68]	; (800162c <HAL_MspInit+0x68>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ec:	61d3      	str	r3, [r2, #28]
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <HAL_MspInit+0x68>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	210f      	movs	r1, #15
 80015fe:	f06f 0001 	mvn.w	r0, #1
 8001602:	f000 feae 	bl	8002362 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <HAL_MspInit+0x6c>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	4a04      	ldr	r2, [pc, #16]	; (8001630 <HAL_MspInit+0x6c>)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40021000 	.word	0x40021000
 8001630:	40010000 	.word	0x40010000

08001634 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08c      	sub	sp, #48	; 0x30
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800163c:	2300      	movs	r3, #0
 800163e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800164a:	4b2e      	ldr	r3, [pc, #184]	; (8001704 <HAL_InitTick+0xd0>)
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	4a2d      	ldr	r2, [pc, #180]	; (8001704 <HAL_InitTick+0xd0>)
 8001650:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001654:	6193      	str	r3, [r2, #24]
 8001656:	4b2b      	ldr	r3, [pc, #172]	; (8001704 <HAL_InitTick+0xd0>)
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001662:	f107 020c 	add.w	r2, r7, #12
 8001666:	f107 0310 	add.w	r3, r7, #16
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f001 fe75 	bl	800335c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001672:	f001 fe5f 	bl	8003334 <HAL_RCC_GetPCLK2Freq>
 8001676:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167a:	4a23      	ldr	r2, [pc, #140]	; (8001708 <HAL_InitTick+0xd4>)
 800167c:	fba2 2303 	umull	r2, r3, r2, r3
 8001680:	0c9b      	lsrs	r3, r3, #18
 8001682:	3b01      	subs	r3, #1
 8001684:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001686:	4b21      	ldr	r3, [pc, #132]	; (800170c <HAL_InitTick+0xd8>)
 8001688:	4a21      	ldr	r2, [pc, #132]	; (8001710 <HAL_InitTick+0xdc>)
 800168a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800168c:	4b1f      	ldr	r3, [pc, #124]	; (800170c <HAL_InitTick+0xd8>)
 800168e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001692:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001694:	4a1d      	ldr	r2, [pc, #116]	; (800170c <HAL_InitTick+0xd8>)
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800169a:	4b1c      	ldr	r3, [pc, #112]	; (800170c <HAL_InitTick+0xd8>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a0:	4b1a      	ldr	r3, [pc, #104]	; (800170c <HAL_InitTick+0xd8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a6:	4b19      	ldr	r3, [pc, #100]	; (800170c <HAL_InitTick+0xd8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80016ac:	4817      	ldr	r0, [pc, #92]	; (800170c <HAL_InitTick+0xd8>)
 80016ae:	f001 ff59 	bl	8003564 <HAL_TIM_Base_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80016b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d11b      	bne.n	80016f8 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80016c0:	4812      	ldr	r0, [pc, #72]	; (800170c <HAL_InitTick+0xd8>)
 80016c2:	f001 ffa7 	bl	8003614 <HAL_TIM_Base_Start_IT>
 80016c6:	4603      	mov	r3, r0
 80016c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80016cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d111      	bne.n	80016f8 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80016d4:	2019      	movs	r0, #25
 80016d6:	f000 fe60 	bl	800239a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b0f      	cmp	r3, #15
 80016de:	d808      	bhi.n	80016f2 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80016e0:	2200      	movs	r2, #0
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	2019      	movs	r0, #25
 80016e6:	f000 fe3c 	bl	8002362 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <HAL_InitTick+0xe0>)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	e002      	b.n	80016f8 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80016f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3730      	adds	r7, #48	; 0x30
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40021000 	.word	0x40021000
 8001708:	431bde83 	.word	0x431bde83
 800170c:	200003e8 	.word	0x200003e8
 8001710:	40012c00 	.word	0x40012c00
 8001714:	20000010 	.word	0x20000010

08001718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800171c:	e7fe      	b.n	800171c <NMI_Handler+0x4>

0800171e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <HardFault_Handler+0x4>

08001724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <MemManage_Handler+0x4>

0800172a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <BusFault_Handler+0x4>

08001730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <UsageFault_Handler+0x4>

08001736 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
	...

08001744 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <DMA1_Channel1_IRQHandler+0x10>)
 800174a:	f000 ff2b 	bl	80025a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200000cc 	.word	0x200000cc

08001758 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <TIM1_UP_IRQHandler+0x10>)
 800175e:	f001 ffab 	bl	80036b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200003e8 	.word	0x200003e8

0800176c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001774:	4a14      	ldr	r2, [pc, #80]	; (80017c8 <_sbrk+0x5c>)
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <_sbrk+0x60>)
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001780:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <_sbrk+0x64>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d102      	bne.n	800178e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <_sbrk+0x64>)
 800178a:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <_sbrk+0x68>)
 800178c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <_sbrk+0x64>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	429a      	cmp	r2, r3
 800179a:	d207      	bcs.n	80017ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800179c:	f003 fbf0 	bl	8004f80 <__errno>
 80017a0:	4603      	mov	r3, r0
 80017a2:	220c      	movs	r2, #12
 80017a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017a6:	f04f 33ff 	mov.w	r3, #4294967295
 80017aa:	e009      	b.n	80017c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <_sbrk+0x64>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017b2:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <_sbrk+0x64>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <_sbrk+0x64>)
 80017bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017be:	68fb      	ldr	r3, [r7, #12]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20005000 	.word	0x20005000
 80017cc:	00000400 	.word	0x00000400
 80017d0:	20000430 	.word	0x20000430
 80017d4:	200011e0 	.word	0x200011e0

080017d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <MX_USART1_UART_Init+0x4c>)
 80017ea:	4a12      	ldr	r2, [pc, #72]	; (8001834 <MX_USART1_UART_Init+0x50>)
 80017ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <MX_USART1_UART_Init+0x4c>)
 80017f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <MX_USART1_UART_Init+0x4c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MX_USART1_UART_Init+0x4c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <MX_USART1_UART_Init+0x4c>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_USART1_UART_Init+0x4c>)
 800180a:	220c      	movs	r2, #12
 800180c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <MX_USART1_UART_Init+0x4c>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <MX_USART1_UART_Init+0x4c>)
 8001816:	2200      	movs	r2, #0
 8001818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <MX_USART1_UART_Init+0x4c>)
 800181c:	f002 f8ec 	bl	80039f8 <HAL_UART_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001826:	f7ff fec7 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000434 	.word	0x20000434
 8001834:	40013800 	.word	0x40013800

08001838 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a1c      	ldr	r2, [pc, #112]	; (80018c4 <HAL_UART_MspInit+0x8c>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d131      	bne.n	80018bc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001858:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <HAL_UART_MspInit+0x90>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	4a1a      	ldr	r2, [pc, #104]	; (80018c8 <HAL_UART_MspInit+0x90>)
 800185e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001862:	6193      	str	r3, [r2, #24]
 8001864:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <HAL_UART_MspInit+0x90>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001870:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_UART_MspInit+0x90>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	4a14      	ldr	r2, [pc, #80]	; (80018c8 <HAL_UART_MspInit+0x90>)
 8001876:	f043 0304 	orr.w	r3, r3, #4
 800187a:	6193      	str	r3, [r2, #24]
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_UART_MspInit+0x90>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001888:	f44f 7300 	mov.w	r3, #512	; 0x200
 800188c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001892:	2303      	movs	r3, #3
 8001894:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	f107 0310 	add.w	r3, r7, #16
 800189a:	4619      	mov	r1, r3
 800189c:	480b      	ldr	r0, [pc, #44]	; (80018cc <HAL_UART_MspInit+0x94>)
 800189e:	f000 ffb5 	bl	800280c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b0:	f107 0310 	add.w	r3, r7, #16
 80018b4:	4619      	mov	r1, r3
 80018b6:	4805      	ldr	r0, [pc, #20]	; (80018cc <HAL_UART_MspInit+0x94>)
 80018b8:	f000 ffa8 	bl	800280c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80018bc:	bf00      	nop
 80018be:	3720      	adds	r7, #32
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40013800 	.word	0x40013800
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40010800 	.word	0x40010800

080018d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018d0:	f7ff ff82 	bl	80017d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018d4:	480b      	ldr	r0, [pc, #44]	; (8001904 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018d6:	490c      	ldr	r1, [pc, #48]	; (8001908 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018d8:	4a0c      	ldr	r2, [pc, #48]	; (800190c <LoopFillZerobss+0x16>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018dc:	e002      	b.n	80018e4 <LoopCopyDataInit>

080018de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e2:	3304      	adds	r3, #4

080018e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e8:	d3f9      	bcc.n	80018de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ea:	4a09      	ldr	r2, [pc, #36]	; (8001910 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018ec:	4c09      	ldr	r4, [pc, #36]	; (8001914 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f0:	e001      	b.n	80018f6 <LoopFillZerobss>

080018f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f4:	3204      	adds	r2, #4

080018f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f8:	d3fb      	bcc.n	80018f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018fa:	f003 fb47 	bl	8004f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018fe:	f7ff fdc1 	bl	8001484 <main>
  bx lr
 8001902:	4770      	bx	lr
  ldr r0, =_sdata
 8001904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001908:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800190c:	080067f0 	.word	0x080067f0
  ldr r2, =_sbss
 8001910:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001914:	200011dc 	.word	0x200011dc

08001918 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001918:	e7fe      	b.n	8001918 <ADC1_2_IRQHandler>
	...

0800191c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <HAL_Init+0x28>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a07      	ldr	r2, [pc, #28]	; (8001944 <HAL_Init+0x28>)
 8001926:	f043 0310 	orr.w	r3, r3, #16
 800192a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800192c:	2003      	movs	r0, #3
 800192e:	f000 fd0d 	bl	800234c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001932:	200f      	movs	r0, #15
 8001934:	f7ff fe7e 	bl	8001634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001938:	f7ff fe44 	bl	80015c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40022000 	.word	0x40022000

08001948 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <HAL_IncTick+0x1c>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_IncTick+0x20>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4a03      	ldr	r2, [pc, #12]	; (8001968 <HAL_IncTick+0x20>)
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	20000014 	.word	0x20000014
 8001968:	2000047c 	.word	0x2000047c

0800196c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return uwTick;
 8001970:	4b02      	ldr	r3, [pc, #8]	; (800197c <HAL_GetTick+0x10>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	2000047c 	.word	0x2000047c

08001980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001988:	f7ff fff0 	bl	800196c <HAL_GetTick>
 800198c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001998:	d005      	beq.n	80019a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <HAL_Delay+0x44>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4413      	add	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019a6:	bf00      	nop
 80019a8:	f7ff ffe0 	bl	800196c <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d8f7      	bhi.n	80019a8 <HAL_Delay+0x28>
  {
  }
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000014 	.word	0x20000014

080019c8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e0be      	b.n	8001b68 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d109      	bne.n	8001a0c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff fa0a 	bl	8000e20 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 fb4b 	bl	80020a8 <ADC_ConversionStop_Disable>
 8001a12:	4603      	mov	r3, r0
 8001a14:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f040 8099 	bne.w	8001b56 <HAL_ADC_Init+0x18e>
 8001a24:	7dfb      	ldrb	r3, [r7, #23]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f040 8095 	bne.w	8001b56 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a30:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a34:	f023 0302 	bic.w	r3, r3, #2
 8001a38:	f043 0202 	orr.w	r2, r3, #2
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a48:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	7b1b      	ldrb	r3, [r3, #12]
 8001a4e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a50:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a60:	d003      	beq.n	8001a6a <HAL_ADC_Init+0xa2>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d102      	bne.n	8001a70 <HAL_ADC_Init+0xa8>
 8001a6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a6e:	e000      	b.n	8001a72 <HAL_ADC_Init+0xaa>
 8001a70:	2300      	movs	r3, #0
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	7d1b      	ldrb	r3, [r3, #20]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d119      	bne.n	8001ab4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	7b1b      	ldrb	r3, [r3, #12]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d109      	bne.n	8001a9c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	035a      	lsls	r2, r3, #13
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	e00b      	b.n	8001ab4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa0:	f043 0220 	orr.w	r2, r3, #32
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aac:	f043 0201 	orr.w	r2, r3, #1
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	4b28      	ldr	r3, [pc, #160]	; (8001b70 <HAL_ADC_Init+0x1a8>)
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6812      	ldr	r2, [r2, #0]
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	430b      	orrs	r3, r1
 8001ada:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ae4:	d003      	beq.n	8001aee <HAL_ADC_Init+0x126>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d104      	bne.n	8001af8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	051b      	lsls	r3, r3, #20
 8001af6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afe:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <HAL_ADC_Init+0x1ac>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d10b      	bne.n	8001b34 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b26:	f023 0303 	bic.w	r3, r3, #3
 8001b2a:	f043 0201 	orr.w	r2, r3, #1
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b32:	e018      	b.n	8001b66 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b38:	f023 0312 	bic.w	r3, r3, #18
 8001b3c:	f043 0210 	orr.w	r2, r3, #16
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b48:	f043 0201 	orr.w	r2, r3, #1
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b54:	e007      	b.n	8001b66 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5a:	f043 0210 	orr.w	r2, r3, #16
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	ffe1f7fd 	.word	0xffe1f7fd
 8001b74:	ff1f0efe 	.word	0xff1f0efe

08001b78 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a64      	ldr	r2, [pc, #400]	; (8001d20 <HAL_ADC_Start_DMA+0x1a8>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d004      	beq.n	8001b9c <HAL_ADC_Start_DMA+0x24>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a63      	ldr	r2, [pc, #396]	; (8001d24 <HAL_ADC_Start_DMA+0x1ac>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d106      	bne.n	8001baa <HAL_ADC_Start_DMA+0x32>
 8001b9c:	4b60      	ldr	r3, [pc, #384]	; (8001d20 <HAL_ADC_Start_DMA+0x1a8>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f040 80b3 	bne.w	8001d10 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d101      	bne.n	8001bb8 <HAL_ADC_Start_DMA+0x40>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e0ae      	b.n	8001d16 <HAL_ADC_Start_DMA+0x19e>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 fa17 	bl	8001ff4 <ADC_Enable>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001bca:	7dfb      	ldrb	r3, [r7, #23]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f040 809a 	bne.w	8001d06 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bda:	f023 0301 	bic.w	r3, r3, #1
 8001bde:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a4e      	ldr	r2, [pc, #312]	; (8001d24 <HAL_ADC_Start_DMA+0x1ac>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d105      	bne.n	8001bfc <HAL_ADC_Start_DMA+0x84>
 8001bf0:	4b4b      	ldr	r3, [pc, #300]	; (8001d20 <HAL_ADC_Start_DMA+0x1a8>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d115      	bne.n	8001c28 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c00:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d026      	beq.n	8001c64 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c1e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c26:	e01d      	b.n	8001c64 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a39      	ldr	r2, [pc, #228]	; (8001d20 <HAL_ADC_Start_DMA+0x1a8>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d004      	beq.n	8001c48 <HAL_ADC_Start_DMA+0xd0>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a38      	ldr	r2, [pc, #224]	; (8001d24 <HAL_ADC_Start_DMA+0x1ac>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d10d      	bne.n	8001c64 <HAL_ADC_Start_DMA+0xec>
 8001c48:	4b35      	ldr	r3, [pc, #212]	; (8001d20 <HAL_ADC_Start_DMA+0x1a8>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d007      	beq.n	8001c64 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c58:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c5c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d006      	beq.n	8001c7e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c74:	f023 0206 	bic.w	r2, r3, #6
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c7c:	e002      	b.n	8001c84 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	4a25      	ldr	r2, [pc, #148]	; (8001d28 <HAL_ADC_Start_DMA+0x1b0>)
 8001c92:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	4a24      	ldr	r2, [pc, #144]	; (8001d2c <HAL_ADC_Start_DMA+0x1b4>)
 8001c9a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	4a23      	ldr	r2, [pc, #140]	; (8001d30 <HAL_ADC_Start_DMA+0x1b8>)
 8001ca2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f06f 0202 	mvn.w	r2, #2
 8001cac:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cbc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6a18      	ldr	r0, [r3, #32]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	334c      	adds	r3, #76	; 0x4c
 8001cc8:	4619      	mov	r1, r3
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f000 fbcd 	bl	800246c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001cdc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ce0:	d108      	bne.n	8001cf4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001cf0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001cf2:	e00f      	b.n	8001d14 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d02:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001d04:	e006      	b.n	8001d14 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001d0e:	e001      	b.n	8001d14 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40012400 	.word	0x40012400
 8001d24:	40012800 	.word	0x40012800
 8001d28:	0800212b 	.word	0x0800212b
 8001d2c:	080021a7 	.word	0x080021a7
 8001d30:	080021c3 	.word	0x080021c3

08001d34 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d101      	bne.n	8001d4e <HAL_ADC_Stop_DMA+0x1a>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e03a      	b.n	8001dc4 <HAL_ADC_Stop_DMA+0x90>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f9a6 	bl	80020a8 <ADC_ConversionStop_Disable>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d129      	bne.n	8001dba <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d74:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d11a      	bne.n	8001dba <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 fbcf 	bl	800252c <HAL_DMA_Abort>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d10a      	bne.n	8001dae <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001da0:	f023 0301 	bic.w	r3, r3, #1
 8001da4:	f043 0201 	orr.w	r2, r3, #1
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	629a      	str	r2, [r3, #40]	; 0x28
 8001dac:	e005      	b.n	8001dba <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr

08001dde <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr
	...

08001e04 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x20>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e0dc      	b.n	8001fde <HAL_ADC_ConfigChannel+0x1da>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b06      	cmp	r3, #6
 8001e32:	d81c      	bhi.n	8001e6e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	3b05      	subs	r3, #5
 8001e46:	221f      	movs	r2, #31
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	4019      	ands	r1, r3
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3b05      	subs	r3, #5
 8001e60:	fa00 f203 	lsl.w	r2, r0, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	635a      	str	r2, [r3, #52]	; 0x34
 8001e6c:	e03c      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b0c      	cmp	r3, #12
 8001e74:	d81c      	bhi.n	8001eb0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	3b23      	subs	r3, #35	; 0x23
 8001e88:	221f      	movs	r2, #31
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	4019      	ands	r1, r3
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3b23      	subs	r3, #35	; 0x23
 8001ea2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	631a      	str	r2, [r3, #48]	; 0x30
 8001eae:	e01b      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3b41      	subs	r3, #65	; 0x41
 8001ec2:	221f      	movs	r2, #31
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	4019      	ands	r1, r3
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	6818      	ldr	r0, [r3, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	3b41      	subs	r3, #65	; 0x41
 8001edc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b09      	cmp	r3, #9
 8001eee:	d91c      	bls.n	8001f2a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68d9      	ldr	r1, [r3, #12]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	4613      	mov	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	3b1e      	subs	r3, #30
 8001f02:	2207      	movs	r2, #7
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	4019      	ands	r1, r3
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	6898      	ldr	r0, [r3, #8]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4613      	mov	r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	4413      	add	r3, r2
 8001f1a:	3b1e      	subs	r3, #30
 8001f1c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	60da      	str	r2, [r3, #12]
 8001f28:	e019      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6919      	ldr	r1, [r3, #16]
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4613      	mov	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4413      	add	r3, r2
 8001f3a:	2207      	movs	r2, #7
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	4019      	ands	r1, r3
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	6898      	ldr	r0, [r3, #8]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4413      	add	r3, r2
 8001f52:	fa00 f203 	lsl.w	r2, r0, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2b10      	cmp	r3, #16
 8001f64:	d003      	beq.n	8001f6e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f6a:	2b11      	cmp	r3, #17
 8001f6c:	d132      	bne.n	8001fd4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a1d      	ldr	r2, [pc, #116]	; (8001fe8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d125      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d126      	bne.n	8001fd4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f94:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b10      	cmp	r3, #16
 8001f9c:	d11a      	bne.n	8001fd4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f9e:	4b13      	ldr	r3, [pc, #76]	; (8001fec <HAL_ADC_ConfigChannel+0x1e8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a13      	ldr	r2, [pc, #76]	; (8001ff0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa8:	0c9a      	lsrs	r2, r3, #18
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fb4:	e002      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f9      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x1b2>
 8001fc2:	e007      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc8:	f043 0220 	orr.w	r2, r3, #32
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr
 8001fe8:	40012400 	.word	0x40012400
 8001fec:	2000000c 	.word	0x2000000c
 8001ff0:	431bde83 	.word	0x431bde83

08001ff4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b01      	cmp	r3, #1
 8002010:	d040      	beq.n	8002094 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f042 0201 	orr.w	r2, r2, #1
 8002020:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002022:	4b1f      	ldr	r3, [pc, #124]	; (80020a0 <ADC_Enable+0xac>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a1f      	ldr	r2, [pc, #124]	; (80020a4 <ADC_Enable+0xb0>)
 8002028:	fba2 2303 	umull	r2, r3, r2, r3
 800202c:	0c9b      	lsrs	r3, r3, #18
 800202e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002030:	e002      	b.n	8002038 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	3b01      	subs	r3, #1
 8002036:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f9      	bne.n	8002032 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800203e:	f7ff fc95 	bl	800196c <HAL_GetTick>
 8002042:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002044:	e01f      	b.n	8002086 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002046:	f7ff fc91 	bl	800196c <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d918      	bls.n	8002086 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b01      	cmp	r3, #1
 8002060:	d011      	beq.n	8002086 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002066:	f043 0210 	orr.w	r2, r3, #16
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002072:	f043 0201 	orr.w	r2, r3, #1
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e007      	b.n	8002096 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b01      	cmp	r3, #1
 8002092:	d1d8      	bne.n	8002046 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	2000000c 	.word	0x2000000c
 80020a4:	431bde83 	.word	0x431bde83

080020a8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d12e      	bne.n	8002120 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0201 	bic.w	r2, r2, #1
 80020d0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020d2:	f7ff fc4b 	bl	800196c <HAL_GetTick>
 80020d6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020d8:	e01b      	b.n	8002112 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020da:	f7ff fc47 	bl	800196c <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d914      	bls.n	8002112 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d10d      	bne.n	8002112 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fa:	f043 0210 	orr.w	r2, r3, #16
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	f043 0201 	orr.w	r2, r3, #1
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e007      	b.n	8002122 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b01      	cmp	r3, #1
 800211e:	d0dc      	beq.n	80020da <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002136:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002140:	2b00      	cmp	r3, #0
 8002142:	d127      	bne.n	8002194 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002148:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800215a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800215e:	d115      	bne.n	800218c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002164:	2b00      	cmp	r3, #0
 8002166:	d111      	bne.n	800218c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d105      	bne.n	800218c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	f043 0201 	orr.w	r2, r3, #1
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f7ff fe1d 	bl	8001dcc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002192:	e004      	b.n	800219e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	4798      	blx	r3
}
 800219e:	bf00      	nop
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b084      	sub	sp, #16
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f7ff fe12 	bl	8001dde <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b084      	sub	sp, #16
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e0:	f043 0204 	orr.w	r2, r3, #4
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f7ff fe01 	bl	8001df0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <__NVIC_SetPriorityGrouping+0x44>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002214:	4013      	ands	r3, r2
 8002216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800222a:	4a04      	ldr	r2, [pc, #16]	; (800223c <__NVIC_SetPriorityGrouping+0x44>)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	60d3      	str	r3, [r2, #12]
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002244:	4b04      	ldr	r3, [pc, #16]	; (8002258 <__NVIC_GetPriorityGrouping+0x18>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	0a1b      	lsrs	r3, r3, #8
 800224a:	f003 0307 	and.w	r3, r3, #7
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	2b00      	cmp	r3, #0
 800226c:	db0b      	blt.n	8002286 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	f003 021f 	and.w	r2, r3, #31
 8002274:	4906      	ldr	r1, [pc, #24]	; (8002290 <__NVIC_EnableIRQ+0x34>)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	2001      	movs	r0, #1
 800227e:	fa00 f202 	lsl.w	r2, r0, r2
 8002282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr
 8002290:	e000e100 	.word	0xe000e100

08002294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	6039      	str	r1, [r7, #0]
 800229e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	db0a      	blt.n	80022be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	490c      	ldr	r1, [pc, #48]	; (80022e0 <__NVIC_SetPriority+0x4c>)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	0112      	lsls	r2, r2, #4
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	440b      	add	r3, r1
 80022b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022bc:	e00a      	b.n	80022d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	4908      	ldr	r1, [pc, #32]	; (80022e4 <__NVIC_SetPriority+0x50>)
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	3b04      	subs	r3, #4
 80022cc:	0112      	lsls	r2, r2, #4
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	440b      	add	r3, r1
 80022d2:	761a      	strb	r2, [r3, #24]
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000e100 	.word	0xe000e100
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b089      	sub	sp, #36	; 0x24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f1c3 0307 	rsb	r3, r3, #7
 8002302:	2b04      	cmp	r3, #4
 8002304:	bf28      	it	cs
 8002306:	2304      	movcs	r3, #4
 8002308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	3304      	adds	r3, #4
 800230e:	2b06      	cmp	r3, #6
 8002310:	d902      	bls.n	8002318 <NVIC_EncodePriority+0x30>
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3b03      	subs	r3, #3
 8002316:	e000      	b.n	800231a <NVIC_EncodePriority+0x32>
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800231c:	f04f 32ff 	mov.w	r2, #4294967295
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43da      	mvns	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	401a      	ands	r2, r3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002330:	f04f 31ff 	mov.w	r1, #4294967295
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	fa01 f303 	lsl.w	r3, r1, r3
 800233a:	43d9      	mvns	r1, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002340:	4313      	orrs	r3, r2
         );
}
 8002342:	4618      	mov	r0, r3
 8002344:	3724      	adds	r7, #36	; 0x24
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr

0800234c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff ff4f 	bl	80021f8 <__NVIC_SetPriorityGrouping>
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002362:	b580      	push	{r7, lr}
 8002364:	b086      	sub	sp, #24
 8002366:	af00      	add	r7, sp, #0
 8002368:	4603      	mov	r3, r0
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
 800236e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002374:	f7ff ff64 	bl	8002240 <__NVIC_GetPriorityGrouping>
 8002378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68b9      	ldr	r1, [r7, #8]
 800237e:	6978      	ldr	r0, [r7, #20]
 8002380:	f7ff ffb2 	bl	80022e8 <NVIC_EncodePriority>
 8002384:	4602      	mov	r2, r0
 8002386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800238a:	4611      	mov	r1, r2
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff ff81 	bl	8002294 <__NVIC_SetPriority>
}
 8002392:	bf00      	nop
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	4603      	mov	r3, r0
 80023a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff57 	bl	800225c <__NVIC_EnableIRQ>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e043      	b.n	8002456 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	4b22      	ldr	r3, [pc, #136]	; (8002460 <HAL_DMA_Init+0xa8>)
 80023d6:	4413      	add	r3, r2
 80023d8:	4a22      	ldr	r2, [pc, #136]	; (8002464 <HAL_DMA_Init+0xac>)
 80023da:	fba2 2303 	umull	r2, r3, r2, r3
 80023de:	091b      	lsrs	r3, r3, #4
 80023e0:	009a      	lsls	r2, r3, #2
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a1f      	ldr	r2, [pc, #124]	; (8002468 <HAL_DMA_Init+0xb0>)
 80023ea:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2202      	movs	r2, #2
 80023f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002402:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002406:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002410:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800241c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002428:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	4313      	orrs	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr
 8002460:	bffdfff8 	.word	0xbffdfff8
 8002464:	cccccccd 	.word	0xcccccccd
 8002468:	40020000 	.word	0x40020000

0800246c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
 8002478:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d101      	bne.n	800248c <HAL_DMA_Start_IT+0x20>
 8002488:	2302      	movs	r3, #2
 800248a:	e04b      	b.n	8002524 <HAL_DMA_Start_IT+0xb8>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b01      	cmp	r3, #1
 800249e:	d13a      	bne.n	8002516 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2202      	movs	r2, #2
 80024a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0201 	bic.w	r2, r2, #1
 80024bc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	68b9      	ldr	r1, [r7, #8]
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 f973 	bl	80027b0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d008      	beq.n	80024e4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f042 020e 	orr.w	r2, r2, #14
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	e00f      	b.n	8002504 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0204 	bic.w	r2, r2, #4
 80024f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 020a 	orr.w	r2, r2, #10
 8002502:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0201 	orr.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	e005      	b.n	8002522 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800251e:	2302      	movs	r3, #2
 8002520:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002522:	7dfb      	ldrb	r3, [r7, #23]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002534:	2300      	movs	r3, #0
 8002536:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d008      	beq.n	8002556 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2204      	movs	r2, #4
 8002548:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e020      	b.n	8002598 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 020e 	bic.w	r2, r2, #14
 8002564:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0201 	bic.w	r2, r2, #1
 8002574:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257e:	2101      	movs	r1, #1
 8002580:	fa01 f202 	lsl.w	r2, r1, r2
 8002584:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002596:	7bfb      	ldrb	r3, [r7, #15]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr
	...

080025a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	2204      	movs	r2, #4
 80025c2:	409a      	lsls	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d04f      	beq.n	800266c <HAL_DMA_IRQHandler+0xc8>
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d04a      	beq.n	800266c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0320 	and.w	r3, r3, #32
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d107      	bne.n	80025f4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0204 	bic.w	r2, r2, #4
 80025f2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a66      	ldr	r2, [pc, #408]	; (8002794 <HAL_DMA_IRQHandler+0x1f0>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d029      	beq.n	8002652 <HAL_DMA_IRQHandler+0xae>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a65      	ldr	r2, [pc, #404]	; (8002798 <HAL_DMA_IRQHandler+0x1f4>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d022      	beq.n	800264e <HAL_DMA_IRQHandler+0xaa>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a63      	ldr	r2, [pc, #396]	; (800279c <HAL_DMA_IRQHandler+0x1f8>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d01a      	beq.n	8002648 <HAL_DMA_IRQHandler+0xa4>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a62      	ldr	r2, [pc, #392]	; (80027a0 <HAL_DMA_IRQHandler+0x1fc>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d012      	beq.n	8002642 <HAL_DMA_IRQHandler+0x9e>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a60      	ldr	r2, [pc, #384]	; (80027a4 <HAL_DMA_IRQHandler+0x200>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d00a      	beq.n	800263c <HAL_DMA_IRQHandler+0x98>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a5f      	ldr	r2, [pc, #380]	; (80027a8 <HAL_DMA_IRQHandler+0x204>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d102      	bne.n	8002636 <HAL_DMA_IRQHandler+0x92>
 8002630:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002634:	e00e      	b.n	8002654 <HAL_DMA_IRQHandler+0xb0>
 8002636:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800263a:	e00b      	b.n	8002654 <HAL_DMA_IRQHandler+0xb0>
 800263c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002640:	e008      	b.n	8002654 <HAL_DMA_IRQHandler+0xb0>
 8002642:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002646:	e005      	b.n	8002654 <HAL_DMA_IRQHandler+0xb0>
 8002648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800264c:	e002      	b.n	8002654 <HAL_DMA_IRQHandler+0xb0>
 800264e:	2340      	movs	r3, #64	; 0x40
 8002650:	e000      	b.n	8002654 <HAL_DMA_IRQHandler+0xb0>
 8002652:	2304      	movs	r3, #4
 8002654:	4a55      	ldr	r2, [pc, #340]	; (80027ac <HAL_DMA_IRQHandler+0x208>)
 8002656:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 8094 	beq.w	800278a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800266a:	e08e      	b.n	800278a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	2202      	movs	r2, #2
 8002672:	409a      	lsls	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4013      	ands	r3, r2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d056      	beq.n	800272a <HAL_DMA_IRQHandler+0x186>
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d051      	beq.n	800272a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0320 	and.w	r3, r3, #32
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10b      	bne.n	80026ac <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 020a 	bic.w	r2, r2, #10
 80026a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a38      	ldr	r2, [pc, #224]	; (8002794 <HAL_DMA_IRQHandler+0x1f0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d029      	beq.n	800270a <HAL_DMA_IRQHandler+0x166>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a37      	ldr	r2, [pc, #220]	; (8002798 <HAL_DMA_IRQHandler+0x1f4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d022      	beq.n	8002706 <HAL_DMA_IRQHandler+0x162>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a35      	ldr	r2, [pc, #212]	; (800279c <HAL_DMA_IRQHandler+0x1f8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d01a      	beq.n	8002700 <HAL_DMA_IRQHandler+0x15c>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a34      	ldr	r2, [pc, #208]	; (80027a0 <HAL_DMA_IRQHandler+0x1fc>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d012      	beq.n	80026fa <HAL_DMA_IRQHandler+0x156>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a32      	ldr	r2, [pc, #200]	; (80027a4 <HAL_DMA_IRQHandler+0x200>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d00a      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x150>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a31      	ldr	r2, [pc, #196]	; (80027a8 <HAL_DMA_IRQHandler+0x204>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d102      	bne.n	80026ee <HAL_DMA_IRQHandler+0x14a>
 80026e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026ec:	e00e      	b.n	800270c <HAL_DMA_IRQHandler+0x168>
 80026ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026f2:	e00b      	b.n	800270c <HAL_DMA_IRQHandler+0x168>
 80026f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026f8:	e008      	b.n	800270c <HAL_DMA_IRQHandler+0x168>
 80026fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026fe:	e005      	b.n	800270c <HAL_DMA_IRQHandler+0x168>
 8002700:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002704:	e002      	b.n	800270c <HAL_DMA_IRQHandler+0x168>
 8002706:	2320      	movs	r3, #32
 8002708:	e000      	b.n	800270c <HAL_DMA_IRQHandler+0x168>
 800270a:	2302      	movs	r3, #2
 800270c:	4a27      	ldr	r2, [pc, #156]	; (80027ac <HAL_DMA_IRQHandler+0x208>)
 800270e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271c:	2b00      	cmp	r3, #0
 800271e:	d034      	beq.n	800278a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002728:	e02f      	b.n	800278a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	2208      	movs	r2, #8
 8002730:	409a      	lsls	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4013      	ands	r3, r2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d028      	beq.n	800278c <HAL_DMA_IRQHandler+0x1e8>
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d023      	beq.n	800278c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 020e 	bic.w	r2, r2, #14
 8002752:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275c:	2101      	movs	r1, #1
 800275e:	fa01 f202 	lsl.w	r2, r1, r2
 8002762:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	2b00      	cmp	r3, #0
 8002780:	d004      	beq.n	800278c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	4798      	blx	r3
    }
  }
  return;
 800278a:	bf00      	nop
 800278c:	bf00      	nop
}
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40020008 	.word	0x40020008
 8002798:	4002001c 	.word	0x4002001c
 800279c:	40020030 	.word	0x40020030
 80027a0:	40020044 	.word	0x40020044
 80027a4:	40020058 	.word	0x40020058
 80027a8:	4002006c 	.word	0x4002006c
 80027ac:	40020000 	.word	0x40020000

080027b0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
 80027bc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c6:	2101      	movs	r1, #1
 80027c8:	fa01 f202 	lsl.w	r2, r1, r2
 80027cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b10      	cmp	r3, #16
 80027dc:	d108      	bne.n	80027f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027ee:	e007      	b.n	8002800 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	60da      	str	r2, [r3, #12]
}
 8002800:	bf00      	nop
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr
	...

0800280c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800280c:	b480      	push	{r7}
 800280e:	b08b      	sub	sp, #44	; 0x2c
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002816:	2300      	movs	r3, #0
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800281a:	2300      	movs	r3, #0
 800281c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800281e:	e169      	b.n	8002af4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002820:	2201      	movs	r2, #1
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	69fa      	ldr	r2, [r7, #28]
 8002830:	4013      	ands	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	429a      	cmp	r2, r3
 800283a:	f040 8158 	bne.w	8002aee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4a9a      	ldr	r2, [pc, #616]	; (8002aac <HAL_GPIO_Init+0x2a0>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d05e      	beq.n	8002906 <HAL_GPIO_Init+0xfa>
 8002848:	4a98      	ldr	r2, [pc, #608]	; (8002aac <HAL_GPIO_Init+0x2a0>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d875      	bhi.n	800293a <HAL_GPIO_Init+0x12e>
 800284e:	4a98      	ldr	r2, [pc, #608]	; (8002ab0 <HAL_GPIO_Init+0x2a4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d058      	beq.n	8002906 <HAL_GPIO_Init+0xfa>
 8002854:	4a96      	ldr	r2, [pc, #600]	; (8002ab0 <HAL_GPIO_Init+0x2a4>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d86f      	bhi.n	800293a <HAL_GPIO_Init+0x12e>
 800285a:	4a96      	ldr	r2, [pc, #600]	; (8002ab4 <HAL_GPIO_Init+0x2a8>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d052      	beq.n	8002906 <HAL_GPIO_Init+0xfa>
 8002860:	4a94      	ldr	r2, [pc, #592]	; (8002ab4 <HAL_GPIO_Init+0x2a8>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d869      	bhi.n	800293a <HAL_GPIO_Init+0x12e>
 8002866:	4a94      	ldr	r2, [pc, #592]	; (8002ab8 <HAL_GPIO_Init+0x2ac>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d04c      	beq.n	8002906 <HAL_GPIO_Init+0xfa>
 800286c:	4a92      	ldr	r2, [pc, #584]	; (8002ab8 <HAL_GPIO_Init+0x2ac>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d863      	bhi.n	800293a <HAL_GPIO_Init+0x12e>
 8002872:	4a92      	ldr	r2, [pc, #584]	; (8002abc <HAL_GPIO_Init+0x2b0>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d046      	beq.n	8002906 <HAL_GPIO_Init+0xfa>
 8002878:	4a90      	ldr	r2, [pc, #576]	; (8002abc <HAL_GPIO_Init+0x2b0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d85d      	bhi.n	800293a <HAL_GPIO_Init+0x12e>
 800287e:	2b12      	cmp	r3, #18
 8002880:	d82a      	bhi.n	80028d8 <HAL_GPIO_Init+0xcc>
 8002882:	2b12      	cmp	r3, #18
 8002884:	d859      	bhi.n	800293a <HAL_GPIO_Init+0x12e>
 8002886:	a201      	add	r2, pc, #4	; (adr r2, 800288c <HAL_GPIO_Init+0x80>)
 8002888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800288c:	08002907 	.word	0x08002907
 8002890:	080028e1 	.word	0x080028e1
 8002894:	080028f3 	.word	0x080028f3
 8002898:	08002935 	.word	0x08002935
 800289c:	0800293b 	.word	0x0800293b
 80028a0:	0800293b 	.word	0x0800293b
 80028a4:	0800293b 	.word	0x0800293b
 80028a8:	0800293b 	.word	0x0800293b
 80028ac:	0800293b 	.word	0x0800293b
 80028b0:	0800293b 	.word	0x0800293b
 80028b4:	0800293b 	.word	0x0800293b
 80028b8:	0800293b 	.word	0x0800293b
 80028bc:	0800293b 	.word	0x0800293b
 80028c0:	0800293b 	.word	0x0800293b
 80028c4:	0800293b 	.word	0x0800293b
 80028c8:	0800293b 	.word	0x0800293b
 80028cc:	0800293b 	.word	0x0800293b
 80028d0:	080028e9 	.word	0x080028e9
 80028d4:	080028fd 	.word	0x080028fd
 80028d8:	4a79      	ldr	r2, [pc, #484]	; (8002ac0 <HAL_GPIO_Init+0x2b4>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d013      	beq.n	8002906 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028de:	e02c      	b.n	800293a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	623b      	str	r3, [r7, #32]
          break;
 80028e6:	e029      	b.n	800293c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	3304      	adds	r3, #4
 80028ee:	623b      	str	r3, [r7, #32]
          break;
 80028f0:	e024      	b.n	800293c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	3308      	adds	r3, #8
 80028f8:	623b      	str	r3, [r7, #32]
          break;
 80028fa:	e01f      	b.n	800293c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	330c      	adds	r3, #12
 8002902:	623b      	str	r3, [r7, #32]
          break;
 8002904:	e01a      	b.n	800293c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d102      	bne.n	8002914 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800290e:	2304      	movs	r3, #4
 8002910:	623b      	str	r3, [r7, #32]
          break;
 8002912:	e013      	b.n	800293c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d105      	bne.n	8002928 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800291c:	2308      	movs	r3, #8
 800291e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69fa      	ldr	r2, [r7, #28]
 8002924:	611a      	str	r2, [r3, #16]
          break;
 8002926:	e009      	b.n	800293c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002928:	2308      	movs	r3, #8
 800292a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	615a      	str	r2, [r3, #20]
          break;
 8002932:	e003      	b.n	800293c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002934:	2300      	movs	r3, #0
 8002936:	623b      	str	r3, [r7, #32]
          break;
 8002938:	e000      	b.n	800293c <HAL_GPIO_Init+0x130>
          break;
 800293a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	2bff      	cmp	r3, #255	; 0xff
 8002940:	d801      	bhi.n	8002946 <HAL_GPIO_Init+0x13a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	e001      	b.n	800294a <HAL_GPIO_Init+0x13e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3304      	adds	r3, #4
 800294a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	2bff      	cmp	r3, #255	; 0xff
 8002950:	d802      	bhi.n	8002958 <HAL_GPIO_Init+0x14c>
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	e002      	b.n	800295e <HAL_GPIO_Init+0x152>
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	3b08      	subs	r3, #8
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	210f      	movs	r1, #15
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	fa01 f303 	lsl.w	r3, r1, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	401a      	ands	r2, r3
 8002970:	6a39      	ldr	r1, [r7, #32]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	fa01 f303 	lsl.w	r3, r1, r3
 8002978:	431a      	orrs	r2, r3
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 80b1 	beq.w	8002aee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800298c:	4b4d      	ldr	r3, [pc, #308]	; (8002ac4 <HAL_GPIO_Init+0x2b8>)
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	4a4c      	ldr	r2, [pc, #304]	; (8002ac4 <HAL_GPIO_Init+0x2b8>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	6193      	str	r3, [r2, #24]
 8002998:	4b4a      	ldr	r3, [pc, #296]	; (8002ac4 <HAL_GPIO_Init+0x2b8>)
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029a4:	4a48      	ldr	r2, [pc, #288]	; (8002ac8 <HAL_GPIO_Init+0x2bc>)
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	089b      	lsrs	r3, r3, #2
 80029aa:	3302      	adds	r3, #2
 80029ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	220f      	movs	r2, #15
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4013      	ands	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a40      	ldr	r2, [pc, #256]	; (8002acc <HAL_GPIO_Init+0x2c0>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d013      	beq.n	80029f8 <HAL_GPIO_Init+0x1ec>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a3f      	ldr	r2, [pc, #252]	; (8002ad0 <HAL_GPIO_Init+0x2c4>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d00d      	beq.n	80029f4 <HAL_GPIO_Init+0x1e8>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a3e      	ldr	r2, [pc, #248]	; (8002ad4 <HAL_GPIO_Init+0x2c8>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d007      	beq.n	80029f0 <HAL_GPIO_Init+0x1e4>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a3d      	ldr	r2, [pc, #244]	; (8002ad8 <HAL_GPIO_Init+0x2cc>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d101      	bne.n	80029ec <HAL_GPIO_Init+0x1e0>
 80029e8:	2303      	movs	r3, #3
 80029ea:	e006      	b.n	80029fa <HAL_GPIO_Init+0x1ee>
 80029ec:	2304      	movs	r3, #4
 80029ee:	e004      	b.n	80029fa <HAL_GPIO_Init+0x1ee>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e002      	b.n	80029fa <HAL_GPIO_Init+0x1ee>
 80029f4:	2301      	movs	r3, #1
 80029f6:	e000      	b.n	80029fa <HAL_GPIO_Init+0x1ee>
 80029f8:	2300      	movs	r3, #0
 80029fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fc:	f002 0203 	and.w	r2, r2, #3
 8002a00:	0092      	lsls	r2, r2, #2
 8002a02:	4093      	lsls	r3, r2
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a0a:	492f      	ldr	r1, [pc, #188]	; (8002ac8 <HAL_GPIO_Init+0x2bc>)
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	089b      	lsrs	r3, r3, #2
 8002a10:	3302      	adds	r3, #2
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d006      	beq.n	8002a32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a24:	4b2d      	ldr	r3, [pc, #180]	; (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	492c      	ldr	r1, [pc, #176]	; (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	608b      	str	r3, [r1, #8]
 8002a30:	e006      	b.n	8002a40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a32:	4b2a      	ldr	r3, [pc, #168]	; (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	4928      	ldr	r1, [pc, #160]	; (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d006      	beq.n	8002a5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a4c:	4b23      	ldr	r3, [pc, #140]	; (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	4922      	ldr	r1, [pc, #136]	; (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	60cb      	str	r3, [r1, #12]
 8002a58:	e006      	b.n	8002a68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a5a:	4b20      	ldr	r3, [pc, #128]	; (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	491e      	ldr	r1, [pc, #120]	; (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d006      	beq.n	8002a82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a74:	4b19      	ldr	r3, [pc, #100]	; (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	4918      	ldr	r1, [pc, #96]	; (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]
 8002a80:	e006      	b.n	8002a90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a82:	4b16      	ldr	r3, [pc, #88]	; (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	4914      	ldr	r1, [pc, #80]	; (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d021      	beq.n	8002ae0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	490e      	ldr	r1, [pc, #56]	; (8002adc <HAL_GPIO_Init+0x2d0>)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	600b      	str	r3, [r1, #0]
 8002aa8:	e021      	b.n	8002aee <HAL_GPIO_Init+0x2e2>
 8002aaa:	bf00      	nop
 8002aac:	10320000 	.word	0x10320000
 8002ab0:	10310000 	.word	0x10310000
 8002ab4:	10220000 	.word	0x10220000
 8002ab8:	10210000 	.word	0x10210000
 8002abc:	10120000 	.word	0x10120000
 8002ac0:	10110000 	.word	0x10110000
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	40010000 	.word	0x40010000
 8002acc:	40010800 	.word	0x40010800
 8002ad0:	40010c00 	.word	0x40010c00
 8002ad4:	40011000 	.word	0x40011000
 8002ad8:	40011400 	.word	0x40011400
 8002adc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <HAL_GPIO_Init+0x304>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	4909      	ldr	r1, [pc, #36]	; (8002b10 <HAL_GPIO_Init+0x304>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	3301      	adds	r3, #1
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	fa22 f303 	lsr.w	r3, r2, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f47f ae8e 	bne.w	8002820 <HAL_GPIO_Init+0x14>
  }
}
 8002b04:	bf00      	nop
 8002b06:	bf00      	nop
 8002b08:	372c      	adds	r7, #44	; 0x2c
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr
 8002b10:	40010400 	.word	0x40010400

08002b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	807b      	strh	r3, [r7, #2]
 8002b20:	4613      	mov	r3, r2
 8002b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b24:	787b      	ldrb	r3, [r7, #1]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b2a:	887a      	ldrh	r2, [r7, #2]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b30:	e003      	b.n	8002b3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b32:	887b      	ldrh	r3, [r7, #2]
 8002b34:	041a      	lsls	r2, r3, #16
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	611a      	str	r2, [r3, #16]
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr

08002b44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b56:	887a      	ldrh	r2, [r7, #2]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	041a      	lsls	r2, r3, #16
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	43d9      	mvns	r1, r3
 8002b62:	887b      	ldrh	r3, [r7, #2]
 8002b64:	400b      	ands	r3, r1
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	611a      	str	r2, [r3, #16]
}
 8002b6c:	bf00      	nop
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr
	...

08002b78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e272      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 8087 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b98:	4b92      	ldr	r3, [pc, #584]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 030c 	and.w	r3, r3, #12
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d00c      	beq.n	8002bbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ba4:	4b8f      	ldr	r3, [pc, #572]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d112      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x5e>
 8002bb0:	4b8c      	ldr	r3, [pc, #560]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bbc:	d10b      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bbe:	4b89      	ldr	r3, [pc, #548]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d06c      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x12c>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d168      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e24c      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bde:	d106      	bne.n	8002bee <HAL_RCC_OscConfig+0x76>
 8002be0:	4b80      	ldr	r3, [pc, #512]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a7f      	ldr	r2, [pc, #508]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	e02e      	b.n	8002c4c <HAL_RCC_OscConfig+0xd4>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCC_OscConfig+0x98>
 8002bf6:	4b7b      	ldr	r3, [pc, #492]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a7a      	ldr	r2, [pc, #488]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	4b78      	ldr	r3, [pc, #480]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a77      	ldr	r2, [pc, #476]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	e01d      	b.n	8002c4c <HAL_RCC_OscConfig+0xd4>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCC_OscConfig+0xbc>
 8002c1a:	4b72      	ldr	r3, [pc, #456]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a71      	ldr	r2, [pc, #452]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	4b6f      	ldr	r3, [pc, #444]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a6e      	ldr	r2, [pc, #440]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	e00b      	b.n	8002c4c <HAL_RCC_OscConfig+0xd4>
 8002c34:	4b6b      	ldr	r3, [pc, #428]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a6a      	ldr	r2, [pc, #424]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	4b68      	ldr	r3, [pc, #416]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a67      	ldr	r2, [pc, #412]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d013      	beq.n	8002c7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c54:	f7fe fe8a 	bl	800196c <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c5c:	f7fe fe86 	bl	800196c <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b64      	cmp	r3, #100	; 0x64
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e200      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	4b5d      	ldr	r3, [pc, #372]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCC_OscConfig+0xe4>
 8002c7a:	e014      	b.n	8002ca6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7c:	f7fe fe76 	bl	800196c <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c84:	f7fe fe72 	bl	800196c <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	; 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e1ec      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c96:	4b53      	ldr	r3, [pc, #332]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x10c>
 8002ca2:	e000      	b.n	8002ca6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d063      	beq.n	8002d7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cb2:	4b4c      	ldr	r3, [pc, #304]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00b      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cbe:	4b49      	ldr	r3, [pc, #292]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d11c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x18c>
 8002cca:	4b46      	ldr	r3, [pc, #280]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d116      	bne.n	8002d04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd6:	4b43      	ldr	r3, [pc, #268]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <HAL_RCC_OscConfig+0x176>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d001      	beq.n	8002cee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e1c0      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cee:	4b3d      	ldr	r3, [pc, #244]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	4939      	ldr	r1, [pc, #228]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d02:	e03a      	b.n	8002d7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d020      	beq.n	8002d4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d0c:	4b36      	ldr	r3, [pc, #216]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002d0e:	2201      	movs	r2, #1
 8002d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d12:	f7fe fe2b 	bl	800196c <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d1a:	f7fe fe27 	bl	800196c <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e1a1      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2c:	4b2d      	ldr	r3, [pc, #180]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0f0      	beq.n	8002d1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d38:	4b2a      	ldr	r3, [pc, #168]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	4927      	ldr	r1, [pc, #156]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	600b      	str	r3, [r1, #0]
 8002d4c:	e015      	b.n	8002d7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d4e:	4b26      	ldr	r3, [pc, #152]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7fe fe0a 	bl	800196c <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5c:	f7fe fe06 	bl	800196c <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e180      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6e:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f0      	bne.n	8002d5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d03a      	beq.n	8002dfc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d019      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d8e:	4b17      	ldr	r3, [pc, #92]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d94:	f7fe fdea 	bl	800196c <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d9c:	f7fe fde6 	bl	800196c <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e160      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f0      	beq.n	8002d9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dba:	2001      	movs	r0, #1
 8002dbc:	f000 fafe 	bl	80033bc <RCC_Delay>
 8002dc0:	e01c      	b.n	8002dfc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dc2:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc8:	f7fe fdd0 	bl	800196c <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dce:	e00f      	b.n	8002df0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd0:	f7fe fdcc 	bl	800196c <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d908      	bls.n	8002df0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e146      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
 8002de2:	bf00      	nop
 8002de4:	40021000 	.word	0x40021000
 8002de8:	42420000 	.word	0x42420000
 8002dec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df0:	4b92      	ldr	r3, [pc, #584]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1e9      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 80a6 	beq.w	8002f56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e0e:	4b8b      	ldr	r3, [pc, #556]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10d      	bne.n	8002e36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e1a:	4b88      	ldr	r3, [pc, #544]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	4a87      	ldr	r2, [pc, #540]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e24:	61d3      	str	r3, [r2, #28]
 8002e26:	4b85      	ldr	r3, [pc, #532]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	60bb      	str	r3, [r7, #8]
 8002e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e32:	2301      	movs	r3, #1
 8002e34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e36:	4b82      	ldr	r3, [pc, #520]	; (8003040 <HAL_RCC_OscConfig+0x4c8>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d118      	bne.n	8002e74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e42:	4b7f      	ldr	r3, [pc, #508]	; (8003040 <HAL_RCC_OscConfig+0x4c8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a7e      	ldr	r2, [pc, #504]	; (8003040 <HAL_RCC_OscConfig+0x4c8>)
 8002e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e4e:	f7fe fd8d 	bl	800196c <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e56:	f7fe fd89 	bl	800196c <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b64      	cmp	r3, #100	; 0x64
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e103      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e68:	4b75      	ldr	r3, [pc, #468]	; (8003040 <HAL_RCC_OscConfig+0x4c8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0f0      	beq.n	8002e56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d106      	bne.n	8002e8a <HAL_RCC_OscConfig+0x312>
 8002e7c:	4b6f      	ldr	r3, [pc, #444]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	4a6e      	ldr	r2, [pc, #440]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	6213      	str	r3, [r2, #32]
 8002e88:	e02d      	b.n	8002ee6 <HAL_RCC_OscConfig+0x36e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10c      	bne.n	8002eac <HAL_RCC_OscConfig+0x334>
 8002e92:	4b6a      	ldr	r3, [pc, #424]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	4a69      	ldr	r2, [pc, #420]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002e98:	f023 0301 	bic.w	r3, r3, #1
 8002e9c:	6213      	str	r3, [r2, #32]
 8002e9e:	4b67      	ldr	r3, [pc, #412]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	4a66      	ldr	r2, [pc, #408]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002ea4:	f023 0304 	bic.w	r3, r3, #4
 8002ea8:	6213      	str	r3, [r2, #32]
 8002eaa:	e01c      	b.n	8002ee6 <HAL_RCC_OscConfig+0x36e>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	2b05      	cmp	r3, #5
 8002eb2:	d10c      	bne.n	8002ece <HAL_RCC_OscConfig+0x356>
 8002eb4:	4b61      	ldr	r3, [pc, #388]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	4a60      	ldr	r2, [pc, #384]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002eba:	f043 0304 	orr.w	r3, r3, #4
 8002ebe:	6213      	str	r3, [r2, #32]
 8002ec0:	4b5e      	ldr	r3, [pc, #376]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	4a5d      	ldr	r2, [pc, #372]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	6213      	str	r3, [r2, #32]
 8002ecc:	e00b      	b.n	8002ee6 <HAL_RCC_OscConfig+0x36e>
 8002ece:	4b5b      	ldr	r3, [pc, #364]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	4a5a      	ldr	r2, [pc, #360]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002ed4:	f023 0301 	bic.w	r3, r3, #1
 8002ed8:	6213      	str	r3, [r2, #32]
 8002eda:	4b58      	ldr	r3, [pc, #352]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	4a57      	ldr	r2, [pc, #348]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002ee0:	f023 0304 	bic.w	r3, r3, #4
 8002ee4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d015      	beq.n	8002f1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eee:	f7fe fd3d 	bl	800196c <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef4:	e00a      	b.n	8002f0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef6:	f7fe fd39 	bl	800196c <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e0b1      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f0c:	4b4b      	ldr	r3, [pc, #300]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0ee      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x37e>
 8002f18:	e014      	b.n	8002f44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1a:	f7fe fd27 	bl	800196c <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f20:	e00a      	b.n	8002f38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f22:	f7fe fd23 	bl	800196c <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e09b      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f38:	4b40      	ldr	r3, [pc, #256]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1ee      	bne.n	8002f22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f44:	7dfb      	ldrb	r3, [r7, #23]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d105      	bne.n	8002f56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f4a:	4b3c      	ldr	r3, [pc, #240]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	4a3b      	ldr	r2, [pc, #236]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002f50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 8087 	beq.w	800306e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f60:	4b36      	ldr	r3, [pc, #216]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 030c 	and.w	r3, r3, #12
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d061      	beq.n	8003030 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d146      	bne.n	8003002 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f74:	4b33      	ldr	r3, [pc, #204]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7a:	f7fe fcf7 	bl	800196c <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f82:	f7fe fcf3 	bl	800196c <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e06d      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f94:	4b29      	ldr	r3, [pc, #164]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1f0      	bne.n	8002f82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa8:	d108      	bne.n	8002fbc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002faa:	4b24      	ldr	r3, [pc, #144]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	4921      	ldr	r1, [pc, #132]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fbc:	4b1f      	ldr	r3, [pc, #124]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a19      	ldr	r1, [r3, #32]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	430b      	orrs	r3, r1
 8002fce:	491b      	ldr	r1, [pc, #108]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fd4:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fda:	f7fe fcc7 	bl	800196c <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe2:	f7fe fcc3 	bl	800196c <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e03d      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ff4:	4b11      	ldr	r3, [pc, #68]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0f0      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x46a>
 8003000:	e035      	b.n	800306e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003002:	4b10      	ldr	r3, [pc, #64]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003008:	f7fe fcb0 	bl	800196c <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003010:	f7fe fcac 	bl	800196c <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e026      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003022:	4b06      	ldr	r3, [pc, #24]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f0      	bne.n	8003010 <HAL_RCC_OscConfig+0x498>
 800302e:	e01e      	b.n	800306e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d107      	bne.n	8003048 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e019      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
 800303c:	40021000 	.word	0x40021000
 8003040:	40007000 	.word	0x40007000
 8003044:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <HAL_RCC_OscConfig+0x500>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	429a      	cmp	r2, r3
 800305a:	d106      	bne.n	800306a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003066:	429a      	cmp	r2, r3
 8003068:	d001      	beq.n	800306e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40021000 	.word	0x40021000

0800307c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0d0      	b.n	8003232 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003090:	4b6a      	ldr	r3, [pc, #424]	; (800323c <HAL_RCC_ClockConfig+0x1c0>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d910      	bls.n	80030c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309e:	4b67      	ldr	r3, [pc, #412]	; (800323c <HAL_RCC_ClockConfig+0x1c0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f023 0207 	bic.w	r2, r3, #7
 80030a6:	4965      	ldr	r1, [pc, #404]	; (800323c <HAL_RCC_ClockConfig+0x1c0>)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ae:	4b63      	ldr	r3, [pc, #396]	; (800323c <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0b8      	b.n	8003232 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d020      	beq.n	800310e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030d8:	4b59      	ldr	r3, [pc, #356]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	4a58      	ldr	r2, [pc, #352]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80030de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030f0:	4b53      	ldr	r3, [pc, #332]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	4a52      	ldr	r2, [pc, #328]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80030f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030fc:	4b50      	ldr	r3, [pc, #320]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	494d      	ldr	r1, [pc, #308]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	4313      	orrs	r3, r2
 800310c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d040      	beq.n	800319c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d107      	bne.n	8003132 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003122:	4b47      	ldr	r3, [pc, #284]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d115      	bne.n	800315a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e07f      	b.n	8003232 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d107      	bne.n	800314a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800313a:	4b41      	ldr	r3, [pc, #260]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d109      	bne.n	800315a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e073      	b.n	8003232 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314a:	4b3d      	ldr	r3, [pc, #244]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e06b      	b.n	8003232 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800315a:	4b39      	ldr	r3, [pc, #228]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f023 0203 	bic.w	r2, r3, #3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	4936      	ldr	r1, [pc, #216]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	4313      	orrs	r3, r2
 800316a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800316c:	f7fe fbfe 	bl	800196c <HAL_GetTick>
 8003170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003172:	e00a      	b.n	800318a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003174:	f7fe fbfa 	bl	800196c <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003182:	4293      	cmp	r3, r2
 8003184:	d901      	bls.n	800318a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e053      	b.n	8003232 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318a:	4b2d      	ldr	r3, [pc, #180]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f003 020c 	and.w	r2, r3, #12
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	429a      	cmp	r2, r3
 800319a:	d1eb      	bne.n	8003174 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800319c:	4b27      	ldr	r3, [pc, #156]	; (800323c <HAL_RCC_ClockConfig+0x1c0>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d210      	bcs.n	80031cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031aa:	4b24      	ldr	r3, [pc, #144]	; (800323c <HAL_RCC_ClockConfig+0x1c0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f023 0207 	bic.w	r2, r3, #7
 80031b2:	4922      	ldr	r1, [pc, #136]	; (800323c <HAL_RCC_ClockConfig+0x1c0>)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ba:	4b20      	ldr	r3, [pc, #128]	; (800323c <HAL_RCC_ClockConfig+0x1c0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e032      	b.n	8003232 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031d8:	4b19      	ldr	r3, [pc, #100]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	4916      	ldr	r1, [pc, #88]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d009      	beq.n	800320a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031f6:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	490e      	ldr	r1, [pc, #56]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 8003206:	4313      	orrs	r3, r2
 8003208:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800320a:	f000 f821 	bl	8003250 <HAL_RCC_GetSysClockFreq>
 800320e:	4602      	mov	r2, r0
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	490a      	ldr	r1, [pc, #40]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 800321c:	5ccb      	ldrb	r3, [r1, r3]
 800321e:	fa22 f303 	lsr.w	r3, r2, r3
 8003222:	4a09      	ldr	r2, [pc, #36]	; (8003248 <HAL_RCC_ClockConfig+0x1cc>)
 8003224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003226:	4b09      	ldr	r3, [pc, #36]	; (800324c <HAL_RCC_ClockConfig+0x1d0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7fe fa02 	bl	8001634 <HAL_InitTick>

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40022000 	.word	0x40022000
 8003240:	40021000 	.word	0x40021000
 8003244:	08006754 	.word	0x08006754
 8003248:	2000000c 	.word	0x2000000c
 800324c:	20000010 	.word	0x20000010

08003250 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	2300      	movs	r3, #0
 800325c:	60bb      	str	r3, [r7, #8]
 800325e:	2300      	movs	r3, #0
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	2300      	movs	r3, #0
 8003264:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003266:	2300      	movs	r3, #0
 8003268:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800326a:	4b1e      	ldr	r3, [pc, #120]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 030c 	and.w	r3, r3, #12
 8003276:	2b04      	cmp	r3, #4
 8003278:	d002      	beq.n	8003280 <HAL_RCC_GetSysClockFreq+0x30>
 800327a:	2b08      	cmp	r3, #8
 800327c:	d003      	beq.n	8003286 <HAL_RCC_GetSysClockFreq+0x36>
 800327e:	e027      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003280:	4b19      	ldr	r3, [pc, #100]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003282:	613b      	str	r3, [r7, #16]
      break;
 8003284:	e027      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	0c9b      	lsrs	r3, r3, #18
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	4a17      	ldr	r2, [pc, #92]	; (80032ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8003290:	5cd3      	ldrb	r3, [r2, r3]
 8003292:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d010      	beq.n	80032c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800329e:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	0c5b      	lsrs	r3, r3, #17
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	4a11      	ldr	r2, [pc, #68]	; (80032f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80032aa:	5cd3      	ldrb	r3, [r2, r3]
 80032ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a0d      	ldr	r2, [pc, #52]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80032b2:	fb03 f202 	mul.w	r2, r3, r2
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032bc:	617b      	str	r3, [r7, #20]
 80032be:	e004      	b.n	80032ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a0c      	ldr	r2, [pc, #48]	; (80032f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80032c4:	fb02 f303 	mul.w	r3, r2, r3
 80032c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	613b      	str	r3, [r7, #16]
      break;
 80032ce:	e002      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032d0:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80032d2:	613b      	str	r3, [r7, #16]
      break;
 80032d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032d6:	693b      	ldr	r3, [r7, #16]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	371c      	adds	r7, #28
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40021000 	.word	0x40021000
 80032e8:	007a1200 	.word	0x007a1200
 80032ec:	0800676c 	.word	0x0800676c
 80032f0:	0800677c 	.word	0x0800677c
 80032f4:	003d0900 	.word	0x003d0900

080032f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032fc:	4b02      	ldr	r3, [pc, #8]	; (8003308 <HAL_RCC_GetHCLKFreq+0x10>)
 80032fe:	681b      	ldr	r3, [r3, #0]
}
 8003300:	4618      	mov	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr
 8003308:	2000000c 	.word	0x2000000c

0800330c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003310:	f7ff fff2 	bl	80032f8 <HAL_RCC_GetHCLKFreq>
 8003314:	4602      	mov	r2, r0
 8003316:	4b05      	ldr	r3, [pc, #20]	; (800332c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	0a1b      	lsrs	r3, r3, #8
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	4903      	ldr	r1, [pc, #12]	; (8003330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003322:	5ccb      	ldrb	r3, [r1, r3]
 8003324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003328:	4618      	mov	r0, r3
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40021000 	.word	0x40021000
 8003330:	08006764 	.word	0x08006764

08003334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003338:	f7ff ffde 	bl	80032f8 <HAL_RCC_GetHCLKFreq>
 800333c:	4602      	mov	r2, r0
 800333e:	4b05      	ldr	r3, [pc, #20]	; (8003354 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	0adb      	lsrs	r3, r3, #11
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	4903      	ldr	r1, [pc, #12]	; (8003358 <HAL_RCC_GetPCLK2Freq+0x24>)
 800334a:	5ccb      	ldrb	r3, [r1, r3]
 800334c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003350:	4618      	mov	r0, r3
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40021000 	.word	0x40021000
 8003358:	08006764 	.word	0x08006764

0800335c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	220f      	movs	r2, #15
 800336a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800336c:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <HAL_RCC_GetClockConfig+0x58>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 0203 	and.w	r2, r3, #3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003378:	4b0e      	ldr	r3, [pc, #56]	; (80033b4 <HAL_RCC_GetClockConfig+0x58>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003384:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <HAL_RCC_GetClockConfig+0x58>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003390:	4b08      	ldr	r3, [pc, #32]	; (80033b4 <HAL_RCC_GetClockConfig+0x58>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	08db      	lsrs	r3, r3, #3
 8003396:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800339e:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <HAL_RCC_GetClockConfig+0x5c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0207 	and.w	r2, r3, #7
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr
 80033b4:	40021000 	.word	0x40021000
 80033b8:	40022000 	.word	0x40022000

080033bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033c4:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <RCC_Delay+0x34>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a0a      	ldr	r2, [pc, #40]	; (80033f4 <RCC_Delay+0x38>)
 80033ca:	fba2 2303 	umull	r2, r3, r2, r3
 80033ce:	0a5b      	lsrs	r3, r3, #9
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	fb02 f303 	mul.w	r3, r2, r3
 80033d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033d8:	bf00      	nop
  }
  while (Delay --);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	1e5a      	subs	r2, r3, #1
 80033de:	60fa      	str	r2, [r7, #12]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1f9      	bne.n	80033d8 <RCC_Delay+0x1c>
}
 80033e4:	bf00      	nop
 80033e6:	bf00      	nop
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr
 80033f0:	2000000c 	.word	0x2000000c
 80033f4:	10624dd3 	.word	0x10624dd3

080033f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	2300      	movs	r3, #0
 8003406:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d07d      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003414:	2300      	movs	r3, #0
 8003416:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003418:	4b4f      	ldr	r3, [pc, #316]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10d      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003424:	4b4c      	ldr	r3, [pc, #304]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	4a4b      	ldr	r2, [pc, #300]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800342e:	61d3      	str	r3, [r2, #28]
 8003430:	4b49      	ldr	r3, [pc, #292]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800343c:	2301      	movs	r3, #1
 800343e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003440:	4b46      	ldr	r3, [pc, #280]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003448:	2b00      	cmp	r3, #0
 800344a:	d118      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800344c:	4b43      	ldr	r3, [pc, #268]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a42      	ldr	r2, [pc, #264]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003456:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003458:	f7fe fa88 	bl	800196c <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345e:	e008      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003460:	f7fe fa84 	bl	800196c <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b64      	cmp	r3, #100	; 0x64
 800346c:	d901      	bls.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e06d      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003472:	4b3a      	ldr	r3, [pc, #232]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0f0      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800347e:	4b36      	ldr	r3, [pc, #216]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003486:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d02e      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	429a      	cmp	r2, r3
 800349a:	d027      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800349c:	4b2e      	ldr	r3, [pc, #184]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034a6:	4b2e      	ldr	r3, [pc, #184]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034a8:	2201      	movs	r2, #1
 80034aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034ac:	4b2c      	ldr	r3, [pc, #176]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034b2:	4a29      	ldr	r2, [pc, #164]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d014      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c2:	f7fe fa53 	bl	800196c <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c8:	e00a      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ca:	f7fe fa4f 	bl	800196c <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d8:	4293      	cmp	r3, r2
 80034da:	d901      	bls.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e036      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e0:	4b1d      	ldr	r3, [pc, #116]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0ee      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ec:	4b1a      	ldr	r3, [pc, #104]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	4917      	ldr	r1, [pc, #92]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034fe:	7dfb      	ldrb	r3, [r7, #23]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d105      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003504:	4b14      	ldr	r3, [pc, #80]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	4a13      	ldr	r2, [pc, #76]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800350a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800350e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800351c:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	490b      	ldr	r1, [pc, #44]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352a:	4313      	orrs	r3, r2
 800352c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0310 	and.w	r3, r3, #16
 8003536:	2b00      	cmp	r3, #0
 8003538:	d008      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800353a:	4b07      	ldr	r3, [pc, #28]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	4904      	ldr	r1, [pc, #16]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003548:	4313      	orrs	r3, r2
 800354a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40021000 	.word	0x40021000
 800355c:	40007000 	.word	0x40007000
 8003560:	42420440 	.word	0x42420440

08003564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e041      	b.n	80035fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f839 	bl	8003602 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3304      	adds	r3, #4
 80035a0:	4619      	mov	r1, r3
 80035a2:	4610      	mov	r0, r2
 80035a4:	f000 f9b4 	bl	8003910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr

08003614 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b01      	cmp	r3, #1
 8003626:	d001      	beq.n	800362c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e03a      	b.n	80036a2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0201 	orr.w	r2, r2, #1
 8003642:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a18      	ldr	r2, [pc, #96]	; (80036ac <HAL_TIM_Base_Start_IT+0x98>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d00e      	beq.n	800366c <HAL_TIM_Base_Start_IT+0x58>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003656:	d009      	beq.n	800366c <HAL_TIM_Base_Start_IT+0x58>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a14      	ldr	r2, [pc, #80]	; (80036b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d004      	beq.n	800366c <HAL_TIM_Base_Start_IT+0x58>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a13      	ldr	r2, [pc, #76]	; (80036b4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d111      	bne.n	8003690 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2b06      	cmp	r3, #6
 800367c:	d010      	beq.n	80036a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f042 0201 	orr.w	r2, r2, #1
 800368c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368e:	e007      	b.n	80036a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0201 	orr.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr
 80036ac:	40012c00 	.word	0x40012c00
 80036b0:	40000400 	.word	0x40000400
 80036b4:	40000800 	.word	0x40000800

080036b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d122      	bne.n	8003714 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d11b      	bne.n	8003714 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f06f 0202 	mvn.w	r2, #2
 80036e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f8ed 	bl	80038da <HAL_TIM_IC_CaptureCallback>
 8003700:	e005      	b.n	800370e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f8e0 	bl	80038c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f8ef 	bl	80038ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b04      	cmp	r3, #4
 8003720:	d122      	bne.n	8003768 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b04      	cmp	r3, #4
 800372e:	d11b      	bne.n	8003768 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0204 	mvn.w	r2, #4
 8003738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2202      	movs	r2, #2
 800373e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f8c3 	bl	80038da <HAL_TIM_IC_CaptureCallback>
 8003754:	e005      	b.n	8003762 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f8b6 	bl	80038c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f8c5 	bl	80038ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b08      	cmp	r3, #8
 8003774:	d122      	bne.n	80037bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b08      	cmp	r3, #8
 8003782:	d11b      	bne.n	80037bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0208 	mvn.w	r2, #8
 800378c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2204      	movs	r2, #4
 8003792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f899 	bl	80038da <HAL_TIM_IC_CaptureCallback>
 80037a8:	e005      	b.n	80037b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f88c 	bl	80038c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f89b 	bl	80038ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f003 0310 	and.w	r3, r3, #16
 80037c6:	2b10      	cmp	r3, #16
 80037c8:	d122      	bne.n	8003810 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	2b10      	cmp	r3, #16
 80037d6:	d11b      	bne.n	8003810 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0210 	mvn.w	r2, #16
 80037e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2208      	movs	r2, #8
 80037e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f86f 	bl	80038da <HAL_TIM_IC_CaptureCallback>
 80037fc:	e005      	b.n	800380a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f862 	bl	80038c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f871 	bl	80038ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b01      	cmp	r3, #1
 800381c:	d10e      	bne.n	800383c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b01      	cmp	r3, #1
 800382a:	d107      	bne.n	800383c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f06f 0201 	mvn.w	r2, #1
 8003834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7fd feac 	bl	8001594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003846:	2b80      	cmp	r3, #128	; 0x80
 8003848:	d10e      	bne.n	8003868 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003854:	2b80      	cmp	r3, #128	; 0x80
 8003856:	d107      	bne.n	8003868 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f8bf 	bl	80039e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003872:	2b40      	cmp	r3, #64	; 0x40
 8003874:	d10e      	bne.n	8003894 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003880:	2b40      	cmp	r3, #64	; 0x40
 8003882:	d107      	bne.n	8003894 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800388c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f835 	bl	80038fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f003 0320 	and.w	r3, r3, #32
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d10e      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f003 0320 	and.w	r3, r3, #32
 80038ac:	2b20      	cmp	r3, #32
 80038ae:	d107      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0220 	mvn.w	r2, #32
 80038b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f88a 	bl	80039d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038c0:	bf00      	nop
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bc80      	pop	{r7}
 80038d8:	4770      	bx	lr

080038da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr

080038ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc80      	pop	{r7}
 80038fc:	4770      	bx	lr

080038fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr

08003910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a29      	ldr	r2, [pc, #164]	; (80039c8 <TIM_Base_SetConfig+0xb8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d00b      	beq.n	8003940 <TIM_Base_SetConfig+0x30>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800392e:	d007      	beq.n	8003940 <TIM_Base_SetConfig+0x30>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a26      	ldr	r2, [pc, #152]	; (80039cc <TIM_Base_SetConfig+0xbc>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d003      	beq.n	8003940 <TIM_Base_SetConfig+0x30>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a25      	ldr	r2, [pc, #148]	; (80039d0 <TIM_Base_SetConfig+0xc0>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d108      	bne.n	8003952 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a1c      	ldr	r2, [pc, #112]	; (80039c8 <TIM_Base_SetConfig+0xb8>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d00b      	beq.n	8003972 <TIM_Base_SetConfig+0x62>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003960:	d007      	beq.n	8003972 <TIM_Base_SetConfig+0x62>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a19      	ldr	r2, [pc, #100]	; (80039cc <TIM_Base_SetConfig+0xbc>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d003      	beq.n	8003972 <TIM_Base_SetConfig+0x62>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a18      	ldr	r2, [pc, #96]	; (80039d0 <TIM_Base_SetConfig+0xc0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d108      	bne.n	8003984 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003978:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	4313      	orrs	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a07      	ldr	r2, [pc, #28]	; (80039c8 <TIM_Base_SetConfig+0xb8>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d103      	bne.n	80039b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	615a      	str	r2, [r3, #20]
}
 80039be:	bf00      	nop
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr
 80039c8:	40012c00 	.word	0x40012c00
 80039cc:	40000400 	.word	0x40000400
 80039d0:	40000800 	.word	0x40000800

080039d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr

080039e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr

080039f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e042      	b.n	8003a90 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d106      	bne.n	8003a24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fd ff0a 	bl	8001838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2224      	movs	r2, #36	; 0x24
 8003a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f91d 	bl	8003c7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	691a      	ldr	r2, [r3, #16]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	695a      	ldr	r2, [r3, #20]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68da      	ldr	r2, [r3, #12]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b08a      	sub	sp, #40	; 0x28
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d16d      	bne.n	8003b94 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d002      	beq.n	8003ac4 <HAL_UART_Transmit+0x2c>
 8003abe:	88fb      	ldrh	r3, [r7, #6]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e066      	b.n	8003b96 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2221      	movs	r2, #33	; 0x21
 8003ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ad6:	f7fd ff49 	bl	800196c <HAL_GetTick>
 8003ada:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	88fa      	ldrh	r2, [r7, #6]
 8003ae0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	88fa      	ldrh	r2, [r7, #6]
 8003ae6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af0:	d108      	bne.n	8003b04 <HAL_UART_Transmit+0x6c>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d104      	bne.n	8003b04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	61bb      	str	r3, [r7, #24]
 8003b02:	e003      	b.n	8003b0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b0c:	e02a      	b.n	8003b64 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2200      	movs	r2, #0
 8003b16:	2180      	movs	r1, #128	; 0x80
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 f840 	bl	8003b9e <UART_WaitOnFlagUntilTimeout>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e036      	b.n	8003b96 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10b      	bne.n	8003b46 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	3302      	adds	r3, #2
 8003b42:	61bb      	str	r3, [r7, #24]
 8003b44:	e007      	b.n	8003b56 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	781a      	ldrb	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	3301      	adds	r3, #1
 8003b54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1cf      	bne.n	8003b0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2200      	movs	r2, #0
 8003b76:	2140      	movs	r1, #64	; 0x40
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 f810 	bl	8003b9e <UART_WaitOnFlagUntilTimeout>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e006      	b.n	8003b96 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	e000      	b.n	8003b96 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003b94:	2302      	movs	r3, #2
  }
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3720      	adds	r7, #32
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b090      	sub	sp, #64	; 0x40
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	603b      	str	r3, [r7, #0]
 8003baa:	4613      	mov	r3, r2
 8003bac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bae:	e050      	b.n	8003c52 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb6:	d04c      	beq.n	8003c52 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d007      	beq.n	8003bce <UART_WaitOnFlagUntilTimeout+0x30>
 8003bbe:	f7fd fed5 	bl	800196c <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d241      	bcs.n	8003c52 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	330c      	adds	r3, #12
 8003bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd8:	e853 3f00 	ldrex	r3, [r3]
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	330c      	adds	r3, #12
 8003bec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bee:	637a      	str	r2, [r7, #52]	; 0x34
 8003bf0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bf6:	e841 2300 	strex	r3, r2, [r1]
 8003bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1e5      	bne.n	8003bce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3314      	adds	r3, #20
 8003c08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	e853 3f00 	ldrex	r3, [r3]
 8003c10:	613b      	str	r3, [r7, #16]
   return(result);
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f023 0301 	bic.w	r3, r3, #1
 8003c18:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	3314      	adds	r3, #20
 8003c20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c22:	623a      	str	r2, [r7, #32]
 8003c24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c26:	69f9      	ldr	r1, [r7, #28]
 8003c28:	6a3a      	ldr	r2, [r7, #32]
 8003c2a:	e841 2300 	strex	r3, r2, [r1]
 8003c2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1e5      	bne.n	8003c02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e00f      	b.n	8003c72 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	bf0c      	ite	eq
 8003c62:	2301      	moveq	r3, #1
 8003c64:	2300      	movne	r3, #0
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	461a      	mov	r2, r3
 8003c6a:	79fb      	ldrb	r3, [r7, #7]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d09f      	beq.n	8003bb0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3740      	adds	r7, #64	; 0x40
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
	...

08003c7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68da      	ldr	r2, [r3, #12]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003cb6:	f023 030c 	bic.w	r3, r3, #12
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6812      	ldr	r2, [r2, #0]
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	430b      	orrs	r3, r1
 8003cc2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699a      	ldr	r2, [r3, #24]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a2c      	ldr	r2, [pc, #176]	; (8003d90 <UART_SetConfig+0x114>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d103      	bne.n	8003cec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ce4:	f7ff fb26 	bl	8003334 <HAL_RCC_GetPCLK2Freq>
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	e002      	b.n	8003cf2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003cec:	f7ff fb0e 	bl	800330c <HAL_RCC_GetPCLK1Freq>
 8003cf0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	009a      	lsls	r2, r3, #2
 8003cfc:	441a      	add	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d08:	4a22      	ldr	r2, [pc, #136]	; (8003d94 <UART_SetConfig+0x118>)
 8003d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0e:	095b      	lsrs	r3, r3, #5
 8003d10:	0119      	lsls	r1, r3, #4
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	4613      	mov	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	009a      	lsls	r2, r3, #2
 8003d1c:	441a      	add	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d28:	4b1a      	ldr	r3, [pc, #104]	; (8003d94 <UART_SetConfig+0x118>)
 8003d2a:	fba3 0302 	umull	r0, r3, r3, r2
 8003d2e:	095b      	lsrs	r3, r3, #5
 8003d30:	2064      	movs	r0, #100	; 0x64
 8003d32:	fb00 f303 	mul.w	r3, r0, r3
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	3332      	adds	r3, #50	; 0x32
 8003d3c:	4a15      	ldr	r2, [pc, #84]	; (8003d94 <UART_SetConfig+0x118>)
 8003d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d42:	095b      	lsrs	r3, r3, #5
 8003d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d48:	4419      	add	r1, r3
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	009a      	lsls	r2, r3, #2
 8003d54:	441a      	add	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d60:	4b0c      	ldr	r3, [pc, #48]	; (8003d94 <UART_SetConfig+0x118>)
 8003d62:	fba3 0302 	umull	r0, r3, r3, r2
 8003d66:	095b      	lsrs	r3, r3, #5
 8003d68:	2064      	movs	r0, #100	; 0x64
 8003d6a:	fb00 f303 	mul.w	r3, r0, r3
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	3332      	adds	r3, #50	; 0x32
 8003d74:	4a07      	ldr	r2, [pc, #28]	; (8003d94 <UART_SetConfig+0x118>)
 8003d76:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7a:	095b      	lsrs	r3, r3, #5
 8003d7c:	f003 020f 	and.w	r2, r3, #15
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	440a      	add	r2, r1
 8003d86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d88:	bf00      	nop
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40013800 	.word	0x40013800
 8003d94:	51eb851f 	.word	0x51eb851f

08003d98 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003da2:	2300      	movs	r3, #0
 8003da4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003da6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003daa:	2b84      	cmp	r3, #132	; 0x84
 8003dac:	d005      	beq.n	8003dba <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003dae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4413      	add	r3, r2
 8003db6:	3303      	adds	r3, #3
 8003db8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003dba:	68fb      	ldr	r3, [r7, #12]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr

08003dc6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003dca:	f000 fa51 	bl	8004270 <vTaskStartScheduler>
  
  return osOK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dd6:	b089      	sub	sp, #36	; 0x24
 8003dd8:	af04      	add	r7, sp, #16
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d020      	beq.n	8003e28 <osThreadCreate+0x54>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d01c      	beq.n	8003e28 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685c      	ldr	r4, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681d      	ldr	r5, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691e      	ldr	r6, [r3, #16]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff ffc9 	bl	8003d98 <makeFreeRtosPriority>
 8003e06:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e10:	9202      	str	r2, [sp, #8]
 8003e12:	9301      	str	r3, [sp, #4]
 8003e14:	9100      	str	r1, [sp, #0]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	4632      	mov	r2, r6
 8003e1a:	4629      	mov	r1, r5
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	f000 f89c 	bl	8003f5a <xTaskCreateStatic>
 8003e22:	4603      	mov	r3, r0
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	e01c      	b.n	8003e62 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685c      	ldr	r4, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e34:	b29e      	uxth	r6, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff ffab 	bl	8003d98 <makeFreeRtosPriority>
 8003e42:	4602      	mov	r2, r0
 8003e44:	f107 030c 	add.w	r3, r7, #12
 8003e48:	9301      	str	r3, [sp, #4]
 8003e4a:	9200      	str	r2, [sp, #0]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	4632      	mov	r2, r6
 8003e50:	4629      	mov	r1, r5
 8003e52:	4620      	mov	r0, r4
 8003e54:	f000 f8dd 	bl	8004012 <xTaskCreate>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d001      	beq.n	8003e62 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e000      	b.n	8003e64 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003e62:	68fb      	ldr	r3, [r7, #12]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f103 0208 	add.w	r2, r3, #8
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f04f 32ff 	mov.w	r2, #4294967295
 8003e84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f103 0208 	add.w	r2, r3, #8
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f103 0208 	add.w	r2, r3, #8
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bc80      	pop	{r7}
 8003ea8:	4770      	bx	lr

08003eaa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bc80      	pop	{r7}
 8003ec0:	4770      	bx	lr

08003ec2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b085      	sub	sp, #20
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	601a      	str	r2, [r3, #0]
}
 8003efe:	bf00      	nop
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr

08003f08 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6892      	ldr	r2, [r2, #8]
 8003f1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6852      	ldr	r2, [r2, #4]
 8003f28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d103      	bne.n	8003f3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	1e5a      	subs	r2, r3, #1
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bc80      	pop	{r7}
 8003f58:	4770      	bx	lr

08003f5a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b08e      	sub	sp, #56	; 0x38
 8003f5e:	af04      	add	r7, sp, #16
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	607a      	str	r2, [r7, #4]
 8003f66:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10a      	bne.n	8003f84 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f72:	f383 8811 	msr	BASEPRI, r3
 8003f76:	f3bf 8f6f 	isb	sy
 8003f7a:	f3bf 8f4f 	dsb	sy
 8003f7e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f80:	bf00      	nop
 8003f82:	e7fe      	b.n	8003f82 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10a      	bne.n	8003fa0 <xTaskCreateStatic+0x46>
	__asm volatile
 8003f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	61fb      	str	r3, [r7, #28]
}
 8003f9c:	bf00      	nop
 8003f9e:	e7fe      	b.n	8003f9e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003fa0:	2354      	movs	r3, #84	; 0x54
 8003fa2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	2b54      	cmp	r3, #84	; 0x54
 8003fa8:	d00a      	beq.n	8003fc0 <xTaskCreateStatic+0x66>
	__asm volatile
 8003faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fae:	f383 8811 	msr	BASEPRI, r3
 8003fb2:	f3bf 8f6f 	isb	sy
 8003fb6:	f3bf 8f4f 	dsb	sy
 8003fba:	61bb      	str	r3, [r7, #24]
}
 8003fbc:	bf00      	nop
 8003fbe:	e7fe      	b.n	8003fbe <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d01e      	beq.n	8004004 <xTaskCreateStatic+0xaa>
 8003fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d01b      	beq.n	8004004 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fd4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	2202      	movs	r2, #2
 8003fda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003fde:	2300      	movs	r3, #0
 8003fe0:	9303      	str	r3, [sp, #12]
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	9302      	str	r3, [sp, #8]
 8003fe6:	f107 0314 	add.w	r3, r7, #20
 8003fea:	9301      	str	r3, [sp, #4]
 8003fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	68b9      	ldr	r1, [r7, #8]
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 f850 	bl	800409c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ffc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ffe:	f000 f8cd 	bl	800419c <prvAddNewTaskToReadyList>
 8004002:	e001      	b.n	8004008 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004004:	2300      	movs	r3, #0
 8004006:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004008:	697b      	ldr	r3, [r7, #20]
	}
 800400a:	4618      	mov	r0, r3
 800400c:	3728      	adds	r7, #40	; 0x28
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004012:	b580      	push	{r7, lr}
 8004014:	b08c      	sub	sp, #48	; 0x30
 8004016:	af04      	add	r7, sp, #16
 8004018:	60f8      	str	r0, [r7, #12]
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	603b      	str	r3, [r7, #0]
 800401e:	4613      	mov	r3, r2
 8004020:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004022:	88fb      	ldrh	r3, [r7, #6]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4618      	mov	r0, r3
 8004028:	f000 fdd2 	bl	8004bd0 <pvPortMalloc>
 800402c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00e      	beq.n	8004052 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004034:	2054      	movs	r0, #84	; 0x54
 8004036:	f000 fdcb 	bl	8004bd0 <pvPortMalloc>
 800403a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	631a      	str	r2, [r3, #48]	; 0x30
 8004048:	e005      	b.n	8004056 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800404a:	6978      	ldr	r0, [r7, #20]
 800404c:	f000 fe84 	bl	8004d58 <vPortFree>
 8004050:	e001      	b.n	8004056 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004052:	2300      	movs	r3, #0
 8004054:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d017      	beq.n	800408c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004064:	88fa      	ldrh	r2, [r7, #6]
 8004066:	2300      	movs	r3, #0
 8004068:	9303      	str	r3, [sp, #12]
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	9302      	str	r3, [sp, #8]
 800406e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004070:	9301      	str	r3, [sp, #4]
 8004072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	68b9      	ldr	r1, [r7, #8]
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 f80e 	bl	800409c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004080:	69f8      	ldr	r0, [r7, #28]
 8004082:	f000 f88b 	bl	800419c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004086:	2301      	movs	r3, #1
 8004088:	61bb      	str	r3, [r7, #24]
 800408a:	e002      	b.n	8004092 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800408c:	f04f 33ff 	mov.w	r3, #4294967295
 8004090:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004092:	69bb      	ldr	r3, [r7, #24]
	}
 8004094:	4618      	mov	r0, r3
 8004096:	3720      	adds	r7, #32
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b088      	sub	sp, #32
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
 80040a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80040aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040b4:	3b01      	subs	r3, #1
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	f023 0307 	bic.w	r3, r3, #7
 80040c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80040ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	617b      	str	r3, [r7, #20]
}
 80040e0:	bf00      	nop
 80040e2:	e7fe      	b.n	80040e2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040e4:	2300      	movs	r3, #0
 80040e6:	61fb      	str	r3, [r7, #28]
 80040e8:	e012      	b.n	8004110 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	4413      	add	r3, r2
 80040f0:	7819      	ldrb	r1, [r3, #0]
 80040f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	4413      	add	r3, r2
 80040f8:	3334      	adds	r3, #52	; 0x34
 80040fa:	460a      	mov	r2, r1
 80040fc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	4413      	add	r3, r2
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d006      	beq.n	8004118 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	3301      	adds	r3, #1
 800410e:	61fb      	str	r3, [r7, #28]
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	2b0f      	cmp	r3, #15
 8004114:	d9e9      	bls.n	80040ea <prvInitialiseNewTask+0x4e>
 8004116:	e000      	b.n	800411a <prvInitialiseNewTask+0x7e>
		{
			break;
 8004118:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800411a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004124:	2b06      	cmp	r3, #6
 8004126:	d901      	bls.n	800412c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004128:	2306      	movs	r3, #6
 800412a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800412c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004130:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004134:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004136:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413a:	2200      	movs	r2, #0
 800413c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800413e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004140:	3304      	adds	r3, #4
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff feb1 	bl	8003eaa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414a:	3318      	adds	r3, #24
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff feac 	bl	8003eaa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004156:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415a:	f1c3 0207 	rsb	r2, r3, #7
 800415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004160:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004166:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416a:	2200      	movs	r2, #0
 800416c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800416e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	68f9      	ldr	r1, [r7, #12]
 800417a:	69b8      	ldr	r0, [r7, #24]
 800417c:	f000 fb74 	bl	8004868 <pxPortInitialiseStack>
 8004180:	4602      	mov	r2, r0
 8004182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004184:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800418c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004190:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004192:	bf00      	nop
 8004194:	3720      	adds	r7, #32
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
	...

0800419c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80041a4:	f000 fc52 	bl	8004a4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80041a8:	4b2a      	ldr	r3, [pc, #168]	; (8004254 <prvAddNewTaskToReadyList+0xb8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3301      	adds	r3, #1
 80041ae:	4a29      	ldr	r2, [pc, #164]	; (8004254 <prvAddNewTaskToReadyList+0xb8>)
 80041b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80041b2:	4b29      	ldr	r3, [pc, #164]	; (8004258 <prvAddNewTaskToReadyList+0xbc>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d109      	bne.n	80041ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80041ba:	4a27      	ldr	r2, [pc, #156]	; (8004258 <prvAddNewTaskToReadyList+0xbc>)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80041c0:	4b24      	ldr	r3, [pc, #144]	; (8004254 <prvAddNewTaskToReadyList+0xb8>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d110      	bne.n	80041ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80041c8:	f000 fa8c 	bl	80046e4 <prvInitialiseTaskLists>
 80041cc:	e00d      	b.n	80041ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80041ce:	4b23      	ldr	r3, [pc, #140]	; (800425c <prvAddNewTaskToReadyList+0xc0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d109      	bne.n	80041ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80041d6:	4b20      	ldr	r3, [pc, #128]	; (8004258 <prvAddNewTaskToReadyList+0xbc>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d802      	bhi.n	80041ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80041e4:	4a1c      	ldr	r2, [pc, #112]	; (8004258 <prvAddNewTaskToReadyList+0xbc>)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80041ea:	4b1d      	ldr	r3, [pc, #116]	; (8004260 <prvAddNewTaskToReadyList+0xc4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	3301      	adds	r3, #1
 80041f0:	4a1b      	ldr	r2, [pc, #108]	; (8004260 <prvAddNewTaskToReadyList+0xc4>)
 80041f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f8:	2201      	movs	r2, #1
 80041fa:	409a      	lsls	r2, r3
 80041fc:	4b19      	ldr	r3, [pc, #100]	; (8004264 <prvAddNewTaskToReadyList+0xc8>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4313      	orrs	r3, r2
 8004202:	4a18      	ldr	r2, [pc, #96]	; (8004264 <prvAddNewTaskToReadyList+0xc8>)
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800420a:	4613      	mov	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4a15      	ldr	r2, [pc, #84]	; (8004268 <prvAddNewTaskToReadyList+0xcc>)
 8004214:	441a      	add	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	3304      	adds	r3, #4
 800421a:	4619      	mov	r1, r3
 800421c:	4610      	mov	r0, r2
 800421e:	f7ff fe50 	bl	8003ec2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004222:	f000 fc43 	bl	8004aac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004226:	4b0d      	ldr	r3, [pc, #52]	; (800425c <prvAddNewTaskToReadyList+0xc0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00e      	beq.n	800424c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800422e:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <prvAddNewTaskToReadyList+0xbc>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004238:	429a      	cmp	r2, r3
 800423a:	d207      	bcs.n	800424c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800423c:	4b0b      	ldr	r3, [pc, #44]	; (800426c <prvAddNewTaskToReadyList+0xd0>)
 800423e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800424c:	bf00      	nop
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	20000580 	.word	0x20000580
 8004258:	20000480 	.word	0x20000480
 800425c:	2000058c 	.word	0x2000058c
 8004260:	2000059c 	.word	0x2000059c
 8004264:	20000588 	.word	0x20000588
 8004268:	20000484 	.word	0x20000484
 800426c:	e000ed04 	.word	0xe000ed04

08004270 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08a      	sub	sp, #40	; 0x28
 8004274:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004276:	2300      	movs	r3, #0
 8004278:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800427a:	2300      	movs	r3, #0
 800427c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800427e:	463a      	mov	r2, r7
 8004280:	1d39      	adds	r1, r7, #4
 8004282:	f107 0308 	add.w	r3, r7, #8
 8004286:	4618      	mov	r0, r3
 8004288:	f7fc ff4a 	bl	8001120 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800428c:	6839      	ldr	r1, [r7, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	9202      	str	r2, [sp, #8]
 8004294:	9301      	str	r3, [sp, #4]
 8004296:	2300      	movs	r3, #0
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	2300      	movs	r3, #0
 800429c:	460a      	mov	r2, r1
 800429e:	491e      	ldr	r1, [pc, #120]	; (8004318 <vTaskStartScheduler+0xa8>)
 80042a0:	481e      	ldr	r0, [pc, #120]	; (800431c <vTaskStartScheduler+0xac>)
 80042a2:	f7ff fe5a 	bl	8003f5a <xTaskCreateStatic>
 80042a6:	4603      	mov	r3, r0
 80042a8:	4a1d      	ldr	r2, [pc, #116]	; (8004320 <vTaskStartScheduler+0xb0>)
 80042aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042ac:	4b1c      	ldr	r3, [pc, #112]	; (8004320 <vTaskStartScheduler+0xb0>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d002      	beq.n	80042ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80042b4:	2301      	movs	r3, #1
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	e001      	b.n	80042be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d116      	bne.n	80042f2 <vTaskStartScheduler+0x82>
	__asm volatile
 80042c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	613b      	str	r3, [r7, #16]
}
 80042d6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80042d8:	4b12      	ldr	r3, [pc, #72]	; (8004324 <vTaskStartScheduler+0xb4>)
 80042da:	f04f 32ff 	mov.w	r2, #4294967295
 80042de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042e0:	4b11      	ldr	r3, [pc, #68]	; (8004328 <vTaskStartScheduler+0xb8>)
 80042e2:	2201      	movs	r2, #1
 80042e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80042e6:	4b11      	ldr	r3, [pc, #68]	; (800432c <vTaskStartScheduler+0xbc>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80042ec:	f000 fb3c 	bl	8004968 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80042f0:	e00e      	b.n	8004310 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f8:	d10a      	bne.n	8004310 <vTaskStartScheduler+0xa0>
	__asm volatile
 80042fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fe:	f383 8811 	msr	BASEPRI, r3
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	60fb      	str	r3, [r7, #12]
}
 800430c:	bf00      	nop
 800430e:	e7fe      	b.n	800430e <vTaskStartScheduler+0x9e>
}
 8004310:	bf00      	nop
 8004312:	3718      	adds	r7, #24
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	0800674c 	.word	0x0800674c
 800431c:	080046b5 	.word	0x080046b5
 8004320:	200005a4 	.word	0x200005a4
 8004324:	200005a0 	.word	0x200005a0
 8004328:	2000058c 	.word	0x2000058c
 800432c:	20000584 	.word	0x20000584

08004330 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004334:	4b04      	ldr	r3, [pc, #16]	; (8004348 <vTaskSuspendAll+0x18>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3301      	adds	r3, #1
 800433a:	4a03      	ldr	r2, [pc, #12]	; (8004348 <vTaskSuspendAll+0x18>)
 800433c:	6013      	str	r3, [r2, #0]
}
 800433e:	bf00      	nop
 8004340:	46bd      	mov	sp, r7
 8004342:	bc80      	pop	{r7}
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	200005a8 	.word	0x200005a8

0800434c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004356:	2300      	movs	r3, #0
 8004358:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800435a:	4b41      	ldr	r3, [pc, #260]	; (8004460 <xTaskResumeAll+0x114>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10a      	bne.n	8004378 <xTaskResumeAll+0x2c>
	__asm volatile
 8004362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004366:	f383 8811 	msr	BASEPRI, r3
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	f3bf 8f4f 	dsb	sy
 8004372:	603b      	str	r3, [r7, #0]
}
 8004374:	bf00      	nop
 8004376:	e7fe      	b.n	8004376 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004378:	f000 fb68 	bl	8004a4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800437c:	4b38      	ldr	r3, [pc, #224]	; (8004460 <xTaskResumeAll+0x114>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3b01      	subs	r3, #1
 8004382:	4a37      	ldr	r2, [pc, #220]	; (8004460 <xTaskResumeAll+0x114>)
 8004384:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004386:	4b36      	ldr	r3, [pc, #216]	; (8004460 <xTaskResumeAll+0x114>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d161      	bne.n	8004452 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800438e:	4b35      	ldr	r3, [pc, #212]	; (8004464 <xTaskResumeAll+0x118>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d05d      	beq.n	8004452 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004396:	e02e      	b.n	80043f6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004398:	4b33      	ldr	r3, [pc, #204]	; (8004468 <xTaskResumeAll+0x11c>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	3318      	adds	r3, #24
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff fdaf 	bl	8003f08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3304      	adds	r3, #4
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff fdaa 	bl	8003f08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	2201      	movs	r2, #1
 80043ba:	409a      	lsls	r2, r3
 80043bc:	4b2b      	ldr	r3, [pc, #172]	; (800446c <xTaskResumeAll+0x120>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	4a2a      	ldr	r2, [pc, #168]	; (800446c <xTaskResumeAll+0x120>)
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ca:	4613      	mov	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4a27      	ldr	r2, [pc, #156]	; (8004470 <xTaskResumeAll+0x124>)
 80043d4:	441a      	add	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	3304      	adds	r3, #4
 80043da:	4619      	mov	r1, r3
 80043dc:	4610      	mov	r0, r2
 80043de:	f7ff fd70 	bl	8003ec2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e6:	4b23      	ldr	r3, [pc, #140]	; (8004474 <xTaskResumeAll+0x128>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d302      	bcc.n	80043f6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80043f0:	4b21      	ldr	r3, [pc, #132]	; (8004478 <xTaskResumeAll+0x12c>)
 80043f2:	2201      	movs	r2, #1
 80043f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043f6:	4b1c      	ldr	r3, [pc, #112]	; (8004468 <xTaskResumeAll+0x11c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1cc      	bne.n	8004398 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004404:	f000 fa0c 	bl	8004820 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004408:	4b1c      	ldr	r3, [pc, #112]	; (800447c <xTaskResumeAll+0x130>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d010      	beq.n	8004436 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004414:	f000 f836 	bl	8004484 <xTaskIncrementTick>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800441e:	4b16      	ldr	r3, [pc, #88]	; (8004478 <xTaskResumeAll+0x12c>)
 8004420:	2201      	movs	r2, #1
 8004422:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3b01      	subs	r3, #1
 8004428:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1f1      	bne.n	8004414 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004430:	4b12      	ldr	r3, [pc, #72]	; (800447c <xTaskResumeAll+0x130>)
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004436:	4b10      	ldr	r3, [pc, #64]	; (8004478 <xTaskResumeAll+0x12c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d009      	beq.n	8004452 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800443e:	2301      	movs	r3, #1
 8004440:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004442:	4b0f      	ldr	r3, [pc, #60]	; (8004480 <xTaskResumeAll+0x134>)
 8004444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004452:	f000 fb2b 	bl	8004aac <vPortExitCritical>

	return xAlreadyYielded;
 8004456:	68bb      	ldr	r3, [r7, #8]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	200005a8 	.word	0x200005a8
 8004464:	20000580 	.word	0x20000580
 8004468:	20000540 	.word	0x20000540
 800446c:	20000588 	.word	0x20000588
 8004470:	20000484 	.word	0x20000484
 8004474:	20000480 	.word	0x20000480
 8004478:	20000594 	.word	0x20000594
 800447c:	20000590 	.word	0x20000590
 8004480:	e000ed04 	.word	0xe000ed04

08004484 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800448a:	2300      	movs	r3, #0
 800448c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800448e:	4b51      	ldr	r3, [pc, #324]	; (80045d4 <xTaskIncrementTick+0x150>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	f040 808d 	bne.w	80045b2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004498:	4b4f      	ldr	r3, [pc, #316]	; (80045d8 <xTaskIncrementTick+0x154>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3301      	adds	r3, #1
 800449e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80044a0:	4a4d      	ldr	r2, [pc, #308]	; (80045d8 <xTaskIncrementTick+0x154>)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d120      	bne.n	80044ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80044ac:	4b4b      	ldr	r3, [pc, #300]	; (80045dc <xTaskIncrementTick+0x158>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <xTaskIncrementTick+0x48>
	__asm volatile
 80044b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ba:	f383 8811 	msr	BASEPRI, r3
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	f3bf 8f4f 	dsb	sy
 80044c6:	603b      	str	r3, [r7, #0]
}
 80044c8:	bf00      	nop
 80044ca:	e7fe      	b.n	80044ca <xTaskIncrementTick+0x46>
 80044cc:	4b43      	ldr	r3, [pc, #268]	; (80045dc <xTaskIncrementTick+0x158>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	4b43      	ldr	r3, [pc, #268]	; (80045e0 <xTaskIncrementTick+0x15c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a41      	ldr	r2, [pc, #260]	; (80045dc <xTaskIncrementTick+0x158>)
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	4a41      	ldr	r2, [pc, #260]	; (80045e0 <xTaskIncrementTick+0x15c>)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	4b40      	ldr	r3, [pc, #256]	; (80045e4 <xTaskIncrementTick+0x160>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	3301      	adds	r3, #1
 80044e6:	4a3f      	ldr	r2, [pc, #252]	; (80045e4 <xTaskIncrementTick+0x160>)
 80044e8:	6013      	str	r3, [r2, #0]
 80044ea:	f000 f999 	bl	8004820 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80044ee:	4b3e      	ldr	r3, [pc, #248]	; (80045e8 <xTaskIncrementTick+0x164>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d34d      	bcc.n	8004594 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044f8:	4b38      	ldr	r3, [pc, #224]	; (80045dc <xTaskIncrementTick+0x158>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <xTaskIncrementTick+0x82>
 8004502:	2301      	movs	r3, #1
 8004504:	e000      	b.n	8004508 <xTaskIncrementTick+0x84>
 8004506:	2300      	movs	r3, #0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d004      	beq.n	8004516 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800450c:	4b36      	ldr	r3, [pc, #216]	; (80045e8 <xTaskIncrementTick+0x164>)
 800450e:	f04f 32ff 	mov.w	r2, #4294967295
 8004512:	601a      	str	r2, [r3, #0]
					break;
 8004514:	e03e      	b.n	8004594 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004516:	4b31      	ldr	r3, [pc, #196]	; (80045dc <xTaskIncrementTick+0x158>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	429a      	cmp	r2, r3
 800452c:	d203      	bcs.n	8004536 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800452e:	4a2e      	ldr	r2, [pc, #184]	; (80045e8 <xTaskIncrementTick+0x164>)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6013      	str	r3, [r2, #0]
						break;
 8004534:	e02e      	b.n	8004594 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	3304      	adds	r3, #4
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff fce4 	bl	8003f08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004544:	2b00      	cmp	r3, #0
 8004546:	d004      	beq.n	8004552 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	3318      	adds	r3, #24
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff fcdb 	bl	8003f08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004556:	2201      	movs	r2, #1
 8004558:	409a      	lsls	r2, r3
 800455a:	4b24      	ldr	r3, [pc, #144]	; (80045ec <xTaskIncrementTick+0x168>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4313      	orrs	r3, r2
 8004560:	4a22      	ldr	r2, [pc, #136]	; (80045ec <xTaskIncrementTick+0x168>)
 8004562:	6013      	str	r3, [r2, #0]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004568:	4613      	mov	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4a1f      	ldr	r2, [pc, #124]	; (80045f0 <xTaskIncrementTick+0x16c>)
 8004572:	441a      	add	r2, r3
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	3304      	adds	r3, #4
 8004578:	4619      	mov	r1, r3
 800457a:	4610      	mov	r0, r2
 800457c:	f7ff fca1 	bl	8003ec2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004584:	4b1b      	ldr	r3, [pc, #108]	; (80045f4 <xTaskIncrementTick+0x170>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458a:	429a      	cmp	r2, r3
 800458c:	d3b4      	bcc.n	80044f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800458e:	2301      	movs	r3, #1
 8004590:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004592:	e7b1      	b.n	80044f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004594:	4b17      	ldr	r3, [pc, #92]	; (80045f4 <xTaskIncrementTick+0x170>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800459a:	4915      	ldr	r1, [pc, #84]	; (80045f0 <xTaskIncrementTick+0x16c>)
 800459c:	4613      	mov	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	440b      	add	r3, r1
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d907      	bls.n	80045bc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80045ac:	2301      	movs	r3, #1
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	e004      	b.n	80045bc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80045b2:	4b11      	ldr	r3, [pc, #68]	; (80045f8 <xTaskIncrementTick+0x174>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	3301      	adds	r3, #1
 80045b8:	4a0f      	ldr	r2, [pc, #60]	; (80045f8 <xTaskIncrementTick+0x174>)
 80045ba:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80045bc:	4b0f      	ldr	r3, [pc, #60]	; (80045fc <xTaskIncrementTick+0x178>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80045c4:	2301      	movs	r3, #1
 80045c6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80045c8:	697b      	ldr	r3, [r7, #20]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	200005a8 	.word	0x200005a8
 80045d8:	20000584 	.word	0x20000584
 80045dc:	20000538 	.word	0x20000538
 80045e0:	2000053c 	.word	0x2000053c
 80045e4:	20000598 	.word	0x20000598
 80045e8:	200005a0 	.word	0x200005a0
 80045ec:	20000588 	.word	0x20000588
 80045f0:	20000484 	.word	0x20000484
 80045f4:	20000480 	.word	0x20000480
 80045f8:	20000590 	.word	0x20000590
 80045fc:	20000594 	.word	0x20000594

08004600 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004606:	4b26      	ldr	r3, [pc, #152]	; (80046a0 <vTaskSwitchContext+0xa0>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800460e:	4b25      	ldr	r3, [pc, #148]	; (80046a4 <vTaskSwitchContext+0xa4>)
 8004610:	2201      	movs	r2, #1
 8004612:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004614:	e03f      	b.n	8004696 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004616:	4b23      	ldr	r3, [pc, #140]	; (80046a4 <vTaskSwitchContext+0xa4>)
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800461c:	4b22      	ldr	r3, [pc, #136]	; (80046a8 <vTaskSwitchContext+0xa8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	fab3 f383 	clz	r3, r3
 8004628:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800462a:	7afb      	ldrb	r3, [r7, #11]
 800462c:	f1c3 031f 	rsb	r3, r3, #31
 8004630:	617b      	str	r3, [r7, #20]
 8004632:	491e      	ldr	r1, [pc, #120]	; (80046ac <vTaskSwitchContext+0xac>)
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	4613      	mov	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	440b      	add	r3, r1
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10a      	bne.n	800465c <vTaskSwitchContext+0x5c>
	__asm volatile
 8004646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464a:	f383 8811 	msr	BASEPRI, r3
 800464e:	f3bf 8f6f 	isb	sy
 8004652:	f3bf 8f4f 	dsb	sy
 8004656:	607b      	str	r3, [r7, #4]
}
 8004658:	bf00      	nop
 800465a:	e7fe      	b.n	800465a <vTaskSwitchContext+0x5a>
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	4613      	mov	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4a11      	ldr	r2, [pc, #68]	; (80046ac <vTaskSwitchContext+0xac>)
 8004668:	4413      	add	r3, r2
 800466a:	613b      	str	r3, [r7, #16]
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	605a      	str	r2, [r3, #4]
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	3308      	adds	r3, #8
 800467e:	429a      	cmp	r2, r3
 8004680:	d104      	bne.n	800468c <vTaskSwitchContext+0x8c>
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	605a      	str	r2, [r3, #4]
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	4a07      	ldr	r2, [pc, #28]	; (80046b0 <vTaskSwitchContext+0xb0>)
 8004694:	6013      	str	r3, [r2, #0]
}
 8004696:	bf00      	nop
 8004698:	371c      	adds	r7, #28
 800469a:	46bd      	mov	sp, r7
 800469c:	bc80      	pop	{r7}
 800469e:	4770      	bx	lr
 80046a0:	200005a8 	.word	0x200005a8
 80046a4:	20000594 	.word	0x20000594
 80046a8:	20000588 	.word	0x20000588
 80046ac:	20000484 	.word	0x20000484
 80046b0:	20000480 	.word	0x20000480

080046b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80046bc:	f000 f852 	bl	8004764 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80046c0:	4b06      	ldr	r3, [pc, #24]	; (80046dc <prvIdleTask+0x28>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d9f9      	bls.n	80046bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80046c8:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <prvIdleTask+0x2c>)
 80046ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80046d8:	e7f0      	b.n	80046bc <prvIdleTask+0x8>
 80046da:	bf00      	nop
 80046dc:	20000484 	.word	0x20000484
 80046e0:	e000ed04 	.word	0xe000ed04

080046e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046ea:	2300      	movs	r3, #0
 80046ec:	607b      	str	r3, [r7, #4]
 80046ee:	e00c      	b.n	800470a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4a12      	ldr	r2, [pc, #72]	; (8004744 <prvInitialiseTaskLists+0x60>)
 80046fc:	4413      	add	r3, r2
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff fbb4 	bl	8003e6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3301      	adds	r3, #1
 8004708:	607b      	str	r3, [r7, #4]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b06      	cmp	r3, #6
 800470e:	d9ef      	bls.n	80046f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004710:	480d      	ldr	r0, [pc, #52]	; (8004748 <prvInitialiseTaskLists+0x64>)
 8004712:	f7ff fbab 	bl	8003e6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004716:	480d      	ldr	r0, [pc, #52]	; (800474c <prvInitialiseTaskLists+0x68>)
 8004718:	f7ff fba8 	bl	8003e6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800471c:	480c      	ldr	r0, [pc, #48]	; (8004750 <prvInitialiseTaskLists+0x6c>)
 800471e:	f7ff fba5 	bl	8003e6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004722:	480c      	ldr	r0, [pc, #48]	; (8004754 <prvInitialiseTaskLists+0x70>)
 8004724:	f7ff fba2 	bl	8003e6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004728:	480b      	ldr	r0, [pc, #44]	; (8004758 <prvInitialiseTaskLists+0x74>)
 800472a:	f7ff fb9f 	bl	8003e6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800472e:	4b0b      	ldr	r3, [pc, #44]	; (800475c <prvInitialiseTaskLists+0x78>)
 8004730:	4a05      	ldr	r2, [pc, #20]	; (8004748 <prvInitialiseTaskLists+0x64>)
 8004732:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004734:	4b0a      	ldr	r3, [pc, #40]	; (8004760 <prvInitialiseTaskLists+0x7c>)
 8004736:	4a05      	ldr	r2, [pc, #20]	; (800474c <prvInitialiseTaskLists+0x68>)
 8004738:	601a      	str	r2, [r3, #0]
}
 800473a:	bf00      	nop
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	20000484 	.word	0x20000484
 8004748:	20000510 	.word	0x20000510
 800474c:	20000524 	.word	0x20000524
 8004750:	20000540 	.word	0x20000540
 8004754:	20000554 	.word	0x20000554
 8004758:	2000056c 	.word	0x2000056c
 800475c:	20000538 	.word	0x20000538
 8004760:	2000053c 	.word	0x2000053c

08004764 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800476a:	e019      	b.n	80047a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800476c:	f000 f96e 	bl	8004a4c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004770:	4b10      	ldr	r3, [pc, #64]	; (80047b4 <prvCheckTasksWaitingTermination+0x50>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3304      	adds	r3, #4
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff fbc3 	bl	8003f08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004782:	4b0d      	ldr	r3, [pc, #52]	; (80047b8 <prvCheckTasksWaitingTermination+0x54>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	3b01      	subs	r3, #1
 8004788:	4a0b      	ldr	r2, [pc, #44]	; (80047b8 <prvCheckTasksWaitingTermination+0x54>)
 800478a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800478c:	4b0b      	ldr	r3, [pc, #44]	; (80047bc <prvCheckTasksWaitingTermination+0x58>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	3b01      	subs	r3, #1
 8004792:	4a0a      	ldr	r2, [pc, #40]	; (80047bc <prvCheckTasksWaitingTermination+0x58>)
 8004794:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004796:	f000 f989 	bl	8004aac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f810 	bl	80047c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047a0:	4b06      	ldr	r3, [pc, #24]	; (80047bc <prvCheckTasksWaitingTermination+0x58>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1e1      	bne.n	800476c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80047a8:	bf00      	nop
 80047aa:	bf00      	nop
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	20000554 	.word	0x20000554
 80047b8:	20000580 	.word	0x20000580
 80047bc:	20000568 	.word	0x20000568

080047c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d108      	bne.n	80047e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 fabe 	bl	8004d58 <vPortFree>
				vPortFree( pxTCB );
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 fabb 	bl	8004d58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80047e2:	e018      	b.n	8004816 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d103      	bne.n	80047f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 fab2 	bl	8004d58 <vPortFree>
	}
 80047f4:	e00f      	b.n	8004816 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d00a      	beq.n	8004816 <prvDeleteTCB+0x56>
	__asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	60fb      	str	r3, [r7, #12]
}
 8004812:	bf00      	nop
 8004814:	e7fe      	b.n	8004814 <prvDeleteTCB+0x54>
	}
 8004816:	bf00      	nop
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
	...

08004820 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004826:	4b0e      	ldr	r3, [pc, #56]	; (8004860 <prvResetNextTaskUnblockTime+0x40>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <prvResetNextTaskUnblockTime+0x14>
 8004830:	2301      	movs	r3, #1
 8004832:	e000      	b.n	8004836 <prvResetNextTaskUnblockTime+0x16>
 8004834:	2300      	movs	r3, #0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d004      	beq.n	8004844 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800483a:	4b0a      	ldr	r3, [pc, #40]	; (8004864 <prvResetNextTaskUnblockTime+0x44>)
 800483c:	f04f 32ff 	mov.w	r2, #4294967295
 8004840:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004842:	e008      	b.n	8004856 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004844:	4b06      	ldr	r3, [pc, #24]	; (8004860 <prvResetNextTaskUnblockTime+0x40>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	4a04      	ldr	r2, [pc, #16]	; (8004864 <prvResetNextTaskUnblockTime+0x44>)
 8004854:	6013      	str	r3, [r2, #0]
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr
 8004860:	20000538 	.word	0x20000538
 8004864:	200005a0 	.word	0x200005a0

08004868 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	3b04      	subs	r3, #4
 8004878:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004880:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	3b04      	subs	r3, #4
 8004886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f023 0201 	bic.w	r2, r3, #1
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	3b04      	subs	r3, #4
 8004896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004898:	4a08      	ldr	r2, [pc, #32]	; (80048bc <pxPortInitialiseStack+0x54>)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	3b14      	subs	r3, #20
 80048a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	3b20      	subs	r3, #32
 80048ae:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80048b0:	68fb      	ldr	r3, [r7, #12]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bc80      	pop	{r7}
 80048ba:	4770      	bx	lr
 80048bc:	080048c1 	.word	0x080048c1

080048c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80048c6:	2300      	movs	r3, #0
 80048c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80048ca:	4b12      	ldr	r3, [pc, #72]	; (8004914 <prvTaskExitError+0x54>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d2:	d00a      	beq.n	80048ea <prvTaskExitError+0x2a>
	__asm volatile
 80048d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	60fb      	str	r3, [r7, #12]
}
 80048e6:	bf00      	nop
 80048e8:	e7fe      	b.n	80048e8 <prvTaskExitError+0x28>
	__asm volatile
 80048ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	60bb      	str	r3, [r7, #8]
}
 80048fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80048fe:	bf00      	nop
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0fc      	beq.n	8004900 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004906:	bf00      	nop
 8004908:	bf00      	nop
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	bc80      	pop	{r7}
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	20000018 	.word	0x20000018
	...

08004920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004920:	4b07      	ldr	r3, [pc, #28]	; (8004940 <pxCurrentTCBConst2>)
 8004922:	6819      	ldr	r1, [r3, #0]
 8004924:	6808      	ldr	r0, [r1, #0]
 8004926:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800492a:	f380 8809 	msr	PSP, r0
 800492e:	f3bf 8f6f 	isb	sy
 8004932:	f04f 0000 	mov.w	r0, #0
 8004936:	f380 8811 	msr	BASEPRI, r0
 800493a:	f04e 0e0d 	orr.w	lr, lr, #13
 800493e:	4770      	bx	lr

08004940 <pxCurrentTCBConst2>:
 8004940:	20000480 	.word	0x20000480
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004944:	bf00      	nop
 8004946:	bf00      	nop

08004948 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004948:	4806      	ldr	r0, [pc, #24]	; (8004964 <prvPortStartFirstTask+0x1c>)
 800494a:	6800      	ldr	r0, [r0, #0]
 800494c:	6800      	ldr	r0, [r0, #0]
 800494e:	f380 8808 	msr	MSP, r0
 8004952:	b662      	cpsie	i
 8004954:	b661      	cpsie	f
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	df00      	svc	0
 8004960:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004962:	bf00      	nop
 8004964:	e000ed08 	.word	0xe000ed08

08004968 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800496e:	4b32      	ldr	r3, [pc, #200]	; (8004a38 <xPortStartScheduler+0xd0>)
 8004970:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	b2db      	uxtb	r3, r3
 8004978:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	22ff      	movs	r2, #255	; 0xff
 800497e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	b2db      	uxtb	r3, r3
 8004986:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004988:	78fb      	ldrb	r3, [r7, #3]
 800498a:	b2db      	uxtb	r3, r3
 800498c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004990:	b2da      	uxtb	r2, r3
 8004992:	4b2a      	ldr	r3, [pc, #168]	; (8004a3c <xPortStartScheduler+0xd4>)
 8004994:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004996:	4b2a      	ldr	r3, [pc, #168]	; (8004a40 <xPortStartScheduler+0xd8>)
 8004998:	2207      	movs	r2, #7
 800499a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800499c:	e009      	b.n	80049b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800499e:	4b28      	ldr	r3, [pc, #160]	; (8004a40 <xPortStartScheduler+0xd8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3b01      	subs	r3, #1
 80049a4:	4a26      	ldr	r2, [pc, #152]	; (8004a40 <xPortStartScheduler+0xd8>)
 80049a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80049a8:	78fb      	ldrb	r3, [r7, #3]
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049b2:	78fb      	ldrb	r3, [r7, #3]
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ba:	2b80      	cmp	r3, #128	; 0x80
 80049bc:	d0ef      	beq.n	800499e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80049be:	4b20      	ldr	r3, [pc, #128]	; (8004a40 <xPortStartScheduler+0xd8>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f1c3 0307 	rsb	r3, r3, #7
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d00a      	beq.n	80049e0 <xPortStartScheduler+0x78>
	__asm volatile
 80049ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ce:	f383 8811 	msr	BASEPRI, r3
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	60bb      	str	r3, [r7, #8]
}
 80049dc:	bf00      	nop
 80049de:	e7fe      	b.n	80049de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80049e0:	4b17      	ldr	r3, [pc, #92]	; (8004a40 <xPortStartScheduler+0xd8>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	021b      	lsls	r3, r3, #8
 80049e6:	4a16      	ldr	r2, [pc, #88]	; (8004a40 <xPortStartScheduler+0xd8>)
 80049e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80049ea:	4b15      	ldr	r3, [pc, #84]	; (8004a40 <xPortStartScheduler+0xd8>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049f2:	4a13      	ldr	r2, [pc, #76]	; (8004a40 <xPortStartScheduler+0xd8>)
 80049f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80049fe:	4b11      	ldr	r3, [pc, #68]	; (8004a44 <xPortStartScheduler+0xdc>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a10      	ldr	r2, [pc, #64]	; (8004a44 <xPortStartScheduler+0xdc>)
 8004a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a0a:	4b0e      	ldr	r3, [pc, #56]	; (8004a44 <xPortStartScheduler+0xdc>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a0d      	ldr	r2, [pc, #52]	; (8004a44 <xPortStartScheduler+0xdc>)
 8004a10:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a14:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a16:	f000 f8b9 	bl	8004b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a1a:	4b0b      	ldr	r3, [pc, #44]	; (8004a48 <xPortStartScheduler+0xe0>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a20:	f7ff ff92 	bl	8004948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a24:	f7ff fdec 	bl	8004600 <vTaskSwitchContext>
	prvTaskExitError();
 8004a28:	f7ff ff4a 	bl	80048c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	e000e400 	.word	0xe000e400
 8004a3c:	200005ac 	.word	0x200005ac
 8004a40:	200005b0 	.word	0x200005b0
 8004a44:	e000ed20 	.word	0xe000ed20
 8004a48:	20000018 	.word	0x20000018

08004a4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
	__asm volatile
 8004a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	607b      	str	r3, [r7, #4]
}
 8004a64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a66:	4b0f      	ldr	r3, [pc, #60]	; (8004aa4 <vPortEnterCritical+0x58>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	4a0d      	ldr	r2, [pc, #52]	; (8004aa4 <vPortEnterCritical+0x58>)
 8004a6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a70:	4b0c      	ldr	r3, [pc, #48]	; (8004aa4 <vPortEnterCritical+0x58>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d10f      	bne.n	8004a98 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a78:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <vPortEnterCritical+0x5c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <vPortEnterCritical+0x4c>
	__asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	603b      	str	r3, [r7, #0]
}
 8004a94:	bf00      	nop
 8004a96:	e7fe      	b.n	8004a96 <vPortEnterCritical+0x4a>
	}
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	20000018 	.word	0x20000018
 8004aa8:	e000ed04 	.word	0xe000ed04

08004aac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ab2:	4b11      	ldr	r3, [pc, #68]	; (8004af8 <vPortExitCritical+0x4c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10a      	bne.n	8004ad0 <vPortExitCritical+0x24>
	__asm volatile
 8004aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abe:	f383 8811 	msr	BASEPRI, r3
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	607b      	str	r3, [r7, #4]
}
 8004acc:	bf00      	nop
 8004ace:	e7fe      	b.n	8004ace <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004ad0:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <vPortExitCritical+0x4c>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	4a08      	ldr	r2, [pc, #32]	; (8004af8 <vPortExitCritical+0x4c>)
 8004ad8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ada:	4b07      	ldr	r3, [pc, #28]	; (8004af8 <vPortExitCritical+0x4c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d105      	bne.n	8004aee <vPortExitCritical+0x42>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004aec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr
 8004af8:	20000018 	.word	0x20000018
 8004afc:	00000000 	.word	0x00000000

08004b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b00:	f3ef 8009 	mrs	r0, PSP
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	4b0d      	ldr	r3, [pc, #52]	; (8004b40 <pxCurrentTCBConst>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004b10:	6010      	str	r0, [r2, #0]
 8004b12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004b16:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004b1a:	f380 8811 	msr	BASEPRI, r0
 8004b1e:	f7ff fd6f 	bl	8004600 <vTaskSwitchContext>
 8004b22:	f04f 0000 	mov.w	r0, #0
 8004b26:	f380 8811 	msr	BASEPRI, r0
 8004b2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004b2e:	6819      	ldr	r1, [r3, #0]
 8004b30:	6808      	ldr	r0, [r1, #0]
 8004b32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004b36:	f380 8809 	msr	PSP, r0
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	4770      	bx	lr

08004b40 <pxCurrentTCBConst>:
 8004b40:	20000480 	.word	0x20000480
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b44:	bf00      	nop
 8004b46:	bf00      	nop

08004b48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b52:	f383 8811 	msr	BASEPRI, r3
 8004b56:	f3bf 8f6f 	isb	sy
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	607b      	str	r3, [r7, #4]
}
 8004b60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b62:	f7ff fc8f 	bl	8004484 <xTaskIncrementTick>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d003      	beq.n	8004b74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b6c:	4b06      	ldr	r3, [pc, #24]	; (8004b88 <SysTick_Handler+0x40>)
 8004b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	2300      	movs	r3, #0
 8004b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	f383 8811 	msr	BASEPRI, r3
}
 8004b7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b80:	bf00      	nop
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	e000ed04 	.word	0xe000ed04

08004b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b90:	4b0a      	ldr	r3, [pc, #40]	; (8004bbc <vPortSetupTimerInterrupt+0x30>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b96:	4b0a      	ldr	r3, [pc, #40]	; (8004bc0 <vPortSetupTimerInterrupt+0x34>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b9c:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <vPortSetupTimerInterrupt+0x38>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a09      	ldr	r2, [pc, #36]	; (8004bc8 <vPortSetupTimerInterrupt+0x3c>)
 8004ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba6:	099b      	lsrs	r3, r3, #6
 8004ba8:	4a08      	ldr	r2, [pc, #32]	; (8004bcc <vPortSetupTimerInterrupt+0x40>)
 8004baa:	3b01      	subs	r3, #1
 8004bac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004bae:	4b03      	ldr	r3, [pc, #12]	; (8004bbc <vPortSetupTimerInterrupt+0x30>)
 8004bb0:	2207      	movs	r2, #7
 8004bb2:	601a      	str	r2, [r3, #0]
}
 8004bb4:	bf00      	nop
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr
 8004bbc:	e000e010 	.word	0xe000e010
 8004bc0:	e000e018 	.word	0xe000e018
 8004bc4:	2000000c 	.word	0x2000000c
 8004bc8:	10624dd3 	.word	0x10624dd3
 8004bcc:	e000e014 	.word	0xe000e014

08004bd0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08a      	sub	sp, #40	; 0x28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004bdc:	f7ff fba8 	bl	8004330 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004be0:	4b58      	ldr	r3, [pc, #352]	; (8004d44 <pvPortMalloc+0x174>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004be8:	f000 f910 	bl	8004e0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004bec:	4b56      	ldr	r3, [pc, #344]	; (8004d48 <pvPortMalloc+0x178>)
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f040 808e 	bne.w	8004d16 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d01d      	beq.n	8004c3c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004c00:	2208      	movs	r2, #8
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4413      	add	r3, r2
 8004c06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f003 0307 	and.w	r3, r3, #7
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d014      	beq.n	8004c3c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f023 0307 	bic.w	r3, r3, #7
 8004c18:	3308      	adds	r3, #8
 8004c1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <pvPortMalloc+0x6c>
	__asm volatile
 8004c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2a:	f383 8811 	msr	BASEPRI, r3
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	617b      	str	r3, [r7, #20]
}
 8004c38:	bf00      	nop
 8004c3a:	e7fe      	b.n	8004c3a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d069      	beq.n	8004d16 <pvPortMalloc+0x146>
 8004c42:	4b42      	ldr	r3, [pc, #264]	; (8004d4c <pvPortMalloc+0x17c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d864      	bhi.n	8004d16 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c4c:	4b40      	ldr	r3, [pc, #256]	; (8004d50 <pvPortMalloc+0x180>)
 8004c4e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c50:	4b3f      	ldr	r3, [pc, #252]	; (8004d50 <pvPortMalloc+0x180>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c56:	e004      	b.n	8004c62 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d903      	bls.n	8004c74 <pvPortMalloc+0xa4>
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1f1      	bne.n	8004c58 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c74:	4b33      	ldr	r3, [pc, #204]	; (8004d44 <pvPortMalloc+0x174>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d04b      	beq.n	8004d16 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2208      	movs	r2, #8
 8004c84:	4413      	add	r3, r2
 8004c86:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	685a      	ldr	r2, [r3, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	1ad2      	subs	r2, r2, r3
 8004c98:	2308      	movs	r3, #8
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d91f      	bls.n	8004ce0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <pvPortMalloc+0xf8>
	__asm volatile
 8004cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb6:	f383 8811 	msr	BASEPRI, r3
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	613b      	str	r3, [r7, #16]
}
 8004cc4:	bf00      	nop
 8004cc6:	e7fe      	b.n	8004cc6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	1ad2      	subs	r2, r2, r3
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004cda:	69b8      	ldr	r0, [r7, #24]
 8004cdc:	f000 f8f8 	bl	8004ed0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ce0:	4b1a      	ldr	r3, [pc, #104]	; (8004d4c <pvPortMalloc+0x17c>)
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	4a18      	ldr	r2, [pc, #96]	; (8004d4c <pvPortMalloc+0x17c>)
 8004cec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004cee:	4b17      	ldr	r3, [pc, #92]	; (8004d4c <pvPortMalloc+0x17c>)
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	4b18      	ldr	r3, [pc, #96]	; (8004d54 <pvPortMalloc+0x184>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d203      	bcs.n	8004d02 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004cfa:	4b14      	ldr	r3, [pc, #80]	; (8004d4c <pvPortMalloc+0x17c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a15      	ldr	r2, [pc, #84]	; (8004d54 <pvPortMalloc+0x184>)
 8004d00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	4b10      	ldr	r3, [pc, #64]	; (8004d48 <pvPortMalloc+0x178>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d16:	f7ff fb19 	bl	800434c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	f003 0307 	and.w	r3, r3, #7
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00a      	beq.n	8004d3a <pvPortMalloc+0x16a>
	__asm volatile
 8004d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d28:	f383 8811 	msr	BASEPRI, r3
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	60fb      	str	r3, [r7, #12]
}
 8004d36:	bf00      	nop
 8004d38:	e7fe      	b.n	8004d38 <pvPortMalloc+0x168>
	return pvReturn;
 8004d3a:	69fb      	ldr	r3, [r7, #28]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3728      	adds	r7, #40	; 0x28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	200011bc 	.word	0x200011bc
 8004d48:	200011c8 	.word	0x200011c8
 8004d4c:	200011c0 	.word	0x200011c0
 8004d50:	200011b4 	.word	0x200011b4
 8004d54:	200011c4 	.word	0x200011c4

08004d58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d048      	beq.n	8004dfc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d6a:	2308      	movs	r3, #8
 8004d6c:	425b      	negs	r3, r3
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	4413      	add	r3, r2
 8004d72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	4b21      	ldr	r3, [pc, #132]	; (8004e04 <vPortFree+0xac>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4013      	ands	r3, r2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10a      	bne.n	8004d9c <vPortFree+0x44>
	__asm volatile
 8004d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8a:	f383 8811 	msr	BASEPRI, r3
 8004d8e:	f3bf 8f6f 	isb	sy
 8004d92:	f3bf 8f4f 	dsb	sy
 8004d96:	60fb      	str	r3, [r7, #12]
}
 8004d98:	bf00      	nop
 8004d9a:	e7fe      	b.n	8004d9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00a      	beq.n	8004dba <vPortFree+0x62>
	__asm volatile
 8004da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	60bb      	str	r3, [r7, #8]
}
 8004db6:	bf00      	nop
 8004db8:	e7fe      	b.n	8004db8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	4b11      	ldr	r3, [pc, #68]	; (8004e04 <vPortFree+0xac>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d019      	beq.n	8004dfc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d115      	bne.n	8004dfc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <vPortFree+0xac>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	43db      	mvns	r3, r3
 8004dda:	401a      	ands	r2, r3
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004de0:	f7ff faa6 	bl	8004330 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	4b07      	ldr	r3, [pc, #28]	; (8004e08 <vPortFree+0xb0>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4413      	add	r3, r2
 8004dee:	4a06      	ldr	r2, [pc, #24]	; (8004e08 <vPortFree+0xb0>)
 8004df0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004df2:	6938      	ldr	r0, [r7, #16]
 8004df4:	f000 f86c 	bl	8004ed0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004df8:	f7ff faa8 	bl	800434c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004dfc:	bf00      	nop
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	200011c8 	.word	0x200011c8
 8004e08:	200011c0 	.word	0x200011c0

08004e0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e12:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004e16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e18:	4b27      	ldr	r3, [pc, #156]	; (8004eb8 <prvHeapInit+0xac>)
 8004e1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f003 0307 	and.w	r3, r3, #7
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00c      	beq.n	8004e40 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	3307      	adds	r3, #7
 8004e2a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 0307 	bic.w	r3, r3, #7
 8004e32:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	4a1f      	ldr	r2, [pc, #124]	; (8004eb8 <prvHeapInit+0xac>)
 8004e3c:	4413      	add	r3, r2
 8004e3e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e44:	4a1d      	ldr	r2, [pc, #116]	; (8004ebc <prvHeapInit+0xb0>)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e4a:	4b1c      	ldr	r3, [pc, #112]	; (8004ebc <prvHeapInit+0xb0>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	4413      	add	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e58:	2208      	movs	r2, #8
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	1a9b      	subs	r3, r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f023 0307 	bic.w	r3, r3, #7
 8004e66:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	4a15      	ldr	r2, [pc, #84]	; (8004ec0 <prvHeapInit+0xb4>)
 8004e6c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e6e:	4b14      	ldr	r3, [pc, #80]	; (8004ec0 <prvHeapInit+0xb4>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2200      	movs	r2, #0
 8004e74:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e76:	4b12      	ldr	r3, [pc, #72]	; (8004ec0 <prvHeapInit+0xb4>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	1ad2      	subs	r2, r2, r3
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e8c:	4b0c      	ldr	r3, [pc, #48]	; (8004ec0 <prvHeapInit+0xb4>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	4a0a      	ldr	r2, [pc, #40]	; (8004ec4 <prvHeapInit+0xb8>)
 8004e9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	4a09      	ldr	r2, [pc, #36]	; (8004ec8 <prvHeapInit+0xbc>)
 8004ea2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ea4:	4b09      	ldr	r3, [pc, #36]	; (8004ecc <prvHeapInit+0xc0>)
 8004ea6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004eaa:	601a      	str	r2, [r3, #0]
}
 8004eac:	bf00      	nop
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bc80      	pop	{r7}
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	200005b4 	.word	0x200005b4
 8004ebc:	200011b4 	.word	0x200011b4
 8004ec0:	200011bc 	.word	0x200011bc
 8004ec4:	200011c4 	.word	0x200011c4
 8004ec8:	200011c0 	.word	0x200011c0
 8004ecc:	200011c8 	.word	0x200011c8

08004ed0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ed8:	4b27      	ldr	r3, [pc, #156]	; (8004f78 <prvInsertBlockIntoFreeList+0xa8>)
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	e002      	b.n	8004ee4 <prvInsertBlockIntoFreeList+0x14>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d8f7      	bhi.n	8004ede <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	4413      	add	r3, r2
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d108      	bne.n	8004f12 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	441a      	add	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	441a      	add	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d118      	bne.n	8004f58 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	4b14      	ldr	r3, [pc, #80]	; (8004f7c <prvInsertBlockIntoFreeList+0xac>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d00d      	beq.n	8004f4e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	441a      	add	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	e008      	b.n	8004f60 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f4e:	4b0b      	ldr	r3, [pc, #44]	; (8004f7c <prvInsertBlockIntoFreeList+0xac>)
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	e003      	b.n	8004f60 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d002      	beq.n	8004f6e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f6e:	bf00      	nop
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bc80      	pop	{r7}
 8004f76:	4770      	bx	lr
 8004f78:	200011b4 	.word	0x200011b4
 8004f7c:	200011bc 	.word	0x200011bc

08004f80 <__errno>:
 8004f80:	4b01      	ldr	r3, [pc, #4]	; (8004f88 <__errno+0x8>)
 8004f82:	6818      	ldr	r0, [r3, #0]
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	2000001c 	.word	0x2000001c

08004f8c <__libc_init_array>:
 8004f8c:	b570      	push	{r4, r5, r6, lr}
 8004f8e:	2600      	movs	r6, #0
 8004f90:	4d0c      	ldr	r5, [pc, #48]	; (8004fc4 <__libc_init_array+0x38>)
 8004f92:	4c0d      	ldr	r4, [pc, #52]	; (8004fc8 <__libc_init_array+0x3c>)
 8004f94:	1b64      	subs	r4, r4, r5
 8004f96:	10a4      	asrs	r4, r4, #2
 8004f98:	42a6      	cmp	r6, r4
 8004f9a:	d109      	bne.n	8004fb0 <__libc_init_array+0x24>
 8004f9c:	f001 fb7e 	bl	800669c <_init>
 8004fa0:	2600      	movs	r6, #0
 8004fa2:	4d0a      	ldr	r5, [pc, #40]	; (8004fcc <__libc_init_array+0x40>)
 8004fa4:	4c0a      	ldr	r4, [pc, #40]	; (8004fd0 <__libc_init_array+0x44>)
 8004fa6:	1b64      	subs	r4, r4, r5
 8004fa8:	10a4      	asrs	r4, r4, #2
 8004faa:	42a6      	cmp	r6, r4
 8004fac:	d105      	bne.n	8004fba <__libc_init_array+0x2e>
 8004fae:	bd70      	pop	{r4, r5, r6, pc}
 8004fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fb4:	4798      	blx	r3
 8004fb6:	3601      	adds	r6, #1
 8004fb8:	e7ee      	b.n	8004f98 <__libc_init_array+0xc>
 8004fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fbe:	4798      	blx	r3
 8004fc0:	3601      	adds	r6, #1
 8004fc2:	e7f2      	b.n	8004faa <__libc_init_array+0x1e>
 8004fc4:	080067e8 	.word	0x080067e8
 8004fc8:	080067e8 	.word	0x080067e8
 8004fcc:	080067e8 	.word	0x080067e8
 8004fd0:	080067ec 	.word	0x080067ec

08004fd4 <memcpy>:
 8004fd4:	440a      	add	r2, r1
 8004fd6:	4291      	cmp	r1, r2
 8004fd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fdc:	d100      	bne.n	8004fe0 <memcpy+0xc>
 8004fde:	4770      	bx	lr
 8004fe0:	b510      	push	{r4, lr}
 8004fe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fe6:	4291      	cmp	r1, r2
 8004fe8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fec:	d1f9      	bne.n	8004fe2 <memcpy+0xe>
 8004fee:	bd10      	pop	{r4, pc}

08004ff0 <memset>:
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	4402      	add	r2, r0
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d100      	bne.n	8004ffa <memset+0xa>
 8004ff8:	4770      	bx	lr
 8004ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8004ffe:	e7f9      	b.n	8004ff4 <memset+0x4>

08005000 <siprintf>:
 8005000:	b40e      	push	{r1, r2, r3}
 8005002:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005006:	b500      	push	{lr}
 8005008:	b09c      	sub	sp, #112	; 0x70
 800500a:	ab1d      	add	r3, sp, #116	; 0x74
 800500c:	9002      	str	r0, [sp, #8]
 800500e:	9006      	str	r0, [sp, #24]
 8005010:	9107      	str	r1, [sp, #28]
 8005012:	9104      	str	r1, [sp, #16]
 8005014:	4808      	ldr	r0, [pc, #32]	; (8005038 <siprintf+0x38>)
 8005016:	4909      	ldr	r1, [pc, #36]	; (800503c <siprintf+0x3c>)
 8005018:	f853 2b04 	ldr.w	r2, [r3], #4
 800501c:	9105      	str	r1, [sp, #20]
 800501e:	6800      	ldr	r0, [r0, #0]
 8005020:	a902      	add	r1, sp, #8
 8005022:	9301      	str	r3, [sp, #4]
 8005024:	f000 f868 	bl	80050f8 <_svfiprintf_r>
 8005028:	2200      	movs	r2, #0
 800502a:	9b02      	ldr	r3, [sp, #8]
 800502c:	701a      	strb	r2, [r3, #0]
 800502e:	b01c      	add	sp, #112	; 0x70
 8005030:	f85d eb04 	ldr.w	lr, [sp], #4
 8005034:	b003      	add	sp, #12
 8005036:	4770      	bx	lr
 8005038:	2000001c 	.word	0x2000001c
 800503c:	ffff0208 	.word	0xffff0208

08005040 <__ssputs_r>:
 8005040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005044:	688e      	ldr	r6, [r1, #8]
 8005046:	4682      	mov	sl, r0
 8005048:	429e      	cmp	r6, r3
 800504a:	460c      	mov	r4, r1
 800504c:	4690      	mov	r8, r2
 800504e:	461f      	mov	r7, r3
 8005050:	d838      	bhi.n	80050c4 <__ssputs_r+0x84>
 8005052:	898a      	ldrh	r2, [r1, #12]
 8005054:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005058:	d032      	beq.n	80050c0 <__ssputs_r+0x80>
 800505a:	6825      	ldr	r5, [r4, #0]
 800505c:	6909      	ldr	r1, [r1, #16]
 800505e:	3301      	adds	r3, #1
 8005060:	eba5 0901 	sub.w	r9, r5, r1
 8005064:	6965      	ldr	r5, [r4, #20]
 8005066:	444b      	add	r3, r9
 8005068:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800506c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005070:	106d      	asrs	r5, r5, #1
 8005072:	429d      	cmp	r5, r3
 8005074:	bf38      	it	cc
 8005076:	461d      	movcc	r5, r3
 8005078:	0553      	lsls	r3, r2, #21
 800507a:	d531      	bpl.n	80050e0 <__ssputs_r+0xa0>
 800507c:	4629      	mov	r1, r5
 800507e:	f000 fb61 	bl	8005744 <_malloc_r>
 8005082:	4606      	mov	r6, r0
 8005084:	b950      	cbnz	r0, 800509c <__ssputs_r+0x5c>
 8005086:	230c      	movs	r3, #12
 8005088:	f04f 30ff 	mov.w	r0, #4294967295
 800508c:	f8ca 3000 	str.w	r3, [sl]
 8005090:	89a3      	ldrh	r3, [r4, #12]
 8005092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005096:	81a3      	strh	r3, [r4, #12]
 8005098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800509c:	464a      	mov	r2, r9
 800509e:	6921      	ldr	r1, [r4, #16]
 80050a0:	f7ff ff98 	bl	8004fd4 <memcpy>
 80050a4:	89a3      	ldrh	r3, [r4, #12]
 80050a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80050aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ae:	81a3      	strh	r3, [r4, #12]
 80050b0:	6126      	str	r6, [r4, #16]
 80050b2:	444e      	add	r6, r9
 80050b4:	6026      	str	r6, [r4, #0]
 80050b6:	463e      	mov	r6, r7
 80050b8:	6165      	str	r5, [r4, #20]
 80050ba:	eba5 0509 	sub.w	r5, r5, r9
 80050be:	60a5      	str	r5, [r4, #8]
 80050c0:	42be      	cmp	r6, r7
 80050c2:	d900      	bls.n	80050c6 <__ssputs_r+0x86>
 80050c4:	463e      	mov	r6, r7
 80050c6:	4632      	mov	r2, r6
 80050c8:	4641      	mov	r1, r8
 80050ca:	6820      	ldr	r0, [r4, #0]
 80050cc:	f000 fab8 	bl	8005640 <memmove>
 80050d0:	68a3      	ldr	r3, [r4, #8]
 80050d2:	2000      	movs	r0, #0
 80050d4:	1b9b      	subs	r3, r3, r6
 80050d6:	60a3      	str	r3, [r4, #8]
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	4433      	add	r3, r6
 80050dc:	6023      	str	r3, [r4, #0]
 80050de:	e7db      	b.n	8005098 <__ssputs_r+0x58>
 80050e0:	462a      	mov	r2, r5
 80050e2:	f000 fba3 	bl	800582c <_realloc_r>
 80050e6:	4606      	mov	r6, r0
 80050e8:	2800      	cmp	r0, #0
 80050ea:	d1e1      	bne.n	80050b0 <__ssputs_r+0x70>
 80050ec:	4650      	mov	r0, sl
 80050ee:	6921      	ldr	r1, [r4, #16]
 80050f0:	f000 fac0 	bl	8005674 <_free_r>
 80050f4:	e7c7      	b.n	8005086 <__ssputs_r+0x46>
	...

080050f8 <_svfiprintf_r>:
 80050f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050fc:	4698      	mov	r8, r3
 80050fe:	898b      	ldrh	r3, [r1, #12]
 8005100:	4607      	mov	r7, r0
 8005102:	061b      	lsls	r3, r3, #24
 8005104:	460d      	mov	r5, r1
 8005106:	4614      	mov	r4, r2
 8005108:	b09d      	sub	sp, #116	; 0x74
 800510a:	d50e      	bpl.n	800512a <_svfiprintf_r+0x32>
 800510c:	690b      	ldr	r3, [r1, #16]
 800510e:	b963      	cbnz	r3, 800512a <_svfiprintf_r+0x32>
 8005110:	2140      	movs	r1, #64	; 0x40
 8005112:	f000 fb17 	bl	8005744 <_malloc_r>
 8005116:	6028      	str	r0, [r5, #0]
 8005118:	6128      	str	r0, [r5, #16]
 800511a:	b920      	cbnz	r0, 8005126 <_svfiprintf_r+0x2e>
 800511c:	230c      	movs	r3, #12
 800511e:	603b      	str	r3, [r7, #0]
 8005120:	f04f 30ff 	mov.w	r0, #4294967295
 8005124:	e0d1      	b.n	80052ca <_svfiprintf_r+0x1d2>
 8005126:	2340      	movs	r3, #64	; 0x40
 8005128:	616b      	str	r3, [r5, #20]
 800512a:	2300      	movs	r3, #0
 800512c:	9309      	str	r3, [sp, #36]	; 0x24
 800512e:	2320      	movs	r3, #32
 8005130:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005134:	2330      	movs	r3, #48	; 0x30
 8005136:	f04f 0901 	mov.w	r9, #1
 800513a:	f8cd 800c 	str.w	r8, [sp, #12]
 800513e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80052e4 <_svfiprintf_r+0x1ec>
 8005142:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005146:	4623      	mov	r3, r4
 8005148:	469a      	mov	sl, r3
 800514a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800514e:	b10a      	cbz	r2, 8005154 <_svfiprintf_r+0x5c>
 8005150:	2a25      	cmp	r2, #37	; 0x25
 8005152:	d1f9      	bne.n	8005148 <_svfiprintf_r+0x50>
 8005154:	ebba 0b04 	subs.w	fp, sl, r4
 8005158:	d00b      	beq.n	8005172 <_svfiprintf_r+0x7a>
 800515a:	465b      	mov	r3, fp
 800515c:	4622      	mov	r2, r4
 800515e:	4629      	mov	r1, r5
 8005160:	4638      	mov	r0, r7
 8005162:	f7ff ff6d 	bl	8005040 <__ssputs_r>
 8005166:	3001      	adds	r0, #1
 8005168:	f000 80aa 	beq.w	80052c0 <_svfiprintf_r+0x1c8>
 800516c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800516e:	445a      	add	r2, fp
 8005170:	9209      	str	r2, [sp, #36]	; 0x24
 8005172:	f89a 3000 	ldrb.w	r3, [sl]
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 80a2 	beq.w	80052c0 <_svfiprintf_r+0x1c8>
 800517c:	2300      	movs	r3, #0
 800517e:	f04f 32ff 	mov.w	r2, #4294967295
 8005182:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005186:	f10a 0a01 	add.w	sl, sl, #1
 800518a:	9304      	str	r3, [sp, #16]
 800518c:	9307      	str	r3, [sp, #28]
 800518e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005192:	931a      	str	r3, [sp, #104]	; 0x68
 8005194:	4654      	mov	r4, sl
 8005196:	2205      	movs	r2, #5
 8005198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800519c:	4851      	ldr	r0, [pc, #324]	; (80052e4 <_svfiprintf_r+0x1ec>)
 800519e:	f000 fa41 	bl	8005624 <memchr>
 80051a2:	9a04      	ldr	r2, [sp, #16]
 80051a4:	b9d8      	cbnz	r0, 80051de <_svfiprintf_r+0xe6>
 80051a6:	06d0      	lsls	r0, r2, #27
 80051a8:	bf44      	itt	mi
 80051aa:	2320      	movmi	r3, #32
 80051ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051b0:	0711      	lsls	r1, r2, #28
 80051b2:	bf44      	itt	mi
 80051b4:	232b      	movmi	r3, #43	; 0x2b
 80051b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051ba:	f89a 3000 	ldrb.w	r3, [sl]
 80051be:	2b2a      	cmp	r3, #42	; 0x2a
 80051c0:	d015      	beq.n	80051ee <_svfiprintf_r+0xf6>
 80051c2:	4654      	mov	r4, sl
 80051c4:	2000      	movs	r0, #0
 80051c6:	f04f 0c0a 	mov.w	ip, #10
 80051ca:	9a07      	ldr	r2, [sp, #28]
 80051cc:	4621      	mov	r1, r4
 80051ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051d2:	3b30      	subs	r3, #48	; 0x30
 80051d4:	2b09      	cmp	r3, #9
 80051d6:	d94e      	bls.n	8005276 <_svfiprintf_r+0x17e>
 80051d8:	b1b0      	cbz	r0, 8005208 <_svfiprintf_r+0x110>
 80051da:	9207      	str	r2, [sp, #28]
 80051dc:	e014      	b.n	8005208 <_svfiprintf_r+0x110>
 80051de:	eba0 0308 	sub.w	r3, r0, r8
 80051e2:	fa09 f303 	lsl.w	r3, r9, r3
 80051e6:	4313      	orrs	r3, r2
 80051e8:	46a2      	mov	sl, r4
 80051ea:	9304      	str	r3, [sp, #16]
 80051ec:	e7d2      	b.n	8005194 <_svfiprintf_r+0x9c>
 80051ee:	9b03      	ldr	r3, [sp, #12]
 80051f0:	1d19      	adds	r1, r3, #4
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	9103      	str	r1, [sp, #12]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	bfbb      	ittet	lt
 80051fa:	425b      	neglt	r3, r3
 80051fc:	f042 0202 	orrlt.w	r2, r2, #2
 8005200:	9307      	strge	r3, [sp, #28]
 8005202:	9307      	strlt	r3, [sp, #28]
 8005204:	bfb8      	it	lt
 8005206:	9204      	strlt	r2, [sp, #16]
 8005208:	7823      	ldrb	r3, [r4, #0]
 800520a:	2b2e      	cmp	r3, #46	; 0x2e
 800520c:	d10c      	bne.n	8005228 <_svfiprintf_r+0x130>
 800520e:	7863      	ldrb	r3, [r4, #1]
 8005210:	2b2a      	cmp	r3, #42	; 0x2a
 8005212:	d135      	bne.n	8005280 <_svfiprintf_r+0x188>
 8005214:	9b03      	ldr	r3, [sp, #12]
 8005216:	3402      	adds	r4, #2
 8005218:	1d1a      	adds	r2, r3, #4
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	9203      	str	r2, [sp, #12]
 800521e:	2b00      	cmp	r3, #0
 8005220:	bfb8      	it	lt
 8005222:	f04f 33ff 	movlt.w	r3, #4294967295
 8005226:	9305      	str	r3, [sp, #20]
 8005228:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80052e8 <_svfiprintf_r+0x1f0>
 800522c:	2203      	movs	r2, #3
 800522e:	4650      	mov	r0, sl
 8005230:	7821      	ldrb	r1, [r4, #0]
 8005232:	f000 f9f7 	bl	8005624 <memchr>
 8005236:	b140      	cbz	r0, 800524a <_svfiprintf_r+0x152>
 8005238:	2340      	movs	r3, #64	; 0x40
 800523a:	eba0 000a 	sub.w	r0, r0, sl
 800523e:	fa03 f000 	lsl.w	r0, r3, r0
 8005242:	9b04      	ldr	r3, [sp, #16]
 8005244:	3401      	adds	r4, #1
 8005246:	4303      	orrs	r3, r0
 8005248:	9304      	str	r3, [sp, #16]
 800524a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800524e:	2206      	movs	r2, #6
 8005250:	4826      	ldr	r0, [pc, #152]	; (80052ec <_svfiprintf_r+0x1f4>)
 8005252:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005256:	f000 f9e5 	bl	8005624 <memchr>
 800525a:	2800      	cmp	r0, #0
 800525c:	d038      	beq.n	80052d0 <_svfiprintf_r+0x1d8>
 800525e:	4b24      	ldr	r3, [pc, #144]	; (80052f0 <_svfiprintf_r+0x1f8>)
 8005260:	bb1b      	cbnz	r3, 80052aa <_svfiprintf_r+0x1b2>
 8005262:	9b03      	ldr	r3, [sp, #12]
 8005264:	3307      	adds	r3, #7
 8005266:	f023 0307 	bic.w	r3, r3, #7
 800526a:	3308      	adds	r3, #8
 800526c:	9303      	str	r3, [sp, #12]
 800526e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005270:	4433      	add	r3, r6
 8005272:	9309      	str	r3, [sp, #36]	; 0x24
 8005274:	e767      	b.n	8005146 <_svfiprintf_r+0x4e>
 8005276:	460c      	mov	r4, r1
 8005278:	2001      	movs	r0, #1
 800527a:	fb0c 3202 	mla	r2, ip, r2, r3
 800527e:	e7a5      	b.n	80051cc <_svfiprintf_r+0xd4>
 8005280:	2300      	movs	r3, #0
 8005282:	f04f 0c0a 	mov.w	ip, #10
 8005286:	4619      	mov	r1, r3
 8005288:	3401      	adds	r4, #1
 800528a:	9305      	str	r3, [sp, #20]
 800528c:	4620      	mov	r0, r4
 800528e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005292:	3a30      	subs	r2, #48	; 0x30
 8005294:	2a09      	cmp	r2, #9
 8005296:	d903      	bls.n	80052a0 <_svfiprintf_r+0x1a8>
 8005298:	2b00      	cmp	r3, #0
 800529a:	d0c5      	beq.n	8005228 <_svfiprintf_r+0x130>
 800529c:	9105      	str	r1, [sp, #20]
 800529e:	e7c3      	b.n	8005228 <_svfiprintf_r+0x130>
 80052a0:	4604      	mov	r4, r0
 80052a2:	2301      	movs	r3, #1
 80052a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80052a8:	e7f0      	b.n	800528c <_svfiprintf_r+0x194>
 80052aa:	ab03      	add	r3, sp, #12
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	462a      	mov	r2, r5
 80052b0:	4638      	mov	r0, r7
 80052b2:	4b10      	ldr	r3, [pc, #64]	; (80052f4 <_svfiprintf_r+0x1fc>)
 80052b4:	a904      	add	r1, sp, #16
 80052b6:	f3af 8000 	nop.w
 80052ba:	1c42      	adds	r2, r0, #1
 80052bc:	4606      	mov	r6, r0
 80052be:	d1d6      	bne.n	800526e <_svfiprintf_r+0x176>
 80052c0:	89ab      	ldrh	r3, [r5, #12]
 80052c2:	065b      	lsls	r3, r3, #25
 80052c4:	f53f af2c 	bmi.w	8005120 <_svfiprintf_r+0x28>
 80052c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052ca:	b01d      	add	sp, #116	; 0x74
 80052cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052d0:	ab03      	add	r3, sp, #12
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	462a      	mov	r2, r5
 80052d6:	4638      	mov	r0, r7
 80052d8:	4b06      	ldr	r3, [pc, #24]	; (80052f4 <_svfiprintf_r+0x1fc>)
 80052da:	a904      	add	r1, sp, #16
 80052dc:	f000 f87c 	bl	80053d8 <_printf_i>
 80052e0:	e7eb      	b.n	80052ba <_svfiprintf_r+0x1c2>
 80052e2:	bf00      	nop
 80052e4:	0800677e 	.word	0x0800677e
 80052e8:	08006784 	.word	0x08006784
 80052ec:	08006788 	.word	0x08006788
 80052f0:	00000000 	.word	0x00000000
 80052f4:	08005041 	.word	0x08005041

080052f8 <_printf_common>:
 80052f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052fc:	4616      	mov	r6, r2
 80052fe:	4699      	mov	r9, r3
 8005300:	688a      	ldr	r2, [r1, #8]
 8005302:	690b      	ldr	r3, [r1, #16]
 8005304:	4607      	mov	r7, r0
 8005306:	4293      	cmp	r3, r2
 8005308:	bfb8      	it	lt
 800530a:	4613      	movlt	r3, r2
 800530c:	6033      	str	r3, [r6, #0]
 800530e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005312:	460c      	mov	r4, r1
 8005314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005318:	b10a      	cbz	r2, 800531e <_printf_common+0x26>
 800531a:	3301      	adds	r3, #1
 800531c:	6033      	str	r3, [r6, #0]
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	0699      	lsls	r1, r3, #26
 8005322:	bf42      	ittt	mi
 8005324:	6833      	ldrmi	r3, [r6, #0]
 8005326:	3302      	addmi	r3, #2
 8005328:	6033      	strmi	r3, [r6, #0]
 800532a:	6825      	ldr	r5, [r4, #0]
 800532c:	f015 0506 	ands.w	r5, r5, #6
 8005330:	d106      	bne.n	8005340 <_printf_common+0x48>
 8005332:	f104 0a19 	add.w	sl, r4, #25
 8005336:	68e3      	ldr	r3, [r4, #12]
 8005338:	6832      	ldr	r2, [r6, #0]
 800533a:	1a9b      	subs	r3, r3, r2
 800533c:	42ab      	cmp	r3, r5
 800533e:	dc28      	bgt.n	8005392 <_printf_common+0x9a>
 8005340:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005344:	1e13      	subs	r3, r2, #0
 8005346:	6822      	ldr	r2, [r4, #0]
 8005348:	bf18      	it	ne
 800534a:	2301      	movne	r3, #1
 800534c:	0692      	lsls	r2, r2, #26
 800534e:	d42d      	bmi.n	80053ac <_printf_common+0xb4>
 8005350:	4649      	mov	r1, r9
 8005352:	4638      	mov	r0, r7
 8005354:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005358:	47c0      	blx	r8
 800535a:	3001      	adds	r0, #1
 800535c:	d020      	beq.n	80053a0 <_printf_common+0xa8>
 800535e:	6823      	ldr	r3, [r4, #0]
 8005360:	68e5      	ldr	r5, [r4, #12]
 8005362:	f003 0306 	and.w	r3, r3, #6
 8005366:	2b04      	cmp	r3, #4
 8005368:	bf18      	it	ne
 800536a:	2500      	movne	r5, #0
 800536c:	6832      	ldr	r2, [r6, #0]
 800536e:	f04f 0600 	mov.w	r6, #0
 8005372:	68a3      	ldr	r3, [r4, #8]
 8005374:	bf08      	it	eq
 8005376:	1aad      	subeq	r5, r5, r2
 8005378:	6922      	ldr	r2, [r4, #16]
 800537a:	bf08      	it	eq
 800537c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005380:	4293      	cmp	r3, r2
 8005382:	bfc4      	itt	gt
 8005384:	1a9b      	subgt	r3, r3, r2
 8005386:	18ed      	addgt	r5, r5, r3
 8005388:	341a      	adds	r4, #26
 800538a:	42b5      	cmp	r5, r6
 800538c:	d11a      	bne.n	80053c4 <_printf_common+0xcc>
 800538e:	2000      	movs	r0, #0
 8005390:	e008      	b.n	80053a4 <_printf_common+0xac>
 8005392:	2301      	movs	r3, #1
 8005394:	4652      	mov	r2, sl
 8005396:	4649      	mov	r1, r9
 8005398:	4638      	mov	r0, r7
 800539a:	47c0      	blx	r8
 800539c:	3001      	adds	r0, #1
 800539e:	d103      	bne.n	80053a8 <_printf_common+0xb0>
 80053a0:	f04f 30ff 	mov.w	r0, #4294967295
 80053a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053a8:	3501      	adds	r5, #1
 80053aa:	e7c4      	b.n	8005336 <_printf_common+0x3e>
 80053ac:	2030      	movs	r0, #48	; 0x30
 80053ae:	18e1      	adds	r1, r4, r3
 80053b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053b4:	1c5a      	adds	r2, r3, #1
 80053b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053ba:	4422      	add	r2, r4
 80053bc:	3302      	adds	r3, #2
 80053be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053c2:	e7c5      	b.n	8005350 <_printf_common+0x58>
 80053c4:	2301      	movs	r3, #1
 80053c6:	4622      	mov	r2, r4
 80053c8:	4649      	mov	r1, r9
 80053ca:	4638      	mov	r0, r7
 80053cc:	47c0      	blx	r8
 80053ce:	3001      	adds	r0, #1
 80053d0:	d0e6      	beq.n	80053a0 <_printf_common+0xa8>
 80053d2:	3601      	adds	r6, #1
 80053d4:	e7d9      	b.n	800538a <_printf_common+0x92>
	...

080053d8 <_printf_i>:
 80053d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053dc:	7e0f      	ldrb	r7, [r1, #24]
 80053de:	4691      	mov	r9, r2
 80053e0:	2f78      	cmp	r7, #120	; 0x78
 80053e2:	4680      	mov	r8, r0
 80053e4:	460c      	mov	r4, r1
 80053e6:	469a      	mov	sl, r3
 80053e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053ee:	d807      	bhi.n	8005400 <_printf_i+0x28>
 80053f0:	2f62      	cmp	r7, #98	; 0x62
 80053f2:	d80a      	bhi.n	800540a <_printf_i+0x32>
 80053f4:	2f00      	cmp	r7, #0
 80053f6:	f000 80d9 	beq.w	80055ac <_printf_i+0x1d4>
 80053fa:	2f58      	cmp	r7, #88	; 0x58
 80053fc:	f000 80a4 	beq.w	8005548 <_printf_i+0x170>
 8005400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005404:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005408:	e03a      	b.n	8005480 <_printf_i+0xa8>
 800540a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800540e:	2b15      	cmp	r3, #21
 8005410:	d8f6      	bhi.n	8005400 <_printf_i+0x28>
 8005412:	a101      	add	r1, pc, #4	; (adr r1, 8005418 <_printf_i+0x40>)
 8005414:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005418:	08005471 	.word	0x08005471
 800541c:	08005485 	.word	0x08005485
 8005420:	08005401 	.word	0x08005401
 8005424:	08005401 	.word	0x08005401
 8005428:	08005401 	.word	0x08005401
 800542c:	08005401 	.word	0x08005401
 8005430:	08005485 	.word	0x08005485
 8005434:	08005401 	.word	0x08005401
 8005438:	08005401 	.word	0x08005401
 800543c:	08005401 	.word	0x08005401
 8005440:	08005401 	.word	0x08005401
 8005444:	08005593 	.word	0x08005593
 8005448:	080054b5 	.word	0x080054b5
 800544c:	08005575 	.word	0x08005575
 8005450:	08005401 	.word	0x08005401
 8005454:	08005401 	.word	0x08005401
 8005458:	080055b5 	.word	0x080055b5
 800545c:	08005401 	.word	0x08005401
 8005460:	080054b5 	.word	0x080054b5
 8005464:	08005401 	.word	0x08005401
 8005468:	08005401 	.word	0x08005401
 800546c:	0800557d 	.word	0x0800557d
 8005470:	682b      	ldr	r3, [r5, #0]
 8005472:	1d1a      	adds	r2, r3, #4
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	602a      	str	r2, [r5, #0]
 8005478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800547c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005480:	2301      	movs	r3, #1
 8005482:	e0a4      	b.n	80055ce <_printf_i+0x1f6>
 8005484:	6820      	ldr	r0, [r4, #0]
 8005486:	6829      	ldr	r1, [r5, #0]
 8005488:	0606      	lsls	r6, r0, #24
 800548a:	f101 0304 	add.w	r3, r1, #4
 800548e:	d50a      	bpl.n	80054a6 <_printf_i+0xce>
 8005490:	680e      	ldr	r6, [r1, #0]
 8005492:	602b      	str	r3, [r5, #0]
 8005494:	2e00      	cmp	r6, #0
 8005496:	da03      	bge.n	80054a0 <_printf_i+0xc8>
 8005498:	232d      	movs	r3, #45	; 0x2d
 800549a:	4276      	negs	r6, r6
 800549c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054a0:	230a      	movs	r3, #10
 80054a2:	485e      	ldr	r0, [pc, #376]	; (800561c <_printf_i+0x244>)
 80054a4:	e019      	b.n	80054da <_printf_i+0x102>
 80054a6:	680e      	ldr	r6, [r1, #0]
 80054a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80054ac:	602b      	str	r3, [r5, #0]
 80054ae:	bf18      	it	ne
 80054b0:	b236      	sxthne	r6, r6
 80054b2:	e7ef      	b.n	8005494 <_printf_i+0xbc>
 80054b4:	682b      	ldr	r3, [r5, #0]
 80054b6:	6820      	ldr	r0, [r4, #0]
 80054b8:	1d19      	adds	r1, r3, #4
 80054ba:	6029      	str	r1, [r5, #0]
 80054bc:	0601      	lsls	r1, r0, #24
 80054be:	d501      	bpl.n	80054c4 <_printf_i+0xec>
 80054c0:	681e      	ldr	r6, [r3, #0]
 80054c2:	e002      	b.n	80054ca <_printf_i+0xf2>
 80054c4:	0646      	lsls	r6, r0, #25
 80054c6:	d5fb      	bpl.n	80054c0 <_printf_i+0xe8>
 80054c8:	881e      	ldrh	r6, [r3, #0]
 80054ca:	2f6f      	cmp	r7, #111	; 0x6f
 80054cc:	bf0c      	ite	eq
 80054ce:	2308      	moveq	r3, #8
 80054d0:	230a      	movne	r3, #10
 80054d2:	4852      	ldr	r0, [pc, #328]	; (800561c <_printf_i+0x244>)
 80054d4:	2100      	movs	r1, #0
 80054d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054da:	6865      	ldr	r5, [r4, #4]
 80054dc:	2d00      	cmp	r5, #0
 80054de:	bfa8      	it	ge
 80054e0:	6821      	ldrge	r1, [r4, #0]
 80054e2:	60a5      	str	r5, [r4, #8]
 80054e4:	bfa4      	itt	ge
 80054e6:	f021 0104 	bicge.w	r1, r1, #4
 80054ea:	6021      	strge	r1, [r4, #0]
 80054ec:	b90e      	cbnz	r6, 80054f2 <_printf_i+0x11a>
 80054ee:	2d00      	cmp	r5, #0
 80054f0:	d04d      	beq.n	800558e <_printf_i+0x1b6>
 80054f2:	4615      	mov	r5, r2
 80054f4:	fbb6 f1f3 	udiv	r1, r6, r3
 80054f8:	fb03 6711 	mls	r7, r3, r1, r6
 80054fc:	5dc7      	ldrb	r7, [r0, r7]
 80054fe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005502:	4637      	mov	r7, r6
 8005504:	42bb      	cmp	r3, r7
 8005506:	460e      	mov	r6, r1
 8005508:	d9f4      	bls.n	80054f4 <_printf_i+0x11c>
 800550a:	2b08      	cmp	r3, #8
 800550c:	d10b      	bne.n	8005526 <_printf_i+0x14e>
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	07de      	lsls	r6, r3, #31
 8005512:	d508      	bpl.n	8005526 <_printf_i+0x14e>
 8005514:	6923      	ldr	r3, [r4, #16]
 8005516:	6861      	ldr	r1, [r4, #4]
 8005518:	4299      	cmp	r1, r3
 800551a:	bfde      	ittt	le
 800551c:	2330      	movle	r3, #48	; 0x30
 800551e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005522:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005526:	1b52      	subs	r2, r2, r5
 8005528:	6122      	str	r2, [r4, #16]
 800552a:	464b      	mov	r3, r9
 800552c:	4621      	mov	r1, r4
 800552e:	4640      	mov	r0, r8
 8005530:	f8cd a000 	str.w	sl, [sp]
 8005534:	aa03      	add	r2, sp, #12
 8005536:	f7ff fedf 	bl	80052f8 <_printf_common>
 800553a:	3001      	adds	r0, #1
 800553c:	d14c      	bne.n	80055d8 <_printf_i+0x200>
 800553e:	f04f 30ff 	mov.w	r0, #4294967295
 8005542:	b004      	add	sp, #16
 8005544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005548:	4834      	ldr	r0, [pc, #208]	; (800561c <_printf_i+0x244>)
 800554a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800554e:	6829      	ldr	r1, [r5, #0]
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	f851 6b04 	ldr.w	r6, [r1], #4
 8005556:	6029      	str	r1, [r5, #0]
 8005558:	061d      	lsls	r5, r3, #24
 800555a:	d514      	bpl.n	8005586 <_printf_i+0x1ae>
 800555c:	07df      	lsls	r7, r3, #31
 800555e:	bf44      	itt	mi
 8005560:	f043 0320 	orrmi.w	r3, r3, #32
 8005564:	6023      	strmi	r3, [r4, #0]
 8005566:	b91e      	cbnz	r6, 8005570 <_printf_i+0x198>
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	f023 0320 	bic.w	r3, r3, #32
 800556e:	6023      	str	r3, [r4, #0]
 8005570:	2310      	movs	r3, #16
 8005572:	e7af      	b.n	80054d4 <_printf_i+0xfc>
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	f043 0320 	orr.w	r3, r3, #32
 800557a:	6023      	str	r3, [r4, #0]
 800557c:	2378      	movs	r3, #120	; 0x78
 800557e:	4828      	ldr	r0, [pc, #160]	; (8005620 <_printf_i+0x248>)
 8005580:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005584:	e7e3      	b.n	800554e <_printf_i+0x176>
 8005586:	0659      	lsls	r1, r3, #25
 8005588:	bf48      	it	mi
 800558a:	b2b6      	uxthmi	r6, r6
 800558c:	e7e6      	b.n	800555c <_printf_i+0x184>
 800558e:	4615      	mov	r5, r2
 8005590:	e7bb      	b.n	800550a <_printf_i+0x132>
 8005592:	682b      	ldr	r3, [r5, #0]
 8005594:	6826      	ldr	r6, [r4, #0]
 8005596:	1d18      	adds	r0, r3, #4
 8005598:	6961      	ldr	r1, [r4, #20]
 800559a:	6028      	str	r0, [r5, #0]
 800559c:	0635      	lsls	r5, r6, #24
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	d501      	bpl.n	80055a6 <_printf_i+0x1ce>
 80055a2:	6019      	str	r1, [r3, #0]
 80055a4:	e002      	b.n	80055ac <_printf_i+0x1d4>
 80055a6:	0670      	lsls	r0, r6, #25
 80055a8:	d5fb      	bpl.n	80055a2 <_printf_i+0x1ca>
 80055aa:	8019      	strh	r1, [r3, #0]
 80055ac:	2300      	movs	r3, #0
 80055ae:	4615      	mov	r5, r2
 80055b0:	6123      	str	r3, [r4, #16]
 80055b2:	e7ba      	b.n	800552a <_printf_i+0x152>
 80055b4:	682b      	ldr	r3, [r5, #0]
 80055b6:	2100      	movs	r1, #0
 80055b8:	1d1a      	adds	r2, r3, #4
 80055ba:	602a      	str	r2, [r5, #0]
 80055bc:	681d      	ldr	r5, [r3, #0]
 80055be:	6862      	ldr	r2, [r4, #4]
 80055c0:	4628      	mov	r0, r5
 80055c2:	f000 f82f 	bl	8005624 <memchr>
 80055c6:	b108      	cbz	r0, 80055cc <_printf_i+0x1f4>
 80055c8:	1b40      	subs	r0, r0, r5
 80055ca:	6060      	str	r0, [r4, #4]
 80055cc:	6863      	ldr	r3, [r4, #4]
 80055ce:	6123      	str	r3, [r4, #16]
 80055d0:	2300      	movs	r3, #0
 80055d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055d6:	e7a8      	b.n	800552a <_printf_i+0x152>
 80055d8:	462a      	mov	r2, r5
 80055da:	4649      	mov	r1, r9
 80055dc:	4640      	mov	r0, r8
 80055de:	6923      	ldr	r3, [r4, #16]
 80055e0:	47d0      	blx	sl
 80055e2:	3001      	adds	r0, #1
 80055e4:	d0ab      	beq.n	800553e <_printf_i+0x166>
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	079b      	lsls	r3, r3, #30
 80055ea:	d413      	bmi.n	8005614 <_printf_i+0x23c>
 80055ec:	68e0      	ldr	r0, [r4, #12]
 80055ee:	9b03      	ldr	r3, [sp, #12]
 80055f0:	4298      	cmp	r0, r3
 80055f2:	bfb8      	it	lt
 80055f4:	4618      	movlt	r0, r3
 80055f6:	e7a4      	b.n	8005542 <_printf_i+0x16a>
 80055f8:	2301      	movs	r3, #1
 80055fa:	4632      	mov	r2, r6
 80055fc:	4649      	mov	r1, r9
 80055fe:	4640      	mov	r0, r8
 8005600:	47d0      	blx	sl
 8005602:	3001      	adds	r0, #1
 8005604:	d09b      	beq.n	800553e <_printf_i+0x166>
 8005606:	3501      	adds	r5, #1
 8005608:	68e3      	ldr	r3, [r4, #12]
 800560a:	9903      	ldr	r1, [sp, #12]
 800560c:	1a5b      	subs	r3, r3, r1
 800560e:	42ab      	cmp	r3, r5
 8005610:	dcf2      	bgt.n	80055f8 <_printf_i+0x220>
 8005612:	e7eb      	b.n	80055ec <_printf_i+0x214>
 8005614:	2500      	movs	r5, #0
 8005616:	f104 0619 	add.w	r6, r4, #25
 800561a:	e7f5      	b.n	8005608 <_printf_i+0x230>
 800561c:	0800678f 	.word	0x0800678f
 8005620:	080067a0 	.word	0x080067a0

08005624 <memchr>:
 8005624:	4603      	mov	r3, r0
 8005626:	b510      	push	{r4, lr}
 8005628:	b2c9      	uxtb	r1, r1
 800562a:	4402      	add	r2, r0
 800562c:	4293      	cmp	r3, r2
 800562e:	4618      	mov	r0, r3
 8005630:	d101      	bne.n	8005636 <memchr+0x12>
 8005632:	2000      	movs	r0, #0
 8005634:	e003      	b.n	800563e <memchr+0x1a>
 8005636:	7804      	ldrb	r4, [r0, #0]
 8005638:	3301      	adds	r3, #1
 800563a:	428c      	cmp	r4, r1
 800563c:	d1f6      	bne.n	800562c <memchr+0x8>
 800563e:	bd10      	pop	{r4, pc}

08005640 <memmove>:
 8005640:	4288      	cmp	r0, r1
 8005642:	b510      	push	{r4, lr}
 8005644:	eb01 0402 	add.w	r4, r1, r2
 8005648:	d902      	bls.n	8005650 <memmove+0x10>
 800564a:	4284      	cmp	r4, r0
 800564c:	4623      	mov	r3, r4
 800564e:	d807      	bhi.n	8005660 <memmove+0x20>
 8005650:	1e43      	subs	r3, r0, #1
 8005652:	42a1      	cmp	r1, r4
 8005654:	d008      	beq.n	8005668 <memmove+0x28>
 8005656:	f811 2b01 	ldrb.w	r2, [r1], #1
 800565a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800565e:	e7f8      	b.n	8005652 <memmove+0x12>
 8005660:	4601      	mov	r1, r0
 8005662:	4402      	add	r2, r0
 8005664:	428a      	cmp	r2, r1
 8005666:	d100      	bne.n	800566a <memmove+0x2a>
 8005668:	bd10      	pop	{r4, pc}
 800566a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800566e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005672:	e7f7      	b.n	8005664 <memmove+0x24>

08005674 <_free_r>:
 8005674:	b538      	push	{r3, r4, r5, lr}
 8005676:	4605      	mov	r5, r0
 8005678:	2900      	cmp	r1, #0
 800567a:	d040      	beq.n	80056fe <_free_r+0x8a>
 800567c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005680:	1f0c      	subs	r4, r1, #4
 8005682:	2b00      	cmp	r3, #0
 8005684:	bfb8      	it	lt
 8005686:	18e4      	addlt	r4, r4, r3
 8005688:	f000 f910 	bl	80058ac <__malloc_lock>
 800568c:	4a1c      	ldr	r2, [pc, #112]	; (8005700 <_free_r+0x8c>)
 800568e:	6813      	ldr	r3, [r2, #0]
 8005690:	b933      	cbnz	r3, 80056a0 <_free_r+0x2c>
 8005692:	6063      	str	r3, [r4, #4]
 8005694:	6014      	str	r4, [r2, #0]
 8005696:	4628      	mov	r0, r5
 8005698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800569c:	f000 b90c 	b.w	80058b8 <__malloc_unlock>
 80056a0:	42a3      	cmp	r3, r4
 80056a2:	d908      	bls.n	80056b6 <_free_r+0x42>
 80056a4:	6820      	ldr	r0, [r4, #0]
 80056a6:	1821      	adds	r1, r4, r0
 80056a8:	428b      	cmp	r3, r1
 80056aa:	bf01      	itttt	eq
 80056ac:	6819      	ldreq	r1, [r3, #0]
 80056ae:	685b      	ldreq	r3, [r3, #4]
 80056b0:	1809      	addeq	r1, r1, r0
 80056b2:	6021      	streq	r1, [r4, #0]
 80056b4:	e7ed      	b.n	8005692 <_free_r+0x1e>
 80056b6:	461a      	mov	r2, r3
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	b10b      	cbz	r3, 80056c0 <_free_r+0x4c>
 80056bc:	42a3      	cmp	r3, r4
 80056be:	d9fa      	bls.n	80056b6 <_free_r+0x42>
 80056c0:	6811      	ldr	r1, [r2, #0]
 80056c2:	1850      	adds	r0, r2, r1
 80056c4:	42a0      	cmp	r0, r4
 80056c6:	d10b      	bne.n	80056e0 <_free_r+0x6c>
 80056c8:	6820      	ldr	r0, [r4, #0]
 80056ca:	4401      	add	r1, r0
 80056cc:	1850      	adds	r0, r2, r1
 80056ce:	4283      	cmp	r3, r0
 80056d0:	6011      	str	r1, [r2, #0]
 80056d2:	d1e0      	bne.n	8005696 <_free_r+0x22>
 80056d4:	6818      	ldr	r0, [r3, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	4401      	add	r1, r0
 80056da:	6011      	str	r1, [r2, #0]
 80056dc:	6053      	str	r3, [r2, #4]
 80056de:	e7da      	b.n	8005696 <_free_r+0x22>
 80056e0:	d902      	bls.n	80056e8 <_free_r+0x74>
 80056e2:	230c      	movs	r3, #12
 80056e4:	602b      	str	r3, [r5, #0]
 80056e6:	e7d6      	b.n	8005696 <_free_r+0x22>
 80056e8:	6820      	ldr	r0, [r4, #0]
 80056ea:	1821      	adds	r1, r4, r0
 80056ec:	428b      	cmp	r3, r1
 80056ee:	bf01      	itttt	eq
 80056f0:	6819      	ldreq	r1, [r3, #0]
 80056f2:	685b      	ldreq	r3, [r3, #4]
 80056f4:	1809      	addeq	r1, r1, r0
 80056f6:	6021      	streq	r1, [r4, #0]
 80056f8:	6063      	str	r3, [r4, #4]
 80056fa:	6054      	str	r4, [r2, #4]
 80056fc:	e7cb      	b.n	8005696 <_free_r+0x22>
 80056fe:	bd38      	pop	{r3, r4, r5, pc}
 8005700:	200011cc 	.word	0x200011cc

08005704 <sbrk_aligned>:
 8005704:	b570      	push	{r4, r5, r6, lr}
 8005706:	4e0e      	ldr	r6, [pc, #56]	; (8005740 <sbrk_aligned+0x3c>)
 8005708:	460c      	mov	r4, r1
 800570a:	6831      	ldr	r1, [r6, #0]
 800570c:	4605      	mov	r5, r0
 800570e:	b911      	cbnz	r1, 8005716 <sbrk_aligned+0x12>
 8005710:	f000 f8bc 	bl	800588c <_sbrk_r>
 8005714:	6030      	str	r0, [r6, #0]
 8005716:	4621      	mov	r1, r4
 8005718:	4628      	mov	r0, r5
 800571a:	f000 f8b7 	bl	800588c <_sbrk_r>
 800571e:	1c43      	adds	r3, r0, #1
 8005720:	d00a      	beq.n	8005738 <sbrk_aligned+0x34>
 8005722:	1cc4      	adds	r4, r0, #3
 8005724:	f024 0403 	bic.w	r4, r4, #3
 8005728:	42a0      	cmp	r0, r4
 800572a:	d007      	beq.n	800573c <sbrk_aligned+0x38>
 800572c:	1a21      	subs	r1, r4, r0
 800572e:	4628      	mov	r0, r5
 8005730:	f000 f8ac 	bl	800588c <_sbrk_r>
 8005734:	3001      	adds	r0, #1
 8005736:	d101      	bne.n	800573c <sbrk_aligned+0x38>
 8005738:	f04f 34ff 	mov.w	r4, #4294967295
 800573c:	4620      	mov	r0, r4
 800573e:	bd70      	pop	{r4, r5, r6, pc}
 8005740:	200011d0 	.word	0x200011d0

08005744 <_malloc_r>:
 8005744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005748:	1ccd      	adds	r5, r1, #3
 800574a:	f025 0503 	bic.w	r5, r5, #3
 800574e:	3508      	adds	r5, #8
 8005750:	2d0c      	cmp	r5, #12
 8005752:	bf38      	it	cc
 8005754:	250c      	movcc	r5, #12
 8005756:	2d00      	cmp	r5, #0
 8005758:	4607      	mov	r7, r0
 800575a:	db01      	blt.n	8005760 <_malloc_r+0x1c>
 800575c:	42a9      	cmp	r1, r5
 800575e:	d905      	bls.n	800576c <_malloc_r+0x28>
 8005760:	230c      	movs	r3, #12
 8005762:	2600      	movs	r6, #0
 8005764:	603b      	str	r3, [r7, #0]
 8005766:	4630      	mov	r0, r6
 8005768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800576c:	4e2e      	ldr	r6, [pc, #184]	; (8005828 <_malloc_r+0xe4>)
 800576e:	f000 f89d 	bl	80058ac <__malloc_lock>
 8005772:	6833      	ldr	r3, [r6, #0]
 8005774:	461c      	mov	r4, r3
 8005776:	bb34      	cbnz	r4, 80057c6 <_malloc_r+0x82>
 8005778:	4629      	mov	r1, r5
 800577a:	4638      	mov	r0, r7
 800577c:	f7ff ffc2 	bl	8005704 <sbrk_aligned>
 8005780:	1c43      	adds	r3, r0, #1
 8005782:	4604      	mov	r4, r0
 8005784:	d14d      	bne.n	8005822 <_malloc_r+0xde>
 8005786:	6834      	ldr	r4, [r6, #0]
 8005788:	4626      	mov	r6, r4
 800578a:	2e00      	cmp	r6, #0
 800578c:	d140      	bne.n	8005810 <_malloc_r+0xcc>
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	4631      	mov	r1, r6
 8005792:	4638      	mov	r0, r7
 8005794:	eb04 0803 	add.w	r8, r4, r3
 8005798:	f000 f878 	bl	800588c <_sbrk_r>
 800579c:	4580      	cmp	r8, r0
 800579e:	d13a      	bne.n	8005816 <_malloc_r+0xd2>
 80057a0:	6821      	ldr	r1, [r4, #0]
 80057a2:	3503      	adds	r5, #3
 80057a4:	1a6d      	subs	r5, r5, r1
 80057a6:	f025 0503 	bic.w	r5, r5, #3
 80057aa:	3508      	adds	r5, #8
 80057ac:	2d0c      	cmp	r5, #12
 80057ae:	bf38      	it	cc
 80057b0:	250c      	movcc	r5, #12
 80057b2:	4638      	mov	r0, r7
 80057b4:	4629      	mov	r1, r5
 80057b6:	f7ff ffa5 	bl	8005704 <sbrk_aligned>
 80057ba:	3001      	adds	r0, #1
 80057bc:	d02b      	beq.n	8005816 <_malloc_r+0xd2>
 80057be:	6823      	ldr	r3, [r4, #0]
 80057c0:	442b      	add	r3, r5
 80057c2:	6023      	str	r3, [r4, #0]
 80057c4:	e00e      	b.n	80057e4 <_malloc_r+0xa0>
 80057c6:	6822      	ldr	r2, [r4, #0]
 80057c8:	1b52      	subs	r2, r2, r5
 80057ca:	d41e      	bmi.n	800580a <_malloc_r+0xc6>
 80057cc:	2a0b      	cmp	r2, #11
 80057ce:	d916      	bls.n	80057fe <_malloc_r+0xba>
 80057d0:	1961      	adds	r1, r4, r5
 80057d2:	42a3      	cmp	r3, r4
 80057d4:	6025      	str	r5, [r4, #0]
 80057d6:	bf18      	it	ne
 80057d8:	6059      	strne	r1, [r3, #4]
 80057da:	6863      	ldr	r3, [r4, #4]
 80057dc:	bf08      	it	eq
 80057de:	6031      	streq	r1, [r6, #0]
 80057e0:	5162      	str	r2, [r4, r5]
 80057e2:	604b      	str	r3, [r1, #4]
 80057e4:	4638      	mov	r0, r7
 80057e6:	f104 060b 	add.w	r6, r4, #11
 80057ea:	f000 f865 	bl	80058b8 <__malloc_unlock>
 80057ee:	f026 0607 	bic.w	r6, r6, #7
 80057f2:	1d23      	adds	r3, r4, #4
 80057f4:	1af2      	subs	r2, r6, r3
 80057f6:	d0b6      	beq.n	8005766 <_malloc_r+0x22>
 80057f8:	1b9b      	subs	r3, r3, r6
 80057fa:	50a3      	str	r3, [r4, r2]
 80057fc:	e7b3      	b.n	8005766 <_malloc_r+0x22>
 80057fe:	6862      	ldr	r2, [r4, #4]
 8005800:	42a3      	cmp	r3, r4
 8005802:	bf0c      	ite	eq
 8005804:	6032      	streq	r2, [r6, #0]
 8005806:	605a      	strne	r2, [r3, #4]
 8005808:	e7ec      	b.n	80057e4 <_malloc_r+0xa0>
 800580a:	4623      	mov	r3, r4
 800580c:	6864      	ldr	r4, [r4, #4]
 800580e:	e7b2      	b.n	8005776 <_malloc_r+0x32>
 8005810:	4634      	mov	r4, r6
 8005812:	6876      	ldr	r6, [r6, #4]
 8005814:	e7b9      	b.n	800578a <_malloc_r+0x46>
 8005816:	230c      	movs	r3, #12
 8005818:	4638      	mov	r0, r7
 800581a:	603b      	str	r3, [r7, #0]
 800581c:	f000 f84c 	bl	80058b8 <__malloc_unlock>
 8005820:	e7a1      	b.n	8005766 <_malloc_r+0x22>
 8005822:	6025      	str	r5, [r4, #0]
 8005824:	e7de      	b.n	80057e4 <_malloc_r+0xa0>
 8005826:	bf00      	nop
 8005828:	200011cc 	.word	0x200011cc

0800582c <_realloc_r>:
 800582c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005830:	4680      	mov	r8, r0
 8005832:	4614      	mov	r4, r2
 8005834:	460e      	mov	r6, r1
 8005836:	b921      	cbnz	r1, 8005842 <_realloc_r+0x16>
 8005838:	4611      	mov	r1, r2
 800583a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800583e:	f7ff bf81 	b.w	8005744 <_malloc_r>
 8005842:	b92a      	cbnz	r2, 8005850 <_realloc_r+0x24>
 8005844:	f7ff ff16 	bl	8005674 <_free_r>
 8005848:	4625      	mov	r5, r4
 800584a:	4628      	mov	r0, r5
 800584c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005850:	f000 f838 	bl	80058c4 <_malloc_usable_size_r>
 8005854:	4284      	cmp	r4, r0
 8005856:	4607      	mov	r7, r0
 8005858:	d802      	bhi.n	8005860 <_realloc_r+0x34>
 800585a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800585e:	d812      	bhi.n	8005886 <_realloc_r+0x5a>
 8005860:	4621      	mov	r1, r4
 8005862:	4640      	mov	r0, r8
 8005864:	f7ff ff6e 	bl	8005744 <_malloc_r>
 8005868:	4605      	mov	r5, r0
 800586a:	2800      	cmp	r0, #0
 800586c:	d0ed      	beq.n	800584a <_realloc_r+0x1e>
 800586e:	42bc      	cmp	r4, r7
 8005870:	4622      	mov	r2, r4
 8005872:	4631      	mov	r1, r6
 8005874:	bf28      	it	cs
 8005876:	463a      	movcs	r2, r7
 8005878:	f7ff fbac 	bl	8004fd4 <memcpy>
 800587c:	4631      	mov	r1, r6
 800587e:	4640      	mov	r0, r8
 8005880:	f7ff fef8 	bl	8005674 <_free_r>
 8005884:	e7e1      	b.n	800584a <_realloc_r+0x1e>
 8005886:	4635      	mov	r5, r6
 8005888:	e7df      	b.n	800584a <_realloc_r+0x1e>
	...

0800588c <_sbrk_r>:
 800588c:	b538      	push	{r3, r4, r5, lr}
 800588e:	2300      	movs	r3, #0
 8005890:	4d05      	ldr	r5, [pc, #20]	; (80058a8 <_sbrk_r+0x1c>)
 8005892:	4604      	mov	r4, r0
 8005894:	4608      	mov	r0, r1
 8005896:	602b      	str	r3, [r5, #0]
 8005898:	f7fb ff68 	bl	800176c <_sbrk>
 800589c:	1c43      	adds	r3, r0, #1
 800589e:	d102      	bne.n	80058a6 <_sbrk_r+0x1a>
 80058a0:	682b      	ldr	r3, [r5, #0]
 80058a2:	b103      	cbz	r3, 80058a6 <_sbrk_r+0x1a>
 80058a4:	6023      	str	r3, [r4, #0]
 80058a6:	bd38      	pop	{r3, r4, r5, pc}
 80058a8:	200011d4 	.word	0x200011d4

080058ac <__malloc_lock>:
 80058ac:	4801      	ldr	r0, [pc, #4]	; (80058b4 <__malloc_lock+0x8>)
 80058ae:	f000 b811 	b.w	80058d4 <__retarget_lock_acquire_recursive>
 80058b2:	bf00      	nop
 80058b4:	200011d8 	.word	0x200011d8

080058b8 <__malloc_unlock>:
 80058b8:	4801      	ldr	r0, [pc, #4]	; (80058c0 <__malloc_unlock+0x8>)
 80058ba:	f000 b80c 	b.w	80058d6 <__retarget_lock_release_recursive>
 80058be:	bf00      	nop
 80058c0:	200011d8 	.word	0x200011d8

080058c4 <_malloc_usable_size_r>:
 80058c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058c8:	1f18      	subs	r0, r3, #4
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	bfbc      	itt	lt
 80058ce:	580b      	ldrlt	r3, [r1, r0]
 80058d0:	18c0      	addlt	r0, r0, r3
 80058d2:	4770      	bx	lr

080058d4 <__retarget_lock_acquire_recursive>:
 80058d4:	4770      	bx	lr

080058d6 <__retarget_lock_release_recursive>:
 80058d6:	4770      	bx	lr

080058d8 <pow>:
 80058d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058dc:	4614      	mov	r4, r2
 80058de:	461d      	mov	r5, r3
 80058e0:	4680      	mov	r8, r0
 80058e2:	4689      	mov	r9, r1
 80058e4:	f000 f860 	bl	80059a8 <__ieee754_pow>
 80058e8:	4622      	mov	r2, r4
 80058ea:	4606      	mov	r6, r0
 80058ec:	460f      	mov	r7, r1
 80058ee:	462b      	mov	r3, r5
 80058f0:	4620      	mov	r0, r4
 80058f2:	4629      	mov	r1, r5
 80058f4:	f7fb f88a 	bl	8000a0c <__aeabi_dcmpun>
 80058f8:	bbc8      	cbnz	r0, 800596e <pow+0x96>
 80058fa:	2200      	movs	r2, #0
 80058fc:	2300      	movs	r3, #0
 80058fe:	4640      	mov	r0, r8
 8005900:	4649      	mov	r1, r9
 8005902:	f7fb f851 	bl	80009a8 <__aeabi_dcmpeq>
 8005906:	b1b8      	cbz	r0, 8005938 <pow+0x60>
 8005908:	2200      	movs	r2, #0
 800590a:	2300      	movs	r3, #0
 800590c:	4620      	mov	r0, r4
 800590e:	4629      	mov	r1, r5
 8005910:	f7fb f84a 	bl	80009a8 <__aeabi_dcmpeq>
 8005914:	2800      	cmp	r0, #0
 8005916:	d141      	bne.n	800599c <pow+0xc4>
 8005918:	4620      	mov	r0, r4
 800591a:	4629      	mov	r1, r5
 800591c:	f000 fe39 	bl	8006592 <finite>
 8005920:	b328      	cbz	r0, 800596e <pow+0x96>
 8005922:	2200      	movs	r2, #0
 8005924:	2300      	movs	r3, #0
 8005926:	4620      	mov	r0, r4
 8005928:	4629      	mov	r1, r5
 800592a:	f7fb f847 	bl	80009bc <__aeabi_dcmplt>
 800592e:	b1f0      	cbz	r0, 800596e <pow+0x96>
 8005930:	f7ff fb26 	bl	8004f80 <__errno>
 8005934:	2322      	movs	r3, #34	; 0x22
 8005936:	e019      	b.n	800596c <pow+0x94>
 8005938:	4630      	mov	r0, r6
 800593a:	4639      	mov	r1, r7
 800593c:	f000 fe29 	bl	8006592 <finite>
 8005940:	b9c8      	cbnz	r0, 8005976 <pow+0x9e>
 8005942:	4640      	mov	r0, r8
 8005944:	4649      	mov	r1, r9
 8005946:	f000 fe24 	bl	8006592 <finite>
 800594a:	b1a0      	cbz	r0, 8005976 <pow+0x9e>
 800594c:	4620      	mov	r0, r4
 800594e:	4629      	mov	r1, r5
 8005950:	f000 fe1f 	bl	8006592 <finite>
 8005954:	b178      	cbz	r0, 8005976 <pow+0x9e>
 8005956:	4632      	mov	r2, r6
 8005958:	463b      	mov	r3, r7
 800595a:	4630      	mov	r0, r6
 800595c:	4639      	mov	r1, r7
 800595e:	f7fb f855 	bl	8000a0c <__aeabi_dcmpun>
 8005962:	2800      	cmp	r0, #0
 8005964:	d0e4      	beq.n	8005930 <pow+0x58>
 8005966:	f7ff fb0b 	bl	8004f80 <__errno>
 800596a:	2321      	movs	r3, #33	; 0x21
 800596c:	6003      	str	r3, [r0, #0]
 800596e:	4630      	mov	r0, r6
 8005970:	4639      	mov	r1, r7
 8005972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005976:	2200      	movs	r2, #0
 8005978:	2300      	movs	r3, #0
 800597a:	4630      	mov	r0, r6
 800597c:	4639      	mov	r1, r7
 800597e:	f7fb f813 	bl	80009a8 <__aeabi_dcmpeq>
 8005982:	2800      	cmp	r0, #0
 8005984:	d0f3      	beq.n	800596e <pow+0x96>
 8005986:	4640      	mov	r0, r8
 8005988:	4649      	mov	r1, r9
 800598a:	f000 fe02 	bl	8006592 <finite>
 800598e:	2800      	cmp	r0, #0
 8005990:	d0ed      	beq.n	800596e <pow+0x96>
 8005992:	4620      	mov	r0, r4
 8005994:	4629      	mov	r1, r5
 8005996:	f000 fdfc 	bl	8006592 <finite>
 800599a:	e7c8      	b.n	800592e <pow+0x56>
 800599c:	2600      	movs	r6, #0
 800599e:	4f01      	ldr	r7, [pc, #4]	; (80059a4 <pow+0xcc>)
 80059a0:	e7e5      	b.n	800596e <pow+0x96>
 80059a2:	bf00      	nop
 80059a4:	3ff00000 	.word	0x3ff00000

080059a8 <__ieee754_pow>:
 80059a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ac:	b093      	sub	sp, #76	; 0x4c
 80059ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80059b2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80059b6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80059ba:	4689      	mov	r9, r1
 80059bc:	ea56 0102 	orrs.w	r1, r6, r2
 80059c0:	4680      	mov	r8, r0
 80059c2:	d111      	bne.n	80059e8 <__ieee754_pow+0x40>
 80059c4:	1803      	adds	r3, r0, r0
 80059c6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80059ca:	4152      	adcs	r2, r2
 80059cc:	4299      	cmp	r1, r3
 80059ce:	4b82      	ldr	r3, [pc, #520]	; (8005bd8 <__ieee754_pow+0x230>)
 80059d0:	4193      	sbcs	r3, r2
 80059d2:	f080 84b9 	bcs.w	8006348 <__ieee754_pow+0x9a0>
 80059d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059da:	4640      	mov	r0, r8
 80059dc:	4649      	mov	r1, r9
 80059de:	f7fa fbc5 	bl	800016c <__adddf3>
 80059e2:	4683      	mov	fp, r0
 80059e4:	468c      	mov	ip, r1
 80059e6:	e06f      	b.n	8005ac8 <__ieee754_pow+0x120>
 80059e8:	4b7c      	ldr	r3, [pc, #496]	; (8005bdc <__ieee754_pow+0x234>)
 80059ea:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 80059ee:	429c      	cmp	r4, r3
 80059f0:	464d      	mov	r5, r9
 80059f2:	4682      	mov	sl, r0
 80059f4:	dc06      	bgt.n	8005a04 <__ieee754_pow+0x5c>
 80059f6:	d101      	bne.n	80059fc <__ieee754_pow+0x54>
 80059f8:	2800      	cmp	r0, #0
 80059fa:	d1ec      	bne.n	80059d6 <__ieee754_pow+0x2e>
 80059fc:	429e      	cmp	r6, r3
 80059fe:	dc01      	bgt.n	8005a04 <__ieee754_pow+0x5c>
 8005a00:	d10f      	bne.n	8005a22 <__ieee754_pow+0x7a>
 8005a02:	b172      	cbz	r2, 8005a22 <__ieee754_pow+0x7a>
 8005a04:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005a08:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005a0c:	ea55 050a 	orrs.w	r5, r5, sl
 8005a10:	d1e1      	bne.n	80059d6 <__ieee754_pow+0x2e>
 8005a12:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005a16:	18db      	adds	r3, r3, r3
 8005a18:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005a1c:	4152      	adcs	r2, r2
 8005a1e:	429d      	cmp	r5, r3
 8005a20:	e7d5      	b.n	80059ce <__ieee754_pow+0x26>
 8005a22:	2d00      	cmp	r5, #0
 8005a24:	da39      	bge.n	8005a9a <__ieee754_pow+0xf2>
 8005a26:	4b6e      	ldr	r3, [pc, #440]	; (8005be0 <__ieee754_pow+0x238>)
 8005a28:	429e      	cmp	r6, r3
 8005a2a:	dc52      	bgt.n	8005ad2 <__ieee754_pow+0x12a>
 8005a2c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005a30:	429e      	cmp	r6, r3
 8005a32:	f340 849c 	ble.w	800636e <__ieee754_pow+0x9c6>
 8005a36:	1533      	asrs	r3, r6, #20
 8005a38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005a3c:	2b14      	cmp	r3, #20
 8005a3e:	dd0f      	ble.n	8005a60 <__ieee754_pow+0xb8>
 8005a40:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005a44:	fa22 f103 	lsr.w	r1, r2, r3
 8005a48:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	f040 848e 	bne.w	800636e <__ieee754_pow+0x9c6>
 8005a52:	f001 0101 	and.w	r1, r1, #1
 8005a56:	f1c1 0302 	rsb	r3, r1, #2
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	b182      	cbz	r2, 8005a80 <__ieee754_pow+0xd8>
 8005a5e:	e05d      	b.n	8005b1c <__ieee754_pow+0x174>
 8005a60:	2a00      	cmp	r2, #0
 8005a62:	d159      	bne.n	8005b18 <__ieee754_pow+0x170>
 8005a64:	f1c3 0314 	rsb	r3, r3, #20
 8005a68:	fa46 f103 	asr.w	r1, r6, r3
 8005a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a70:	42b3      	cmp	r3, r6
 8005a72:	f040 8479 	bne.w	8006368 <__ieee754_pow+0x9c0>
 8005a76:	f001 0101 	and.w	r1, r1, #1
 8005a7a:	f1c1 0302 	rsb	r3, r1, #2
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	4b58      	ldr	r3, [pc, #352]	; (8005be4 <__ieee754_pow+0x23c>)
 8005a82:	429e      	cmp	r6, r3
 8005a84:	d132      	bne.n	8005aec <__ieee754_pow+0x144>
 8005a86:	2f00      	cmp	r7, #0
 8005a88:	f280 846a 	bge.w	8006360 <__ieee754_pow+0x9b8>
 8005a8c:	4642      	mov	r2, r8
 8005a8e:	464b      	mov	r3, r9
 8005a90:	2000      	movs	r0, #0
 8005a92:	4954      	ldr	r1, [pc, #336]	; (8005be4 <__ieee754_pow+0x23c>)
 8005a94:	f7fa fe4a 	bl	800072c <__aeabi_ddiv>
 8005a98:	e7a3      	b.n	80059e2 <__ieee754_pow+0x3a>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	2a00      	cmp	r2, #0
 8005aa0:	d13c      	bne.n	8005b1c <__ieee754_pow+0x174>
 8005aa2:	4b4e      	ldr	r3, [pc, #312]	; (8005bdc <__ieee754_pow+0x234>)
 8005aa4:	429e      	cmp	r6, r3
 8005aa6:	d1eb      	bne.n	8005a80 <__ieee754_pow+0xd8>
 8005aa8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005aac:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005ab0:	ea53 030a 	orrs.w	r3, r3, sl
 8005ab4:	f000 8448 	beq.w	8006348 <__ieee754_pow+0x9a0>
 8005ab8:	4b4b      	ldr	r3, [pc, #300]	; (8005be8 <__ieee754_pow+0x240>)
 8005aba:	429c      	cmp	r4, r3
 8005abc:	dd0b      	ble.n	8005ad6 <__ieee754_pow+0x12e>
 8005abe:	2f00      	cmp	r7, #0
 8005ac0:	f2c0 8448 	blt.w	8006354 <__ieee754_pow+0x9ac>
 8005ac4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8005ac8:	4658      	mov	r0, fp
 8005aca:	4661      	mov	r1, ip
 8005acc:	b013      	add	sp, #76	; 0x4c
 8005ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	e7e2      	b.n	8005a9c <__ieee754_pow+0xf4>
 8005ad6:	2f00      	cmp	r7, #0
 8005ad8:	f04f 0b00 	mov.w	fp, #0
 8005adc:	f04f 0c00 	mov.w	ip, #0
 8005ae0:	daf2      	bge.n	8005ac8 <__ieee754_pow+0x120>
 8005ae2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8005ae6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8005aea:	e7ed      	b.n	8005ac8 <__ieee754_pow+0x120>
 8005aec:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8005af0:	d106      	bne.n	8005b00 <__ieee754_pow+0x158>
 8005af2:	4642      	mov	r2, r8
 8005af4:	464b      	mov	r3, r9
 8005af6:	4640      	mov	r0, r8
 8005af8:	4649      	mov	r1, r9
 8005afa:	f7fa fced 	bl	80004d8 <__aeabi_dmul>
 8005afe:	e770      	b.n	80059e2 <__ieee754_pow+0x3a>
 8005b00:	4b3a      	ldr	r3, [pc, #232]	; (8005bec <__ieee754_pow+0x244>)
 8005b02:	429f      	cmp	r7, r3
 8005b04:	d10a      	bne.n	8005b1c <__ieee754_pow+0x174>
 8005b06:	2d00      	cmp	r5, #0
 8005b08:	db08      	blt.n	8005b1c <__ieee754_pow+0x174>
 8005b0a:	4640      	mov	r0, r8
 8005b0c:	4649      	mov	r1, r9
 8005b0e:	b013      	add	sp, #76	; 0x4c
 8005b10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b14:	f000 bc5e 	b.w	80063d4 <__ieee754_sqrt>
 8005b18:	2300      	movs	r3, #0
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	4640      	mov	r0, r8
 8005b1e:	4649      	mov	r1, r9
 8005b20:	f000 fd34 	bl	800658c <fabs>
 8005b24:	4683      	mov	fp, r0
 8005b26:	468c      	mov	ip, r1
 8005b28:	f1ba 0f00 	cmp.w	sl, #0
 8005b2c:	d128      	bne.n	8005b80 <__ieee754_pow+0x1d8>
 8005b2e:	b124      	cbz	r4, 8005b3a <__ieee754_pow+0x192>
 8005b30:	4b2c      	ldr	r3, [pc, #176]	; (8005be4 <__ieee754_pow+0x23c>)
 8005b32:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d122      	bne.n	8005b80 <__ieee754_pow+0x1d8>
 8005b3a:	2f00      	cmp	r7, #0
 8005b3c:	da07      	bge.n	8005b4e <__ieee754_pow+0x1a6>
 8005b3e:	465a      	mov	r2, fp
 8005b40:	4663      	mov	r3, ip
 8005b42:	2000      	movs	r0, #0
 8005b44:	4927      	ldr	r1, [pc, #156]	; (8005be4 <__ieee754_pow+0x23c>)
 8005b46:	f7fa fdf1 	bl	800072c <__aeabi_ddiv>
 8005b4a:	4683      	mov	fp, r0
 8005b4c:	468c      	mov	ip, r1
 8005b4e:	2d00      	cmp	r5, #0
 8005b50:	daba      	bge.n	8005ac8 <__ieee754_pow+0x120>
 8005b52:	9b00      	ldr	r3, [sp, #0]
 8005b54:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005b58:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005b5c:	4323      	orrs	r3, r4
 8005b5e:	d108      	bne.n	8005b72 <__ieee754_pow+0x1ca>
 8005b60:	465a      	mov	r2, fp
 8005b62:	4663      	mov	r3, ip
 8005b64:	4658      	mov	r0, fp
 8005b66:	4661      	mov	r1, ip
 8005b68:	f7fa fafe 	bl	8000168 <__aeabi_dsub>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	460b      	mov	r3, r1
 8005b70:	e790      	b.n	8005a94 <__ieee754_pow+0xec>
 8005b72:	9b00      	ldr	r3, [sp, #0]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d1a7      	bne.n	8005ac8 <__ieee754_pow+0x120>
 8005b78:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8005b7c:	469c      	mov	ip, r3
 8005b7e:	e7a3      	b.n	8005ac8 <__ieee754_pow+0x120>
 8005b80:	0feb      	lsrs	r3, r5, #31
 8005b82:	3b01      	subs	r3, #1
 8005b84:	930c      	str	r3, [sp, #48]	; 0x30
 8005b86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b88:	9b00      	ldr	r3, [sp, #0]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	d104      	bne.n	8005b98 <__ieee754_pow+0x1f0>
 8005b8e:	4642      	mov	r2, r8
 8005b90:	464b      	mov	r3, r9
 8005b92:	4640      	mov	r0, r8
 8005b94:	4649      	mov	r1, r9
 8005b96:	e7e7      	b.n	8005b68 <__ieee754_pow+0x1c0>
 8005b98:	4b15      	ldr	r3, [pc, #84]	; (8005bf0 <__ieee754_pow+0x248>)
 8005b9a:	429e      	cmp	r6, r3
 8005b9c:	f340 80f6 	ble.w	8005d8c <__ieee754_pow+0x3e4>
 8005ba0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005ba4:	429e      	cmp	r6, r3
 8005ba6:	4b10      	ldr	r3, [pc, #64]	; (8005be8 <__ieee754_pow+0x240>)
 8005ba8:	dd09      	ble.n	8005bbe <__ieee754_pow+0x216>
 8005baa:	429c      	cmp	r4, r3
 8005bac:	dc0c      	bgt.n	8005bc8 <__ieee754_pow+0x220>
 8005bae:	2f00      	cmp	r7, #0
 8005bb0:	da0c      	bge.n	8005bcc <__ieee754_pow+0x224>
 8005bb2:	2000      	movs	r0, #0
 8005bb4:	b013      	add	sp, #76	; 0x4c
 8005bb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bba:	f000 bce2 	b.w	8006582 <__math_oflow>
 8005bbe:	429c      	cmp	r4, r3
 8005bc0:	dbf5      	blt.n	8005bae <__ieee754_pow+0x206>
 8005bc2:	4b08      	ldr	r3, [pc, #32]	; (8005be4 <__ieee754_pow+0x23c>)
 8005bc4:	429c      	cmp	r4, r3
 8005bc6:	dd15      	ble.n	8005bf4 <__ieee754_pow+0x24c>
 8005bc8:	2f00      	cmp	r7, #0
 8005bca:	dcf2      	bgt.n	8005bb2 <__ieee754_pow+0x20a>
 8005bcc:	2000      	movs	r0, #0
 8005bce:	b013      	add	sp, #76	; 0x4c
 8005bd0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd4:	f000 bcd0 	b.w	8006578 <__math_uflow>
 8005bd8:	fff00000 	.word	0xfff00000
 8005bdc:	7ff00000 	.word	0x7ff00000
 8005be0:	433fffff 	.word	0x433fffff
 8005be4:	3ff00000 	.word	0x3ff00000
 8005be8:	3fefffff 	.word	0x3fefffff
 8005bec:	3fe00000 	.word	0x3fe00000
 8005bf0:	41e00000 	.word	0x41e00000
 8005bf4:	4661      	mov	r1, ip
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	4658      	mov	r0, fp
 8005bfa:	4b5f      	ldr	r3, [pc, #380]	; (8005d78 <__ieee754_pow+0x3d0>)
 8005bfc:	f7fa fab4 	bl	8000168 <__aeabi_dsub>
 8005c00:	a355      	add	r3, pc, #340	; (adr r3, 8005d58 <__ieee754_pow+0x3b0>)
 8005c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c06:	4604      	mov	r4, r0
 8005c08:	460d      	mov	r5, r1
 8005c0a:	f7fa fc65 	bl	80004d8 <__aeabi_dmul>
 8005c0e:	a354      	add	r3, pc, #336	; (adr r3, 8005d60 <__ieee754_pow+0x3b8>)
 8005c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c14:	4606      	mov	r6, r0
 8005c16:	460f      	mov	r7, r1
 8005c18:	4620      	mov	r0, r4
 8005c1a:	4629      	mov	r1, r5
 8005c1c:	f7fa fc5c 	bl	80004d8 <__aeabi_dmul>
 8005c20:	2200      	movs	r2, #0
 8005c22:	4682      	mov	sl, r0
 8005c24:	468b      	mov	fp, r1
 8005c26:	4620      	mov	r0, r4
 8005c28:	4629      	mov	r1, r5
 8005c2a:	4b54      	ldr	r3, [pc, #336]	; (8005d7c <__ieee754_pow+0x3d4>)
 8005c2c:	f7fa fc54 	bl	80004d8 <__aeabi_dmul>
 8005c30:	4602      	mov	r2, r0
 8005c32:	460b      	mov	r3, r1
 8005c34:	a14c      	add	r1, pc, #304	; (adr r1, 8005d68 <__ieee754_pow+0x3c0>)
 8005c36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c3a:	f7fa fa95 	bl	8000168 <__aeabi_dsub>
 8005c3e:	4622      	mov	r2, r4
 8005c40:	462b      	mov	r3, r5
 8005c42:	f7fa fc49 	bl	80004d8 <__aeabi_dmul>
 8005c46:	4602      	mov	r2, r0
 8005c48:	460b      	mov	r3, r1
 8005c4a:	2000      	movs	r0, #0
 8005c4c:	494c      	ldr	r1, [pc, #304]	; (8005d80 <__ieee754_pow+0x3d8>)
 8005c4e:	f7fa fa8b 	bl	8000168 <__aeabi_dsub>
 8005c52:	4622      	mov	r2, r4
 8005c54:	462b      	mov	r3, r5
 8005c56:	4680      	mov	r8, r0
 8005c58:	4689      	mov	r9, r1
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	4629      	mov	r1, r5
 8005c5e:	f7fa fc3b 	bl	80004d8 <__aeabi_dmul>
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	4640      	mov	r0, r8
 8005c68:	4649      	mov	r1, r9
 8005c6a:	f7fa fc35 	bl	80004d8 <__aeabi_dmul>
 8005c6e:	a340      	add	r3, pc, #256	; (adr r3, 8005d70 <__ieee754_pow+0x3c8>)
 8005c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c74:	f7fa fc30 	bl	80004d8 <__aeabi_dmul>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4650      	mov	r0, sl
 8005c7e:	4659      	mov	r1, fp
 8005c80:	f7fa fa72 	bl	8000168 <__aeabi_dsub>
 8005c84:	f04f 0a00 	mov.w	sl, #0
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	4604      	mov	r4, r0
 8005c8e:	460d      	mov	r5, r1
 8005c90:	4630      	mov	r0, r6
 8005c92:	4639      	mov	r1, r7
 8005c94:	f7fa fa6a 	bl	800016c <__adddf3>
 8005c98:	4632      	mov	r2, r6
 8005c9a:	463b      	mov	r3, r7
 8005c9c:	4650      	mov	r0, sl
 8005c9e:	468b      	mov	fp, r1
 8005ca0:	f7fa fa62 	bl	8000168 <__aeabi_dsub>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	4620      	mov	r0, r4
 8005caa:	4629      	mov	r1, r5
 8005cac:	f7fa fa5c 	bl	8000168 <__aeabi_dsub>
 8005cb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005cb4:	9b00      	ldr	r3, [sp, #0]
 8005cb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	f04f 0600 	mov.w	r6, #0
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	bf0c      	ite	eq
 8005cc6:	4b2f      	ldreq	r3, [pc, #188]	; (8005d84 <__ieee754_pow+0x3dc>)
 8005cc8:	4b2b      	ldrne	r3, [pc, #172]	; (8005d78 <__ieee754_pow+0x3d0>)
 8005cca:	4604      	mov	r4, r0
 8005ccc:	460d      	mov	r5, r1
 8005cce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cd2:	e9cd 2300 	strd	r2, r3, [sp]
 8005cd6:	4632      	mov	r2, r6
 8005cd8:	463b      	mov	r3, r7
 8005cda:	f7fa fa45 	bl	8000168 <__aeabi_dsub>
 8005cde:	4652      	mov	r2, sl
 8005ce0:	465b      	mov	r3, fp
 8005ce2:	f7fa fbf9 	bl	80004d8 <__aeabi_dmul>
 8005ce6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cea:	4680      	mov	r8, r0
 8005cec:	4689      	mov	r9, r1
 8005cee:	4620      	mov	r0, r4
 8005cf0:	4629      	mov	r1, r5
 8005cf2:	f7fa fbf1 	bl	80004d8 <__aeabi_dmul>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	4640      	mov	r0, r8
 8005cfc:	4649      	mov	r1, r9
 8005cfe:	f7fa fa35 	bl	800016c <__adddf3>
 8005d02:	4632      	mov	r2, r6
 8005d04:	463b      	mov	r3, r7
 8005d06:	4680      	mov	r8, r0
 8005d08:	4689      	mov	r9, r1
 8005d0a:	4650      	mov	r0, sl
 8005d0c:	4659      	mov	r1, fp
 8005d0e:	f7fa fbe3 	bl	80004d8 <__aeabi_dmul>
 8005d12:	4604      	mov	r4, r0
 8005d14:	460d      	mov	r5, r1
 8005d16:	460b      	mov	r3, r1
 8005d18:	4602      	mov	r2, r0
 8005d1a:	4649      	mov	r1, r9
 8005d1c:	4640      	mov	r0, r8
 8005d1e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005d22:	f7fa fa23 	bl	800016c <__adddf3>
 8005d26:	4b18      	ldr	r3, [pc, #96]	; (8005d88 <__ieee754_pow+0x3e0>)
 8005d28:	4682      	mov	sl, r0
 8005d2a:	4299      	cmp	r1, r3
 8005d2c:	460f      	mov	r7, r1
 8005d2e:	460e      	mov	r6, r1
 8005d30:	f340 82e5 	ble.w	80062fe <__ieee754_pow+0x956>
 8005d34:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005d38:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005d3c:	4303      	orrs	r3, r0
 8005d3e:	f000 81df 	beq.w	8006100 <__ieee754_pow+0x758>
 8005d42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d46:	2200      	movs	r2, #0
 8005d48:	2300      	movs	r3, #0
 8005d4a:	f7fa fe37 	bl	80009bc <__aeabi_dcmplt>
 8005d4e:	3800      	subs	r0, #0
 8005d50:	bf18      	it	ne
 8005d52:	2001      	movne	r0, #1
 8005d54:	e72e      	b.n	8005bb4 <__ieee754_pow+0x20c>
 8005d56:	bf00      	nop
 8005d58:	60000000 	.word	0x60000000
 8005d5c:	3ff71547 	.word	0x3ff71547
 8005d60:	f85ddf44 	.word	0xf85ddf44
 8005d64:	3e54ae0b 	.word	0x3e54ae0b
 8005d68:	55555555 	.word	0x55555555
 8005d6c:	3fd55555 	.word	0x3fd55555
 8005d70:	652b82fe 	.word	0x652b82fe
 8005d74:	3ff71547 	.word	0x3ff71547
 8005d78:	3ff00000 	.word	0x3ff00000
 8005d7c:	3fd00000 	.word	0x3fd00000
 8005d80:	3fe00000 	.word	0x3fe00000
 8005d84:	bff00000 	.word	0xbff00000
 8005d88:	408fffff 	.word	0x408fffff
 8005d8c:	4bd2      	ldr	r3, [pc, #840]	; (80060d8 <__ieee754_pow+0x730>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	402b      	ands	r3, r5
 8005d92:	b943      	cbnz	r3, 8005da6 <__ieee754_pow+0x3fe>
 8005d94:	4658      	mov	r0, fp
 8005d96:	4661      	mov	r1, ip
 8005d98:	4bd0      	ldr	r3, [pc, #832]	; (80060dc <__ieee754_pow+0x734>)
 8005d9a:	f7fa fb9d 	bl	80004d8 <__aeabi_dmul>
 8005d9e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005da2:	4683      	mov	fp, r0
 8005da4:	460c      	mov	r4, r1
 8005da6:	1523      	asrs	r3, r4, #20
 8005da8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005dac:	4413      	add	r3, r2
 8005dae:	930b      	str	r3, [sp, #44]	; 0x2c
 8005db0:	4bcb      	ldr	r3, [pc, #812]	; (80060e0 <__ieee754_pow+0x738>)
 8005db2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005db6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005dba:	429c      	cmp	r4, r3
 8005dbc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005dc0:	dd08      	ble.n	8005dd4 <__ieee754_pow+0x42c>
 8005dc2:	4bc8      	ldr	r3, [pc, #800]	; (80060e4 <__ieee754_pow+0x73c>)
 8005dc4:	429c      	cmp	r4, r3
 8005dc6:	f340 8199 	ble.w	80060fc <__ieee754_pow+0x754>
 8005dca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dcc:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dd4:	2600      	movs	r6, #0
 8005dd6:	00f3      	lsls	r3, r6, #3
 8005dd8:	930d      	str	r3, [sp, #52]	; 0x34
 8005dda:	4bc3      	ldr	r3, [pc, #780]	; (80060e8 <__ieee754_pow+0x740>)
 8005ddc:	4658      	mov	r0, fp
 8005dde:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005de2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005de6:	4629      	mov	r1, r5
 8005de8:	461a      	mov	r2, r3
 8005dea:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8005dee:	4623      	mov	r3, r4
 8005df0:	f7fa f9ba 	bl	8000168 <__aeabi_dsub>
 8005df4:	46da      	mov	sl, fp
 8005df6:	462b      	mov	r3, r5
 8005df8:	4652      	mov	r2, sl
 8005dfa:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005dfe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005e02:	f7fa f9b3 	bl	800016c <__adddf3>
 8005e06:	4602      	mov	r2, r0
 8005e08:	460b      	mov	r3, r1
 8005e0a:	2000      	movs	r0, #0
 8005e0c:	49b7      	ldr	r1, [pc, #732]	; (80060ec <__ieee754_pow+0x744>)
 8005e0e:	f7fa fc8d 	bl	800072c <__aeabi_ddiv>
 8005e12:	4602      	mov	r2, r0
 8005e14:	460b      	mov	r3, r1
 8005e16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e1a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005e1e:	f7fa fb5b 	bl	80004d8 <__aeabi_dmul>
 8005e22:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005e26:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8005e2a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005e2e:	2300      	movs	r3, #0
 8005e30:	2200      	movs	r2, #0
 8005e32:	46ab      	mov	fp, r5
 8005e34:	106d      	asrs	r5, r5, #1
 8005e36:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005e3a:	9304      	str	r3, [sp, #16]
 8005e3c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005e40:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005e44:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8005e48:	4640      	mov	r0, r8
 8005e4a:	4649      	mov	r1, r9
 8005e4c:	4614      	mov	r4, r2
 8005e4e:	461d      	mov	r5, r3
 8005e50:	f7fa fb42 	bl	80004d8 <__aeabi_dmul>
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005e5c:	f7fa f984 	bl	8000168 <__aeabi_dsub>
 8005e60:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e64:	4606      	mov	r6, r0
 8005e66:	460f      	mov	r7, r1
 8005e68:	4620      	mov	r0, r4
 8005e6a:	4629      	mov	r1, r5
 8005e6c:	f7fa f97c 	bl	8000168 <__aeabi_dsub>
 8005e70:	4602      	mov	r2, r0
 8005e72:	460b      	mov	r3, r1
 8005e74:	4650      	mov	r0, sl
 8005e76:	4659      	mov	r1, fp
 8005e78:	f7fa f976 	bl	8000168 <__aeabi_dsub>
 8005e7c:	4642      	mov	r2, r8
 8005e7e:	464b      	mov	r3, r9
 8005e80:	f7fa fb2a 	bl	80004d8 <__aeabi_dmul>
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	4630      	mov	r0, r6
 8005e8a:	4639      	mov	r1, r7
 8005e8c:	f7fa f96c 	bl	8000168 <__aeabi_dsub>
 8005e90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e94:	f7fa fb20 	bl	80004d8 <__aeabi_dmul>
 8005e98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e9c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	f7fa fb18 	bl	80004d8 <__aeabi_dmul>
 8005ea8:	a379      	add	r3, pc, #484	; (adr r3, 8006090 <__ieee754_pow+0x6e8>)
 8005eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eae:	4604      	mov	r4, r0
 8005eb0:	460d      	mov	r5, r1
 8005eb2:	f7fa fb11 	bl	80004d8 <__aeabi_dmul>
 8005eb6:	a378      	add	r3, pc, #480	; (adr r3, 8006098 <__ieee754_pow+0x6f0>)
 8005eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebc:	f7fa f956 	bl	800016c <__adddf3>
 8005ec0:	4622      	mov	r2, r4
 8005ec2:	462b      	mov	r3, r5
 8005ec4:	f7fa fb08 	bl	80004d8 <__aeabi_dmul>
 8005ec8:	a375      	add	r3, pc, #468	; (adr r3, 80060a0 <__ieee754_pow+0x6f8>)
 8005eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ece:	f7fa f94d 	bl	800016c <__adddf3>
 8005ed2:	4622      	mov	r2, r4
 8005ed4:	462b      	mov	r3, r5
 8005ed6:	f7fa faff 	bl	80004d8 <__aeabi_dmul>
 8005eda:	a373      	add	r3, pc, #460	; (adr r3, 80060a8 <__ieee754_pow+0x700>)
 8005edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee0:	f7fa f944 	bl	800016c <__adddf3>
 8005ee4:	4622      	mov	r2, r4
 8005ee6:	462b      	mov	r3, r5
 8005ee8:	f7fa faf6 	bl	80004d8 <__aeabi_dmul>
 8005eec:	a370      	add	r3, pc, #448	; (adr r3, 80060b0 <__ieee754_pow+0x708>)
 8005eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef2:	f7fa f93b 	bl	800016c <__adddf3>
 8005ef6:	4622      	mov	r2, r4
 8005ef8:	462b      	mov	r3, r5
 8005efa:	f7fa faed 	bl	80004d8 <__aeabi_dmul>
 8005efe:	a36e      	add	r3, pc, #440	; (adr r3, 80060b8 <__ieee754_pow+0x710>)
 8005f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f04:	f7fa f932 	bl	800016c <__adddf3>
 8005f08:	4622      	mov	r2, r4
 8005f0a:	4606      	mov	r6, r0
 8005f0c:	460f      	mov	r7, r1
 8005f0e:	462b      	mov	r3, r5
 8005f10:	4620      	mov	r0, r4
 8005f12:	4629      	mov	r1, r5
 8005f14:	f7fa fae0 	bl	80004d8 <__aeabi_dmul>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	4630      	mov	r0, r6
 8005f1e:	4639      	mov	r1, r7
 8005f20:	f7fa fada 	bl	80004d8 <__aeabi_dmul>
 8005f24:	4604      	mov	r4, r0
 8005f26:	460d      	mov	r5, r1
 8005f28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f2c:	4642      	mov	r2, r8
 8005f2e:	464b      	mov	r3, r9
 8005f30:	f7fa f91c 	bl	800016c <__adddf3>
 8005f34:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f38:	f7fa face 	bl	80004d8 <__aeabi_dmul>
 8005f3c:	4622      	mov	r2, r4
 8005f3e:	462b      	mov	r3, r5
 8005f40:	f7fa f914 	bl	800016c <__adddf3>
 8005f44:	4642      	mov	r2, r8
 8005f46:	4606      	mov	r6, r0
 8005f48:	460f      	mov	r7, r1
 8005f4a:	464b      	mov	r3, r9
 8005f4c:	4640      	mov	r0, r8
 8005f4e:	4649      	mov	r1, r9
 8005f50:	f7fa fac2 	bl	80004d8 <__aeabi_dmul>
 8005f54:	2200      	movs	r2, #0
 8005f56:	4b66      	ldr	r3, [pc, #408]	; (80060f0 <__ieee754_pow+0x748>)
 8005f58:	4682      	mov	sl, r0
 8005f5a:	468b      	mov	fp, r1
 8005f5c:	f7fa f906 	bl	800016c <__adddf3>
 8005f60:	4632      	mov	r2, r6
 8005f62:	463b      	mov	r3, r7
 8005f64:	f7fa f902 	bl	800016c <__adddf3>
 8005f68:	2400      	movs	r4, #0
 8005f6a:	460d      	mov	r5, r1
 8005f6c:	4622      	mov	r2, r4
 8005f6e:	460b      	mov	r3, r1
 8005f70:	4640      	mov	r0, r8
 8005f72:	4649      	mov	r1, r9
 8005f74:	f7fa fab0 	bl	80004d8 <__aeabi_dmul>
 8005f78:	2200      	movs	r2, #0
 8005f7a:	4680      	mov	r8, r0
 8005f7c:	4689      	mov	r9, r1
 8005f7e:	4620      	mov	r0, r4
 8005f80:	4629      	mov	r1, r5
 8005f82:	4b5b      	ldr	r3, [pc, #364]	; (80060f0 <__ieee754_pow+0x748>)
 8005f84:	f7fa f8f0 	bl	8000168 <__aeabi_dsub>
 8005f88:	4652      	mov	r2, sl
 8005f8a:	465b      	mov	r3, fp
 8005f8c:	f7fa f8ec 	bl	8000168 <__aeabi_dsub>
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	4630      	mov	r0, r6
 8005f96:	4639      	mov	r1, r7
 8005f98:	f7fa f8e6 	bl	8000168 <__aeabi_dsub>
 8005f9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005fa0:	f7fa fa9a 	bl	80004d8 <__aeabi_dmul>
 8005fa4:	4622      	mov	r2, r4
 8005fa6:	4606      	mov	r6, r0
 8005fa8:	460f      	mov	r7, r1
 8005faa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005fae:	462b      	mov	r3, r5
 8005fb0:	f7fa fa92 	bl	80004d8 <__aeabi_dmul>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	4630      	mov	r0, r6
 8005fba:	4639      	mov	r1, r7
 8005fbc:	f7fa f8d6 	bl	800016c <__adddf3>
 8005fc0:	2400      	movs	r4, #0
 8005fc2:	4606      	mov	r6, r0
 8005fc4:	460f      	mov	r7, r1
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	460b      	mov	r3, r1
 8005fca:	4640      	mov	r0, r8
 8005fcc:	4649      	mov	r1, r9
 8005fce:	f7fa f8cd 	bl	800016c <__adddf3>
 8005fd2:	a33b      	add	r3, pc, #236	; (adr r3, 80060c0 <__ieee754_pow+0x718>)
 8005fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd8:	4620      	mov	r0, r4
 8005fda:	460d      	mov	r5, r1
 8005fdc:	f7fa fa7c 	bl	80004d8 <__aeabi_dmul>
 8005fe0:	4642      	mov	r2, r8
 8005fe2:	464b      	mov	r3, r9
 8005fe4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005fe8:	4620      	mov	r0, r4
 8005fea:	4629      	mov	r1, r5
 8005fec:	f7fa f8bc 	bl	8000168 <__aeabi_dsub>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	4639      	mov	r1, r7
 8005ff8:	f7fa f8b6 	bl	8000168 <__aeabi_dsub>
 8005ffc:	a332      	add	r3, pc, #200	; (adr r3, 80060c8 <__ieee754_pow+0x720>)
 8005ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006002:	f7fa fa69 	bl	80004d8 <__aeabi_dmul>
 8006006:	a332      	add	r3, pc, #200	; (adr r3, 80060d0 <__ieee754_pow+0x728>)
 8006008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600c:	4606      	mov	r6, r0
 800600e:	460f      	mov	r7, r1
 8006010:	4620      	mov	r0, r4
 8006012:	4629      	mov	r1, r5
 8006014:	f7fa fa60 	bl	80004d8 <__aeabi_dmul>
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	4630      	mov	r0, r6
 800601e:	4639      	mov	r1, r7
 8006020:	f7fa f8a4 	bl	800016c <__adddf3>
 8006024:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006026:	4b33      	ldr	r3, [pc, #204]	; (80060f4 <__ieee754_pow+0x74c>)
 8006028:	f04f 0a00 	mov.w	sl, #0
 800602c:	4413      	add	r3, r2
 800602e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006032:	f7fa f89b 	bl	800016c <__adddf3>
 8006036:	4680      	mov	r8, r0
 8006038:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800603a:	4689      	mov	r9, r1
 800603c:	f7fa f9e2 	bl	8000404 <__aeabi_i2d>
 8006040:	4604      	mov	r4, r0
 8006042:	460d      	mov	r5, r1
 8006044:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006046:	4b2c      	ldr	r3, [pc, #176]	; (80060f8 <__ieee754_pow+0x750>)
 8006048:	4413      	add	r3, r2
 800604a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800604e:	4642      	mov	r2, r8
 8006050:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006054:	464b      	mov	r3, r9
 8006056:	f7fa f889 	bl	800016c <__adddf3>
 800605a:	4632      	mov	r2, r6
 800605c:	463b      	mov	r3, r7
 800605e:	f7fa f885 	bl	800016c <__adddf3>
 8006062:	4622      	mov	r2, r4
 8006064:	462b      	mov	r3, r5
 8006066:	f7fa f881 	bl	800016c <__adddf3>
 800606a:	4622      	mov	r2, r4
 800606c:	462b      	mov	r3, r5
 800606e:	4650      	mov	r0, sl
 8006070:	468b      	mov	fp, r1
 8006072:	f7fa f879 	bl	8000168 <__aeabi_dsub>
 8006076:	4632      	mov	r2, r6
 8006078:	463b      	mov	r3, r7
 800607a:	f7fa f875 	bl	8000168 <__aeabi_dsub>
 800607e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006082:	f7fa f871 	bl	8000168 <__aeabi_dsub>
 8006086:	4602      	mov	r2, r0
 8006088:	460b      	mov	r3, r1
 800608a:	4640      	mov	r0, r8
 800608c:	4649      	mov	r1, r9
 800608e:	e60d      	b.n	8005cac <__ieee754_pow+0x304>
 8006090:	4a454eef 	.word	0x4a454eef
 8006094:	3fca7e28 	.word	0x3fca7e28
 8006098:	93c9db65 	.word	0x93c9db65
 800609c:	3fcd864a 	.word	0x3fcd864a
 80060a0:	a91d4101 	.word	0xa91d4101
 80060a4:	3fd17460 	.word	0x3fd17460
 80060a8:	518f264d 	.word	0x518f264d
 80060ac:	3fd55555 	.word	0x3fd55555
 80060b0:	db6fabff 	.word	0xdb6fabff
 80060b4:	3fdb6db6 	.word	0x3fdb6db6
 80060b8:	33333303 	.word	0x33333303
 80060bc:	3fe33333 	.word	0x3fe33333
 80060c0:	e0000000 	.word	0xe0000000
 80060c4:	3feec709 	.word	0x3feec709
 80060c8:	dc3a03fd 	.word	0xdc3a03fd
 80060cc:	3feec709 	.word	0x3feec709
 80060d0:	145b01f5 	.word	0x145b01f5
 80060d4:	be3e2fe0 	.word	0xbe3e2fe0
 80060d8:	7ff00000 	.word	0x7ff00000
 80060dc:	43400000 	.word	0x43400000
 80060e0:	0003988e 	.word	0x0003988e
 80060e4:	000bb679 	.word	0x000bb679
 80060e8:	080067b8 	.word	0x080067b8
 80060ec:	3ff00000 	.word	0x3ff00000
 80060f0:	40080000 	.word	0x40080000
 80060f4:	080067d8 	.word	0x080067d8
 80060f8:	080067c8 	.word	0x080067c8
 80060fc:	2601      	movs	r6, #1
 80060fe:	e66a      	b.n	8005dd6 <__ieee754_pow+0x42e>
 8006100:	a39d      	add	r3, pc, #628	; (adr r3, 8006378 <__ieee754_pow+0x9d0>)
 8006102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006106:	4640      	mov	r0, r8
 8006108:	4649      	mov	r1, r9
 800610a:	f7fa f82f 	bl	800016c <__adddf3>
 800610e:	4622      	mov	r2, r4
 8006110:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006114:	462b      	mov	r3, r5
 8006116:	4650      	mov	r0, sl
 8006118:	4639      	mov	r1, r7
 800611a:	f7fa f825 	bl	8000168 <__aeabi_dsub>
 800611e:	4602      	mov	r2, r0
 8006120:	460b      	mov	r3, r1
 8006122:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006126:	f7fa fc67 	bl	80009f8 <__aeabi_dcmpgt>
 800612a:	2800      	cmp	r0, #0
 800612c:	f47f ae09 	bne.w	8005d42 <__ieee754_pow+0x39a>
 8006130:	4aa3      	ldr	r2, [pc, #652]	; (80063c0 <__ieee754_pow+0xa18>)
 8006132:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8006136:	4293      	cmp	r3, r2
 8006138:	f340 8101 	ble.w	800633e <__ieee754_pow+0x996>
 800613c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006140:	2000      	movs	r0, #0
 8006142:	151b      	asrs	r3, r3, #20
 8006144:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006148:	fa4a f303 	asr.w	r3, sl, r3
 800614c:	4433      	add	r3, r6
 800614e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006152:	4f9c      	ldr	r7, [pc, #624]	; (80063c4 <__ieee754_pow+0xa1c>)
 8006154:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006158:	4117      	asrs	r7, r2
 800615a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800615e:	ea23 0107 	bic.w	r1, r3, r7
 8006162:	f1c2 0214 	rsb	r2, r2, #20
 8006166:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800616a:	460b      	mov	r3, r1
 800616c:	fa4a fa02 	asr.w	sl, sl, r2
 8006170:	2e00      	cmp	r6, #0
 8006172:	4602      	mov	r2, r0
 8006174:	4629      	mov	r1, r5
 8006176:	4620      	mov	r0, r4
 8006178:	bfb8      	it	lt
 800617a:	f1ca 0a00 	rsblt	sl, sl, #0
 800617e:	f7f9 fff3 	bl	8000168 <__aeabi_dsub>
 8006182:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800618a:	2400      	movs	r4, #0
 800618c:	4642      	mov	r2, r8
 800618e:	464b      	mov	r3, r9
 8006190:	f7f9 ffec 	bl	800016c <__adddf3>
 8006194:	a37a      	add	r3, pc, #488	; (adr r3, 8006380 <__ieee754_pow+0x9d8>)
 8006196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619a:	4620      	mov	r0, r4
 800619c:	460d      	mov	r5, r1
 800619e:	f7fa f99b 	bl	80004d8 <__aeabi_dmul>
 80061a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061a6:	4606      	mov	r6, r0
 80061a8:	460f      	mov	r7, r1
 80061aa:	4620      	mov	r0, r4
 80061ac:	4629      	mov	r1, r5
 80061ae:	f7f9 ffdb 	bl	8000168 <__aeabi_dsub>
 80061b2:	4602      	mov	r2, r0
 80061b4:	460b      	mov	r3, r1
 80061b6:	4640      	mov	r0, r8
 80061b8:	4649      	mov	r1, r9
 80061ba:	f7f9 ffd5 	bl	8000168 <__aeabi_dsub>
 80061be:	a372      	add	r3, pc, #456	; (adr r3, 8006388 <__ieee754_pow+0x9e0>)
 80061c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c4:	f7fa f988 	bl	80004d8 <__aeabi_dmul>
 80061c8:	a371      	add	r3, pc, #452	; (adr r3, 8006390 <__ieee754_pow+0x9e8>)
 80061ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ce:	4680      	mov	r8, r0
 80061d0:	4689      	mov	r9, r1
 80061d2:	4620      	mov	r0, r4
 80061d4:	4629      	mov	r1, r5
 80061d6:	f7fa f97f 	bl	80004d8 <__aeabi_dmul>
 80061da:	4602      	mov	r2, r0
 80061dc:	460b      	mov	r3, r1
 80061de:	4640      	mov	r0, r8
 80061e0:	4649      	mov	r1, r9
 80061e2:	f7f9 ffc3 	bl	800016c <__adddf3>
 80061e6:	4604      	mov	r4, r0
 80061e8:	460d      	mov	r5, r1
 80061ea:	4602      	mov	r2, r0
 80061ec:	460b      	mov	r3, r1
 80061ee:	4630      	mov	r0, r6
 80061f0:	4639      	mov	r1, r7
 80061f2:	f7f9 ffbb 	bl	800016c <__adddf3>
 80061f6:	4632      	mov	r2, r6
 80061f8:	463b      	mov	r3, r7
 80061fa:	4680      	mov	r8, r0
 80061fc:	4689      	mov	r9, r1
 80061fe:	f7f9 ffb3 	bl	8000168 <__aeabi_dsub>
 8006202:	4602      	mov	r2, r0
 8006204:	460b      	mov	r3, r1
 8006206:	4620      	mov	r0, r4
 8006208:	4629      	mov	r1, r5
 800620a:	f7f9 ffad 	bl	8000168 <__aeabi_dsub>
 800620e:	4642      	mov	r2, r8
 8006210:	4606      	mov	r6, r0
 8006212:	460f      	mov	r7, r1
 8006214:	464b      	mov	r3, r9
 8006216:	4640      	mov	r0, r8
 8006218:	4649      	mov	r1, r9
 800621a:	f7fa f95d 	bl	80004d8 <__aeabi_dmul>
 800621e:	a35e      	add	r3, pc, #376	; (adr r3, 8006398 <__ieee754_pow+0x9f0>)
 8006220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006224:	4604      	mov	r4, r0
 8006226:	460d      	mov	r5, r1
 8006228:	f7fa f956 	bl	80004d8 <__aeabi_dmul>
 800622c:	a35c      	add	r3, pc, #368	; (adr r3, 80063a0 <__ieee754_pow+0x9f8>)
 800622e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006232:	f7f9 ff99 	bl	8000168 <__aeabi_dsub>
 8006236:	4622      	mov	r2, r4
 8006238:	462b      	mov	r3, r5
 800623a:	f7fa f94d 	bl	80004d8 <__aeabi_dmul>
 800623e:	a35a      	add	r3, pc, #360	; (adr r3, 80063a8 <__ieee754_pow+0xa00>)
 8006240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006244:	f7f9 ff92 	bl	800016c <__adddf3>
 8006248:	4622      	mov	r2, r4
 800624a:	462b      	mov	r3, r5
 800624c:	f7fa f944 	bl	80004d8 <__aeabi_dmul>
 8006250:	a357      	add	r3, pc, #348	; (adr r3, 80063b0 <__ieee754_pow+0xa08>)
 8006252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006256:	f7f9 ff87 	bl	8000168 <__aeabi_dsub>
 800625a:	4622      	mov	r2, r4
 800625c:	462b      	mov	r3, r5
 800625e:	f7fa f93b 	bl	80004d8 <__aeabi_dmul>
 8006262:	a355      	add	r3, pc, #340	; (adr r3, 80063b8 <__ieee754_pow+0xa10>)
 8006264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006268:	f7f9 ff80 	bl	800016c <__adddf3>
 800626c:	4622      	mov	r2, r4
 800626e:	462b      	mov	r3, r5
 8006270:	f7fa f932 	bl	80004d8 <__aeabi_dmul>
 8006274:	4602      	mov	r2, r0
 8006276:	460b      	mov	r3, r1
 8006278:	4640      	mov	r0, r8
 800627a:	4649      	mov	r1, r9
 800627c:	f7f9 ff74 	bl	8000168 <__aeabi_dsub>
 8006280:	4604      	mov	r4, r0
 8006282:	460d      	mov	r5, r1
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	4640      	mov	r0, r8
 800628a:	4649      	mov	r1, r9
 800628c:	f7fa f924 	bl	80004d8 <__aeabi_dmul>
 8006290:	2200      	movs	r2, #0
 8006292:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006296:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800629a:	4620      	mov	r0, r4
 800629c:	4629      	mov	r1, r5
 800629e:	f7f9 ff63 	bl	8000168 <__aeabi_dsub>
 80062a2:	4602      	mov	r2, r0
 80062a4:	460b      	mov	r3, r1
 80062a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062aa:	f7fa fa3f 	bl	800072c <__aeabi_ddiv>
 80062ae:	4632      	mov	r2, r6
 80062b0:	4604      	mov	r4, r0
 80062b2:	460d      	mov	r5, r1
 80062b4:	463b      	mov	r3, r7
 80062b6:	4640      	mov	r0, r8
 80062b8:	4649      	mov	r1, r9
 80062ba:	f7fa f90d 	bl	80004d8 <__aeabi_dmul>
 80062be:	4632      	mov	r2, r6
 80062c0:	463b      	mov	r3, r7
 80062c2:	f7f9 ff53 	bl	800016c <__adddf3>
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	4620      	mov	r0, r4
 80062cc:	4629      	mov	r1, r5
 80062ce:	f7f9 ff4b 	bl	8000168 <__aeabi_dsub>
 80062d2:	4642      	mov	r2, r8
 80062d4:	464b      	mov	r3, r9
 80062d6:	f7f9 ff47 	bl	8000168 <__aeabi_dsub>
 80062da:	4602      	mov	r2, r0
 80062dc:	460b      	mov	r3, r1
 80062de:	2000      	movs	r0, #0
 80062e0:	4939      	ldr	r1, [pc, #228]	; (80063c8 <__ieee754_pow+0xa20>)
 80062e2:	f7f9 ff41 	bl	8000168 <__aeabi_dsub>
 80062e6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80062ea:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80062ee:	da29      	bge.n	8006344 <__ieee754_pow+0x99c>
 80062f0:	4652      	mov	r2, sl
 80062f2:	f000 f955 	bl	80065a0 <scalbn>
 80062f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062fa:	f7ff bbfe 	b.w	8005afa <__ieee754_pow+0x152>
 80062fe:	4b33      	ldr	r3, [pc, #204]	; (80063cc <__ieee754_pow+0xa24>)
 8006300:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006304:	429f      	cmp	r7, r3
 8006306:	f77f af13 	ble.w	8006130 <__ieee754_pow+0x788>
 800630a:	4b31      	ldr	r3, [pc, #196]	; (80063d0 <__ieee754_pow+0xa28>)
 800630c:	440b      	add	r3, r1
 800630e:	4303      	orrs	r3, r0
 8006310:	d009      	beq.n	8006326 <__ieee754_pow+0x97e>
 8006312:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006316:	2200      	movs	r2, #0
 8006318:	2300      	movs	r3, #0
 800631a:	f7fa fb4f 	bl	80009bc <__aeabi_dcmplt>
 800631e:	3800      	subs	r0, #0
 8006320:	bf18      	it	ne
 8006322:	2001      	movne	r0, #1
 8006324:	e453      	b.n	8005bce <__ieee754_pow+0x226>
 8006326:	4622      	mov	r2, r4
 8006328:	462b      	mov	r3, r5
 800632a:	f7f9 ff1d 	bl	8000168 <__aeabi_dsub>
 800632e:	4642      	mov	r2, r8
 8006330:	464b      	mov	r3, r9
 8006332:	f7fa fb57 	bl	80009e4 <__aeabi_dcmpge>
 8006336:	2800      	cmp	r0, #0
 8006338:	f43f aefa 	beq.w	8006130 <__ieee754_pow+0x788>
 800633c:	e7e9      	b.n	8006312 <__ieee754_pow+0x96a>
 800633e:	f04f 0a00 	mov.w	sl, #0
 8006342:	e720      	b.n	8006186 <__ieee754_pow+0x7de>
 8006344:	4621      	mov	r1, r4
 8006346:	e7d6      	b.n	80062f6 <__ieee754_pow+0x94e>
 8006348:	f04f 0b00 	mov.w	fp, #0
 800634c:	f8df c078 	ldr.w	ip, [pc, #120]	; 80063c8 <__ieee754_pow+0xa20>
 8006350:	f7ff bbba 	b.w	8005ac8 <__ieee754_pow+0x120>
 8006354:	f04f 0b00 	mov.w	fp, #0
 8006358:	f04f 0c00 	mov.w	ip, #0
 800635c:	f7ff bbb4 	b.w	8005ac8 <__ieee754_pow+0x120>
 8006360:	4640      	mov	r0, r8
 8006362:	4649      	mov	r1, r9
 8006364:	f7ff bb3d 	b.w	80059e2 <__ieee754_pow+0x3a>
 8006368:	9200      	str	r2, [sp, #0]
 800636a:	f7ff bb89 	b.w	8005a80 <__ieee754_pow+0xd8>
 800636e:	2300      	movs	r3, #0
 8006370:	f7ff bb73 	b.w	8005a5a <__ieee754_pow+0xb2>
 8006374:	f3af 8000 	nop.w
 8006378:	652b82fe 	.word	0x652b82fe
 800637c:	3c971547 	.word	0x3c971547
 8006380:	00000000 	.word	0x00000000
 8006384:	3fe62e43 	.word	0x3fe62e43
 8006388:	fefa39ef 	.word	0xfefa39ef
 800638c:	3fe62e42 	.word	0x3fe62e42
 8006390:	0ca86c39 	.word	0x0ca86c39
 8006394:	be205c61 	.word	0xbe205c61
 8006398:	72bea4d0 	.word	0x72bea4d0
 800639c:	3e663769 	.word	0x3e663769
 80063a0:	c5d26bf1 	.word	0xc5d26bf1
 80063a4:	3ebbbd41 	.word	0x3ebbbd41
 80063a8:	af25de2c 	.word	0xaf25de2c
 80063ac:	3f11566a 	.word	0x3f11566a
 80063b0:	16bebd93 	.word	0x16bebd93
 80063b4:	3f66c16c 	.word	0x3f66c16c
 80063b8:	5555553e 	.word	0x5555553e
 80063bc:	3fc55555 	.word	0x3fc55555
 80063c0:	3fe00000 	.word	0x3fe00000
 80063c4:	000fffff 	.word	0x000fffff
 80063c8:	3ff00000 	.word	0x3ff00000
 80063cc:	4090cbff 	.word	0x4090cbff
 80063d0:	3f6f3400 	.word	0x3f6f3400

080063d4 <__ieee754_sqrt>:
 80063d4:	f8df c158 	ldr.w	ip, [pc, #344]	; 8006530 <__ieee754_sqrt+0x15c>
 80063d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063dc:	ea3c 0c01 	bics.w	ip, ip, r1
 80063e0:	4606      	mov	r6, r0
 80063e2:	460d      	mov	r5, r1
 80063e4:	460c      	mov	r4, r1
 80063e6:	460a      	mov	r2, r1
 80063e8:	4607      	mov	r7, r0
 80063ea:	4603      	mov	r3, r0
 80063ec:	d10f      	bne.n	800640e <__ieee754_sqrt+0x3a>
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	f7fa f871 	bl	80004d8 <__aeabi_dmul>
 80063f6:	4602      	mov	r2, r0
 80063f8:	460b      	mov	r3, r1
 80063fa:	4630      	mov	r0, r6
 80063fc:	4629      	mov	r1, r5
 80063fe:	f7f9 feb5 	bl	800016c <__adddf3>
 8006402:	4606      	mov	r6, r0
 8006404:	460d      	mov	r5, r1
 8006406:	4630      	mov	r0, r6
 8006408:	4629      	mov	r1, r5
 800640a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800640e:	2900      	cmp	r1, #0
 8006410:	dc0e      	bgt.n	8006430 <__ieee754_sqrt+0x5c>
 8006412:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006416:	ea5c 0707 	orrs.w	r7, ip, r7
 800641a:	d0f4      	beq.n	8006406 <__ieee754_sqrt+0x32>
 800641c:	b141      	cbz	r1, 8006430 <__ieee754_sqrt+0x5c>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	f7f9 fea1 	bl	8000168 <__aeabi_dsub>
 8006426:	4602      	mov	r2, r0
 8006428:	460b      	mov	r3, r1
 800642a:	f7fa f97f 	bl	800072c <__aeabi_ddiv>
 800642e:	e7e8      	b.n	8006402 <__ieee754_sqrt+0x2e>
 8006430:	1521      	asrs	r1, r4, #20
 8006432:	d075      	beq.n	8006520 <__ieee754_sqrt+0x14c>
 8006434:	07cc      	lsls	r4, r1, #31
 8006436:	f04f 0400 	mov.w	r4, #0
 800643a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800643e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8006442:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006446:	bf5e      	ittt	pl
 8006448:	0fd9      	lsrpl	r1, r3, #31
 800644a:	005b      	lslpl	r3, r3, #1
 800644c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8006450:	0fd9      	lsrs	r1, r3, #31
 8006452:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8006456:	2516      	movs	r5, #22
 8006458:	4620      	mov	r0, r4
 800645a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800645e:	107f      	asrs	r7, r7, #1
 8006460:	005b      	lsls	r3, r3, #1
 8006462:	1846      	adds	r6, r0, r1
 8006464:	4296      	cmp	r6, r2
 8006466:	bfde      	ittt	le
 8006468:	1b92      	suble	r2, r2, r6
 800646a:	1870      	addle	r0, r6, r1
 800646c:	1864      	addle	r4, r4, r1
 800646e:	0052      	lsls	r2, r2, #1
 8006470:	3d01      	subs	r5, #1
 8006472:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006476:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800647a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800647e:	d1f0      	bne.n	8006462 <__ieee754_sqrt+0x8e>
 8006480:	4629      	mov	r1, r5
 8006482:	f04f 0e20 	mov.w	lr, #32
 8006486:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800648a:	4282      	cmp	r2, r0
 800648c:	eb06 0c05 	add.w	ip, r6, r5
 8006490:	dc02      	bgt.n	8006498 <__ieee754_sqrt+0xc4>
 8006492:	d113      	bne.n	80064bc <__ieee754_sqrt+0xe8>
 8006494:	459c      	cmp	ip, r3
 8006496:	d811      	bhi.n	80064bc <__ieee754_sqrt+0xe8>
 8006498:	f1bc 0f00 	cmp.w	ip, #0
 800649c:	eb0c 0506 	add.w	r5, ip, r6
 80064a0:	da43      	bge.n	800652a <__ieee754_sqrt+0x156>
 80064a2:	2d00      	cmp	r5, #0
 80064a4:	db41      	blt.n	800652a <__ieee754_sqrt+0x156>
 80064a6:	f100 0801 	add.w	r8, r0, #1
 80064aa:	1a12      	subs	r2, r2, r0
 80064ac:	4640      	mov	r0, r8
 80064ae:	459c      	cmp	ip, r3
 80064b0:	bf88      	it	hi
 80064b2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80064b6:	eba3 030c 	sub.w	r3, r3, ip
 80064ba:	4431      	add	r1, r6
 80064bc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80064c0:	f1be 0e01 	subs.w	lr, lr, #1
 80064c4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80064c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80064cc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80064d0:	d1db      	bne.n	800648a <__ieee754_sqrt+0xb6>
 80064d2:	4313      	orrs	r3, r2
 80064d4:	d006      	beq.n	80064e4 <__ieee754_sqrt+0x110>
 80064d6:	1c48      	adds	r0, r1, #1
 80064d8:	bf0b      	itete	eq
 80064da:	4671      	moveq	r1, lr
 80064dc:	3101      	addne	r1, #1
 80064de:	3401      	addeq	r4, #1
 80064e0:	f021 0101 	bicne.w	r1, r1, #1
 80064e4:	1063      	asrs	r3, r4, #1
 80064e6:	0849      	lsrs	r1, r1, #1
 80064e8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80064ec:	07e2      	lsls	r2, r4, #31
 80064ee:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80064f2:	bf48      	it	mi
 80064f4:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80064f8:	460e      	mov	r6, r1
 80064fa:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80064fe:	e782      	b.n	8006406 <__ieee754_sqrt+0x32>
 8006500:	0ada      	lsrs	r2, r3, #11
 8006502:	3815      	subs	r0, #21
 8006504:	055b      	lsls	r3, r3, #21
 8006506:	2a00      	cmp	r2, #0
 8006508:	d0fa      	beq.n	8006500 <__ieee754_sqrt+0x12c>
 800650a:	02d5      	lsls	r5, r2, #11
 800650c:	d50a      	bpl.n	8006524 <__ieee754_sqrt+0x150>
 800650e:	f1c1 0420 	rsb	r4, r1, #32
 8006512:	fa23 f404 	lsr.w	r4, r3, r4
 8006516:	1e4d      	subs	r5, r1, #1
 8006518:	408b      	lsls	r3, r1
 800651a:	4322      	orrs	r2, r4
 800651c:	1b41      	subs	r1, r0, r5
 800651e:	e789      	b.n	8006434 <__ieee754_sqrt+0x60>
 8006520:	4608      	mov	r0, r1
 8006522:	e7f0      	b.n	8006506 <__ieee754_sqrt+0x132>
 8006524:	0052      	lsls	r2, r2, #1
 8006526:	3101      	adds	r1, #1
 8006528:	e7ef      	b.n	800650a <__ieee754_sqrt+0x136>
 800652a:	4680      	mov	r8, r0
 800652c:	e7bd      	b.n	80064aa <__ieee754_sqrt+0xd6>
 800652e:	bf00      	nop
 8006530:	7ff00000 	.word	0x7ff00000

08006534 <with_errno>:
 8006534:	b570      	push	{r4, r5, r6, lr}
 8006536:	4604      	mov	r4, r0
 8006538:	460d      	mov	r5, r1
 800653a:	4616      	mov	r6, r2
 800653c:	f7fe fd20 	bl	8004f80 <__errno>
 8006540:	4629      	mov	r1, r5
 8006542:	6006      	str	r6, [r0, #0]
 8006544:	4620      	mov	r0, r4
 8006546:	bd70      	pop	{r4, r5, r6, pc}

08006548 <xflow>:
 8006548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800654a:	4615      	mov	r5, r2
 800654c:	461c      	mov	r4, r3
 800654e:	b180      	cbz	r0, 8006572 <xflow+0x2a>
 8006550:	4610      	mov	r0, r2
 8006552:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006556:	e9cd 0100 	strd	r0, r1, [sp]
 800655a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800655e:	4628      	mov	r0, r5
 8006560:	4621      	mov	r1, r4
 8006562:	f7f9 ffb9 	bl	80004d8 <__aeabi_dmul>
 8006566:	2222      	movs	r2, #34	; 0x22
 8006568:	b003      	add	sp, #12
 800656a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800656e:	f7ff bfe1 	b.w	8006534 <with_errno>
 8006572:	4610      	mov	r0, r2
 8006574:	4619      	mov	r1, r3
 8006576:	e7ee      	b.n	8006556 <xflow+0xe>

08006578 <__math_uflow>:
 8006578:	2200      	movs	r2, #0
 800657a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800657e:	f7ff bfe3 	b.w	8006548 <xflow>

08006582 <__math_oflow>:
 8006582:	2200      	movs	r2, #0
 8006584:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006588:	f7ff bfde 	b.w	8006548 <xflow>

0800658c <fabs>:
 800658c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006590:	4770      	bx	lr

08006592 <finite>:
 8006592:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8006596:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800659a:	0fc0      	lsrs	r0, r0, #31
 800659c:	4770      	bx	lr
	...

080065a0 <scalbn>:
 80065a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80065a6:	4604      	mov	r4, r0
 80065a8:	460d      	mov	r5, r1
 80065aa:	4617      	mov	r7, r2
 80065ac:	460b      	mov	r3, r1
 80065ae:	b996      	cbnz	r6, 80065d6 <scalbn+0x36>
 80065b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80065b4:	4303      	orrs	r3, r0
 80065b6:	d039      	beq.n	800662c <scalbn+0x8c>
 80065b8:	4b33      	ldr	r3, [pc, #204]	; (8006688 <scalbn+0xe8>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	f7f9 ff8c 	bl	80004d8 <__aeabi_dmul>
 80065c0:	4b32      	ldr	r3, [pc, #200]	; (800668c <scalbn+0xec>)
 80065c2:	4604      	mov	r4, r0
 80065c4:	429f      	cmp	r7, r3
 80065c6:	460d      	mov	r5, r1
 80065c8:	da0f      	bge.n	80065ea <scalbn+0x4a>
 80065ca:	a32b      	add	r3, pc, #172	; (adr r3, 8006678 <scalbn+0xd8>)
 80065cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d0:	f7f9 ff82 	bl	80004d8 <__aeabi_dmul>
 80065d4:	e006      	b.n	80065e4 <scalbn+0x44>
 80065d6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80065da:	4296      	cmp	r6, r2
 80065dc:	d10a      	bne.n	80065f4 <scalbn+0x54>
 80065de:	4602      	mov	r2, r0
 80065e0:	f7f9 fdc4 	bl	800016c <__adddf3>
 80065e4:	4604      	mov	r4, r0
 80065e6:	460d      	mov	r5, r1
 80065e8:	e020      	b.n	800662c <scalbn+0x8c>
 80065ea:	460b      	mov	r3, r1
 80065ec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80065f0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80065f4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80065f8:	19b9      	adds	r1, r7, r6
 80065fa:	4291      	cmp	r1, r2
 80065fc:	dd0e      	ble.n	800661c <scalbn+0x7c>
 80065fe:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006602:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8006606:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800660a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800660e:	4820      	ldr	r0, [pc, #128]	; (8006690 <scalbn+0xf0>)
 8006610:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8006614:	a31a      	add	r3, pc, #104	; (adr r3, 8006680 <scalbn+0xe0>)
 8006616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661a:	e7d9      	b.n	80065d0 <scalbn+0x30>
 800661c:	2900      	cmp	r1, #0
 800661e:	dd08      	ble.n	8006632 <scalbn+0x92>
 8006620:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006624:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006628:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800662c:	4620      	mov	r0, r4
 800662e:	4629      	mov	r1, r5
 8006630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006632:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8006636:	da12      	bge.n	800665e <scalbn+0xbe>
 8006638:	f24c 3350 	movw	r3, #50000	; 0xc350
 800663c:	429f      	cmp	r7, r3
 800663e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8006642:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8006646:	dcdc      	bgt.n	8006602 <scalbn+0x62>
 8006648:	a30b      	add	r3, pc, #44	; (adr r3, 8006678 <scalbn+0xd8>)
 800664a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8006652:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8006656:	480f      	ldr	r0, [pc, #60]	; (8006694 <scalbn+0xf4>)
 8006658:	f041 011f 	orr.w	r1, r1, #31
 800665c:	e7b8      	b.n	80065d0 <scalbn+0x30>
 800665e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006662:	3136      	adds	r1, #54	; 0x36
 8006664:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006668:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800666c:	4620      	mov	r0, r4
 800666e:	4629      	mov	r1, r5
 8006670:	2200      	movs	r2, #0
 8006672:	4b09      	ldr	r3, [pc, #36]	; (8006698 <scalbn+0xf8>)
 8006674:	e7ac      	b.n	80065d0 <scalbn+0x30>
 8006676:	bf00      	nop
 8006678:	c2f8f359 	.word	0xc2f8f359
 800667c:	01a56e1f 	.word	0x01a56e1f
 8006680:	8800759c 	.word	0x8800759c
 8006684:	7e37e43c 	.word	0x7e37e43c
 8006688:	43500000 	.word	0x43500000
 800668c:	ffff3cb0 	.word	0xffff3cb0
 8006690:	8800759c 	.word	0x8800759c
 8006694:	c2f8f359 	.word	0xc2f8f359
 8006698:	3c900000 	.word	0x3c900000

0800669c <_init>:
 800669c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669e:	bf00      	nop
 80066a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066a2:	bc08      	pop	{r3}
 80066a4:	469e      	mov	lr, r3
 80066a6:	4770      	bx	lr

080066a8 <_fini>:
 80066a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066aa:	bf00      	nop
 80066ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ae:	bc08      	pop	{r3}
 80066b0:	469e      	mov	lr, r3
 80066b2:	4770      	bx	lr
